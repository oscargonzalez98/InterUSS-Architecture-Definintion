// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: pkg/api/v2/ridpbv2/rid.proto

package ridpbv2

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Altitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A code indicating the reference for a vertical distance. See AIXM 5.1 and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate plans to allow other options. FIXM and AIXM allow for 'SFC' which is equivalent to AGL.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// The reference quantities used to express the value of altitude. See FIXM 4.2. Currently, UTM only allows meters with no immediate plans to allow other options.
	Units string `protobuf:"bytes,2,opt,name=units,proto3" json:"units,omitempty"`
	// The numeric value of the altitude. Note that min and max values are added as a sanity check. As use cases evolve and more options are made available in terms of units of measure or reference systems, these bounds may be re-evaluated. Invalid, No Value, or Unknown is â€“1000 m.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Altitude) Reset() {
	*x = Altitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Altitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Altitude) ProtoMessage() {}

func (x *Altitude) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Altitude.ProtoReflect.Descriptor instead.
func (*Altitude) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{0}
}

func (x *Altitude) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Altitude) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Altitude) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A circular area on the surface of the earth.
type Circle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center *LatLngPoint `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Radius *Radius      `protobuf:"bytes,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *Circle) Reset() {
	*x = Circle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{1}
}

func (x *Circle) GetCenter() *LatLngPoint {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Circle) GetRadius() *Radius {
	if x != nil {
		return x.Radius
	}
	return nil
}

// Parameters for a request to create an Identification Service Area in the DSS.
type CreateIdentificationServiceAreaParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bounding spacetime extents of this Identification Service Area.  End time must be specified.  If start time is not specified, it will be set to the current time.  Start times in the past should be rejected by the DSS, except that it may adjust very recent start times to the current time.
	//
	// These extents should not reveal any sensitive information about the flight or flights within them.  This means, for instance, that extents should not tightly-wrap a flight path, nor should they generally be centered around the takeoff point of a single flight.
	Extents    *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	UssBaseUrl string    `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *CreateIdentificationServiceAreaParameters) Reset() {
	*x = CreateIdentificationServiceAreaParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdentificationServiceAreaParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentificationServiceAreaParameters) ProtoMessage() {}

func (x *CreateIdentificationServiceAreaParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentificationServiceAreaParameters.ProtoReflect.Descriptor instead.
func (*CreateIdentificationServiceAreaParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{2}
}

func (x *CreateIdentificationServiceAreaParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *CreateIdentificationServiceAreaParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type CreateIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *CreateIdentificationServiceAreaParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateIdentificationServiceAreaRequest) Reset() {
	*x = CreateIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *CreateIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*CreateIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{3}
}

func (x *CreateIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateIdentificationServiceAreaRequest) GetParams() *CreateIdentificationServiceAreaParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to create a subscription in the DSS.
type CreateSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The spacetime extents of the volume to subscribe to.
	//
	// This subscription will automatically be deleted after its end time if it has not been refreshed by then.  If end time is not specified, the value will be chosen automatically by the DSS.
	//
	// Note that some Entities triggering notifications may lie entirely outside the requested area.
	Extents    *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	UssBaseUrl string    `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *CreateSubscriptionParameters) Reset() {
	*x = CreateSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionParameters) ProtoMessage() {}

func (x *CreateSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSubscriptionParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *CreateSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type CreateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *CreateSubscriptionParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateSubscriptionRequest) Reset() {
	*x = CreateSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionRequest) ProtoMessage() {}

func (x *CreateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateSubscriptionRequest) GetParams() *CreateSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type DeleteIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version string used to reference an Identification Service Area at a particular point in time. Any updates to an existing Identification Service Area must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteIdentificationServiceAreaRequest) Reset() {
	*x = DeleteIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *DeleteIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*DeleteIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteIdentificationServiceAreaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Response for a request to delete an Identification Service Area.
type DeleteIdentificationServiceAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identification Service Area that was just deleted.
	ServiceArea *IdentificationServiceArea `protobuf:"bytes,1,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the Identification Service Area just deleted.  This client must call POST for each provided URL according to the `/uss/identification_service_areas` path API.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *DeleteIdentificationServiceAreaResponse) Reset() {
	*x = DeleteIdentificationServiceAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdentificationServiceAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentificationServiceAreaResponse) ProtoMessage() {}

func (x *DeleteIdentificationServiceAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentificationServiceAreaResponse.ProtoReflect.Descriptor instead.
func (*DeleteIdentificationServiceAreaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteIdentificationServiceAreaResponse) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

func (x *DeleteIdentificationServiceAreaResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version string used to reference a Subscription at a particular point in time. Any updates to an existing Subscription must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Response for a successful request to delete an Subscription.
type DeleteSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Subscription which was deleted.
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *DeleteSubscriptionResponse) Reset() {
	*x = DeleteSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionResponse) ProtoMessage() {}

func (x *DeleteSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Data provided when an off-nominal condition was encountered.
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable message indicating what error occurred and/or why.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Response to remote ID provider query for details about a specific flight.
type GetFlightDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *RIDFlightDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetFlightDetailsResponse) Reset() {
	*x = GetFlightDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlightDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlightDetailsResponse) ProtoMessage() {}

func (x *GetFlightDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlightDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetFlightDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{11}
}

func (x *GetFlightDetailsResponse) GetDetails() *RIDFlightDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Response to remote ID provider query for flight information in an area of interest.
type GetFlightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of all flights that have been within the requested area within the remote ID retention period.  This includes flights that are not currently within the requested area, but were within the requested area within the remote ID retention period.  Aircraft that are not in flight, and have not been in flight within the retention period, should not be included in this list.
	Flights []*RIDFlight `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
	// The requested view is entirely outside any remote ID service provision areas (Identification Service Area volumes) this provider has.  A display provider receiving this response should discontinue polling for this endpoint for the view port requested until otherwise directed by DSS interactions.
	NoIsasPresent bool `protobuf:"varint,2,opt,name=no_isas_present,json=noIsasPresent,proto3" json:"no_isas_present,omitempty"`
	// The remote ID service provider's timestamp for when this information was current.
	Timestamp *Time `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetFlightsResponse) Reset() {
	*x = GetFlightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlightsResponse) ProtoMessage() {}

func (x *GetFlightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlightsResponse.ProtoReflect.Descriptor instead.
func (*GetFlightsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{12}
}

func (x *GetFlightsResponse) GetFlights() []*RIDFlight {
	if x != nil {
		return x.Flights
	}
	return nil
}

func (x *GetFlightsResponse) GetNoIsasPresent() bool {
	if x != nil {
		return x.NoIsasPresent
	}
	return false
}

func (x *GetFlightsResponse) GetTimestamp() *Time {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Response to request for the details of an identification service area with the given ID.
type GetIdentificationServiceAreaDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The extents of the Identification Service Area.
	Extents *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
}

func (x *GetIdentificationServiceAreaDetailsResponse) Reset() {
	*x = GetIdentificationServiceAreaDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentificationServiceAreaDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentificationServiceAreaDetailsResponse) ProtoMessage() {}

func (x *GetIdentificationServiceAreaDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentificationServiceAreaDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetIdentificationServiceAreaDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{13}
}

func (x *GetIdentificationServiceAreaDetailsResponse) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

type GetIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIdentificationServiceAreaRequest) Reset() {
	*x = GetIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *GetIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*GetIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{14}
}

func (x *GetIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to DSS request for the identification service area with the given ID.
type GetIdentificationServiceAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceArea *IdentificationServiceArea `protobuf:"bytes,1,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
}

func (x *GetIdentificationServiceAreaResponse) Reset() {
	*x = GetIdentificationServiceAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentificationServiceAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentificationServiceAreaResponse) ProtoMessage() {}

func (x *GetIdentificationServiceAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentificationServiceAreaResponse.ProtoReflect.Descriptor instead.
func (*GetIdentificationServiceAreaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{15}
}

func (x *GetIdentificationServiceAreaResponse) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{16}
}

func (x *GetSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to DSS request for the subscription with the given id.
type GetSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{17}
}

func (x *GetSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// An Identification Service Area (area in which remote ID services are being provided).  The DSS reports only these declarations and clients must exchange flight information peer-to-peer.
type IdentificationServiceArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Assigned by the DSS based on creating clientâ€™s ID (via access token).  Used for restricting mutation and deletion operations to owner.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// End time of service.
	TimeEnd *Time `protobuf:"bytes,3,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of service.
	TimeStart  *Time  `protobuf:"bytes,4,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl string `protobuf:"bytes,5,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	Version    string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *IdentificationServiceArea) Reset() {
	*x = IdentificationServiceArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentificationServiceArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationServiceArea) ProtoMessage() {}

func (x *IdentificationServiceArea) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationServiceArea.ProtoReflect.Descriptor instead.
func (*IdentificationServiceArea) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{18}
}

func (x *IdentificationServiceArea) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdentificationServiceArea) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IdentificationServiceArea) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *IdentificationServiceArea) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *IdentificationServiceArea) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *IdentificationServiceArea) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Point on the earth's surface.
type LatLngPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *LatLngPoint) Reset() {
	*x = LatLngPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLngPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLngPoint) ProtoMessage() {}

func (x *LatLngPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLngPoint.ProtoReflect.Descriptor instead.
func (*LatLngPoint) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{19}
}

func (x *LatLngPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *LatLngPoint) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

// Area of operation containing one or more aircraft participating in remote identification.
type OperatingArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows for operating a single UA, group, formation, or swarm. Quantity in Group.
	AircraftCount int32 `protobuf:"varint,1,opt,name=aircraft_count,json=aircraftCount,proto3" json:"aircraft_count,omitempty"`
	// The area where a group or Intent-Based Network Participant operation is planned or taking place.
	Volumes []*OperatingArea `protobuf:"bytes,2,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *OperatingArea) Reset() {
	*x = OperatingArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatingArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatingArea) ProtoMessage() {}

func (x *OperatingArea) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatingArea.ProtoReflect.Descriptor instead.
func (*OperatingArea) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{20}
}

func (x *OperatingArea) GetAircraftCount() int32 {
	if x != nil {
		return x.AircraftCount
	}
	return 0
}

func (x *OperatingArea) GetVolumes() []*OperatingArea {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// Location associated with the Remote Pilot
type OperatorLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides the Operator Altitude based on WGS-84 height above ellipsoid (HAE) (See Geodetic Altitude).  This value is provided in meters and must have a minimum resolution of 1 m.
	Altitude *Altitude `protobuf:"bytes,1,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// Source of data for the altitude field.
	AltitudeType string `protobuf:"bytes,2,opt,name=altitude_type,json=altitudeType,proto3" json:"altitude_type,omitempty"`
	// Position of the Remote Pilot.
	Position *LatLngPoint `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *OperatorLocation) Reset() {
	*x = OperatorLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorLocation) ProtoMessage() {}

func (x *OperatorLocation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorLocation.ProtoReflect.Descriptor instead.
func (*OperatorLocation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{21}
}

func (x *OperatorLocation) GetAltitude() *Altitude {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *OperatorLocation) GetAltitudeType() string {
	if x != nil {
		return x.AltitudeType
	}
	return ""
}

func (x *OperatorLocation) GetPosition() *LatLngPoint {
	if x != nil {
		return x.Position
	}
	return nil
}

// An enclosed area on the earth. The bounding edges of this polygon are defined to be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude. The winding order must be interpreted as the order which produces the smaller area. The path between two vertices is defined to be the shortest possible path between those vertices. Edges may not cross. Vertices may not be duplicated.  In particular, the final polygon vertex must not be identical to the first vertex.
type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertices []*LatLngPoint `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{22}
}

func (x *Polygon) GetVertices() []*LatLngPoint {
	if x != nil {
		return x.Vertices
	}
	return nil
}

// Parameters of a message informing of new full information for an Identification Service Area.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
type PutIdentificationServiceAreaNotificationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new or updated extents of the Identification Service Area.
	//
	// Omitted if Identification Service Area was deleted.
	Extents *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	// Identification Service Area that the notifying client changed or created.
	//
	// If this field is populated, the Identification Service Area was created or updated.  If this field is not populated, the Identification Service Area was deleted.
	ServiceArea *IdentificationServiceArea `protobuf:"bytes,2,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *PutIdentificationServiceAreaNotificationParameters) Reset() {
	*x = PutIdentificationServiceAreaNotificationParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutIdentificationServiceAreaNotificationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutIdentificationServiceAreaNotificationParameters) ProtoMessage() {}

func (x *PutIdentificationServiceAreaNotificationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutIdentificationServiceAreaNotificationParameters.ProtoReflect.Descriptor instead.
func (*PutIdentificationServiceAreaNotificationParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{23}
}

func (x *PutIdentificationServiceAreaNotificationParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutIdentificationServiceAreaNotificationParameters) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

func (x *PutIdentificationServiceAreaNotificationParameters) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Response to a request to create or update a reference to an Identification Service Area in the DSS.
type PutIdentificationServiceAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting service area stored in DSS.
	ServiceArea *IdentificationServiceArea `protobuf:"bytes,1,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the Identification Service Area changes just made.  This client must call POST for each provided URL according to the `/uss/identification_service_areas/{id}` path API.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *PutIdentificationServiceAreaResponse) Reset() {
	*x = PutIdentificationServiceAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutIdentificationServiceAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutIdentificationServiceAreaResponse) ProtoMessage() {}

func (x *PutIdentificationServiceAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutIdentificationServiceAreaResponse.ProtoReflect.Descriptor instead.
func (*PutIdentificationServiceAreaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{24}
}

func (x *PutIdentificationServiceAreaResponse) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

func (x *PutIdentificationServiceAreaResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// Response for a request to create or update a subscription.
type PutSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identification Service Areas in or near the subscription area at the time of creation/update, if `identification_service_area_url` callback was specified.
	ServiceAreas []*IdentificationServiceArea `protobuf:"bytes,1,rep,name=service_areas,json=serviceAreas,proto3" json:"service_areas,omitempty"`
	// Result of the operation on the subscription.
	Subscription *Subscription `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *PutSubscriptionResponse) Reset() {
	*x = PutSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionResponse) ProtoMessage() {}

func (x *PutSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*PutSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{25}
}

func (x *PutSubscriptionResponse) GetServiceAreas() []*IdentificationServiceArea {
	if x != nil {
		return x.ServiceAreas
	}
	return nil
}

func (x *PutSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Position of an aircraft as reported for remote ID purposes.
type RIDAircraftPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Horizontal error that is likely to be present in this reported position.  Required when `extrapolated` field is true and always in the entry for the current state.
	AccuracyH string `protobuf:"bytes,1,opt,name=accuracy_h,json=accuracyH,proto3" json:"accuracy_h,omitempty"`
	// Vertical error that is likely to be present in this reported position.  Required when `extrapolated` field is true and always in the entry for the current state.
	AccuracyV string `protobuf:"bytes,2,opt,name=accuracy_v,json=accuracyV,proto3" json:"accuracy_v,omitempty"`
	// Geodetic altitude (NOT altitude above launch, altitude above ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured along a line that passes through the aircraft and is normal to the surface of the WGS84 ellipsoid.  This value is provided in meters and must have a minimum resolution of 1 meter.  Invalid, No Value or Unknown is -1000 m.
	Alt float32 `protobuf:"fixed32,3,opt,name=alt,proto3" json:"alt,omitempty"`
	// True if this position was generated primarily by computation rather than primarily from a direct instrument measurement.  Assumed false if not specified.
	Extrapolated bool       `protobuf:"varint,4,opt,name=extrapolated,proto3" json:"extrapolated,omitempty"`
	Height       *RIDHeight `protobuf:"bytes,5,opt,name=height,proto3" json:"height,omitempty"`
	Lat          float64    `protobuf:"fixed64,6,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng          float64    `protobuf:"fixed64,7,opt,name=lng,proto3" json:"lng,omitempty"`
	// The uncorrected altitude (based on reference standard 29.92 inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude deltas" between aircraft.  This value is provided in meters and must have a minimum resolution of 1 meter.  Invalid, No Value or Unknown is -1000 m.
	PressureAltitude float32 `protobuf:"fixed32,8,opt,name=pressure_altitude,json=pressureAltitude,proto3" json:"pressure_altitude,omitempty"`
}

func (x *RIDAircraftPosition) Reset() {
	*x = RIDAircraftPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDAircraftPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDAircraftPosition) ProtoMessage() {}

func (x *RIDAircraftPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDAircraftPosition.ProtoReflect.Descriptor instead.
func (*RIDAircraftPosition) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{26}
}

func (x *RIDAircraftPosition) GetAccuracyH() string {
	if x != nil {
		return x.AccuracyH
	}
	return ""
}

func (x *RIDAircraftPosition) GetAccuracyV() string {
	if x != nil {
		return x.AccuracyV
	}
	return ""
}

func (x *RIDAircraftPosition) GetAlt() float32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *RIDAircraftPosition) GetExtrapolated() bool {
	if x != nil {
		return x.Extrapolated
	}
	return false
}

func (x *RIDAircraftPosition) GetHeight() *RIDHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *RIDAircraftPosition) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *RIDAircraftPosition) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *RIDAircraftPosition) GetPressureAltitude() float32 {
	if x != nil {
		return x.PressureAltitude
	}
	return 0
}

// State of an aircraft for the purposes of remote ID.
type RIDAircraftState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationalStatus string               `protobuf:"bytes,1,opt,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	Position          *RIDAircraftPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// Ground speed of flight in meters per second.  Invalid, No Value, or Unknown is 255 m/s, if speed is >254.25 m/s then report 254.25 m/s.
	Speed float32 `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
	// Provides quality/containment on horizontal ground speed.
	SpeedAccuracy string `protobuf:"bytes,4,opt,name=speed_accuracy,json=speedAccuracy,proto3" json:"speed_accuracy,omitempty"`
	// Time at which this state was valid.  This may be the time coming from the source, such as a GPS, or the time when the system computes the values using an algorithm such as an Extended Kalman Filter (EKF).  Timestamp must be expressed with a minimum resolution of 1/10th of a second.
	Timestamp *Time `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Declaration of timestamp accuracy, which is the largest difference between Timestamp and true time of applicability for any of the following fields: Latitude, Longitude, Geodetic Altitude, Pressure Altitude of Position, Height. to determine time of applicability of the location data provided.  Expressed in seconds, precise to 1/10ths of seconds. The accuracy reflects the 95% uncertainty bound value for the timestamp.
	TimestampAccuracy float32 `protobuf:"fixed32,6,opt,name=timestamp_accuracy,json=timestampAccuracy,proto3" json:"timestamp_accuracy,omitempty"`
	// Direction of flight expressed as a "True North-based" ground track angle.  This value is provided in clockwise degrees with a minimum resolution of 1 degree.  If aircraft is not moving horizontally, use the "Unknown" value.  A value of 361 indicates invalid, no value, or unknown.
	Track float32 `protobuf:"fixed32,7,opt,name=track,proto3" json:"track,omitempty"`
	// Speed up (vertically) WGS84-HAE, m/s.  Invalid, No Value, or Unknown is 63 m/s, if speed is >62 m/s then report 62 m/s.
	VerticalSpeed float32 `protobuf:"fixed32,8,opt,name=vertical_speed,json=verticalSpeed,proto3" json:"vertical_speed,omitempty"`
}

func (x *RIDAircraftState) Reset() {
	*x = RIDAircraftState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDAircraftState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDAircraftState) ProtoMessage() {}

func (x *RIDAircraftState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDAircraftState.ProtoReflect.Descriptor instead.
func (*RIDAircraftState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{27}
}

func (x *RIDAircraftState) GetOperationalStatus() string {
	if x != nil {
		return x.OperationalStatus
	}
	return ""
}

func (x *RIDAircraftState) GetPosition() *RIDAircraftPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RIDAircraftState) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *RIDAircraftState) GetSpeedAccuracy() string {
	if x != nil {
		return x.SpeedAccuracy
	}
	return ""
}

func (x *RIDAircraftState) GetTimestamp() *Time {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RIDAircraftState) GetTimestampAccuracy() float32 {
	if x != nil {
		return x.TimestampAccuracy
	}
	return 0
}

func (x *RIDAircraftState) GetTrack() float32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *RIDAircraftState) GetVerticalSpeed() float32 {
	if x != nil {
		return x.VerticalSpeed
	}
	return 0
}

// Additional authentication data.
type RIDAuthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authentication data in form specified by `format`.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Format of additional authentication data.
	//
	// 0: None
	// 1: UAS ID Signature
	// 2: Operator ID Signature
	// 3: Message Set Signature
	// 4: Authentication Provided by Network Remote ID
	// 5: Specific Method
	// 6-9: Reserved for Spec
	// 10-15: Available for Private Use
	Format int32 `protobuf:"varint,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *RIDAuthData) Reset() {
	*x = RIDAuthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDAuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDAuthData) ProtoMessage() {}

func (x *RIDAuthData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDAuthData.ProtoReflect.Descriptor instead.
func (*RIDAuthData) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{28}
}

func (x *RIDAuthData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RIDAuthData) GetFormat() int32 {
	if x != nil {
		return x.Format
	}
	return 0
}

// Description of a remote ID flight.
type RIDFlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic type of aircraft.
	AircraftType string `protobuf:"bytes,1,opt,name=aircraft_type,json=aircraftType,proto3" json:"aircraft_type,omitempty"`
	// The most up-to-date state of the aircraft.  Required when the aircraft is
	// currently in the requested area unless no telemetry is expected during during
	// the flight and `volumes` is specified.
	//
	// If current data is not being received from the UAS by the Service Provider,
	// the lack of change in this field is sufficient to indicate that current
	// data is not being received.
	//
	// If the USS believes a flight is airborne and expects to receive telemetry
	// at some point during the flight but has not yet received telemetry, this
	// field should be populated with the USS's best estimate of the position
	// of the flight with appropriate accuracy indications.
	CurrentState *RIDAircraftState `protobuf:"bytes,2,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	Id           string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The area the aircraft is/are within.  Required, with 1 or more elements, if
	// `current_state` is not specified.  The fields `time_start` and `time_end` are
	// required.
	//
	// If `current_state` is specified, this field should not be specified.
	// If `current_state` was available at any time during the flight, or is
	// expected to be available at any time during the flight, this field should
	// not be specified.
	OperatingArea *OperatingArea `protobuf:"bytes,4,opt,name=operating_area,json=operatingArea,proto3" json:"operating_area,omitempty"`
	// A short collection of recent aircraft movement, specified only when `recent_positions_duration` is greater than zero.  If `volumes` is not specified and `recent_positions_duration` is greater than zero, then this field is required.
	//
	// Recent positions provided in this field must conform to requirements in the standard which generally prohibit including positions outside the requested area except transitionally when the aircraft enters or exits the requested area, and which prohibit including positions that not sufficiently recent.
	//
	// Note that a UI should not draw a connective line between two consecutive position reports that both lie outside the requested area.
	RecentPositions []*RIDRecentAircraftPosition `protobuf:"bytes,5,rep,name=recent_positions,json=recentPositions,proto3" json:"recent_positions,omitempty"`
	// If specified as true, this flight is not a physical aircraft; it is just a simulation to test the system.
	Simulated bool `protobuf:"varint,6,opt,name=simulated,proto3" json:"simulated,omitempty"`
}

func (x *RIDFlight) Reset() {
	*x = RIDFlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDFlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDFlight) ProtoMessage() {}

func (x *RIDFlight) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDFlight.ProtoReflect.Descriptor instead.
func (*RIDFlight) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{29}
}

func (x *RIDFlight) GetAircraftType() string {
	if x != nil {
		return x.AircraftType
	}
	return ""
}

func (x *RIDFlight) GetCurrentState() *RIDAircraftState {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *RIDFlight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RIDFlight) GetOperatingArea() *OperatingArea {
	if x != nil {
		return x.OperatingArea
	}
	return nil
}

func (x *RIDFlight) GetRecentPositions() []*RIDRecentAircraftPosition {
	if x != nil {
		return x.RecentPositions
	}
	return nil
}

func (x *RIDFlight) GetSimulated() bool {
	if x != nil {
		return x.Simulated
	}
	return false
}

// Details about a flight reported by a remote ID service provider.  At least one of the registration or serial fields must be filled if required by CAA.
type RIDFlightDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData *RIDAuthData `protobuf:"bytes,1,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty"`
	// When this field is specified, the Classification Type is "European Union".  If no other classification field is specified, the Classification Type is "Undeclared".
	EuClassification *UAClassificationEU `protobuf:"bytes,2,opt,name=eu_classification,json=euClassification,proto3" json:"eu_classification,omitempty"`
	// ID for this flight, matching argument in request.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Free-text field that enables the operator to describe the purpose of a flight, if so desired.
	OperationDescription string `protobuf:"bytes,4,opt,name=operation_description,json=operationDescription,proto3" json:"operation_description,omitempty"`
	// This optional field provides a CAA-issued registration/license ID for the remote pilot or operator. Format is <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII encoded, only uppercase letters (A-Z), dot (.), and digits (0-9) are allowed. Example is valid for the US.
	OperatorId       string            `protobuf:"bytes,5,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OperatorLocation *OperatorLocation `protobuf:"bytes,6,opt,name=operator_location,json=operatorLocation,proto3" json:"operator_location,omitempty"`
	UasId            *UASID            `protobuf:"bytes,7,opt,name=uas_id,json=uasId,proto3" json:"uas_id,omitempty"`
}

func (x *RIDFlightDetails) Reset() {
	*x = RIDFlightDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDFlightDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDFlightDetails) ProtoMessage() {}

func (x *RIDFlightDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDFlightDetails.ProtoReflect.Descriptor instead.
func (*RIDFlightDetails) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{30}
}

func (x *RIDFlightDetails) GetAuthData() *RIDAuthData {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *RIDFlightDetails) GetEuClassification() *UAClassificationEU {
	if x != nil {
		return x.EuClassification
	}
	return nil
}

func (x *RIDFlightDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RIDFlightDetails) GetOperationDescription() string {
	if x != nil {
		return x.OperationDescription
	}
	return ""
}

func (x *RIDFlightDetails) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *RIDFlightDetails) GetOperatorLocation() *OperatorLocation {
	if x != nil {
		return x.OperatorLocation
	}
	return nil
}

func (x *RIDFlightDetails) GetUasId() *UASID {
	if x != nil {
		return x.UasId
	}
	return nil
}

// A relative altitude for the purposes of remote ID.
type RIDHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Distance above reference datum.  This value is provided in meters and must have a minimum resolution of 1 meter.  Invalid, No Value or Unknown is -1000 m.
	Distance float32 `protobuf:"fixed32,1,opt,name=distance,proto3" json:"distance,omitempty"`
	// The reference datum above which the height is reported.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *RIDHeight) Reset() {
	*x = RIDHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDHeight) ProtoMessage() {}

func (x *RIDHeight) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDHeight.ProtoReflect.Descriptor instead.
func (*RIDHeight) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{31}
}

func (x *RIDHeight) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *RIDHeight) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type RIDRecentAircraftPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *RIDAircraftPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// Time at which this position applied.
	Time *Time `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RIDRecentAircraftPosition) Reset() {
	*x = RIDRecentAircraftPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDRecentAircraftPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDRecentAircraftPosition) ProtoMessage() {}

func (x *RIDRecentAircraftPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDRecentAircraftPosition.ProtoReflect.Descriptor instead.
func (*RIDRecentAircraftPosition) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{32}
}

func (x *RIDRecentAircraftPosition) GetPosition() *RIDAircraftPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RIDRecentAircraftPosition) GetTime() *Time {
	if x != nil {
		return x.Time
	}
	return nil
}

type Radius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
	Units string `protobuf:"bytes,1,opt,name=units,proto3" json:"units,omitempty"`
	// Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Radius) Reset() {
	*x = Radius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radius) ProtoMessage() {}

func (x *Radius) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radius.ProtoReflect.Descriptor instead.
func (*Radius) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{33}
}

func (x *Radius) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Radius) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SearchIdentificationServiceAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The area in which to search for Identification Service Areas.  Some Identification Service Areas near this area but wholly outside it may also be returned.
	Area string `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
	// If specified, indicates non-interest in any Identification Service Areas that end before this time.  RFC 3339 format, per OpenAPI specification. The time zone must be 'Z'.
	EarliestTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=earliest_time,json=earliestTime,proto3" json:"earliest_time,omitempty"`
	// If specified, indicates non-interest in any Identification Service Areas that start after this time.  RFC 3339 format, per OpenAPI specification. The time zone must be 'Z'.
	LatestTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=latest_time,json=latestTime,proto3" json:"latest_time,omitempty"`
}

func (x *SearchIdentificationServiceAreasRequest) Reset() {
	*x = SearchIdentificationServiceAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIdentificationServiceAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIdentificationServiceAreasRequest) ProtoMessage() {}

func (x *SearchIdentificationServiceAreasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIdentificationServiceAreasRequest.ProtoReflect.Descriptor instead.
func (*SearchIdentificationServiceAreasRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{34}
}

func (x *SearchIdentificationServiceAreasRequest) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *SearchIdentificationServiceAreasRequest) GetEarliestTime() *timestamp.Timestamp {
	if x != nil {
		return x.EarliestTime
	}
	return nil
}

func (x *SearchIdentificationServiceAreasRequest) GetLatestTime() *timestamp.Timestamp {
	if x != nil {
		return x.LatestTime
	}
	return nil
}

// Response to DSS query for Identification Service Areas in an area of interest.
type SearchIdentificationServiceAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identification Service Areas in the area of interest.
	ServiceAreas []*IdentificationServiceArea `protobuf:"bytes,1,rep,name=service_areas,json=serviceAreas,proto3" json:"service_areas,omitempty"`
}

func (x *SearchIdentificationServiceAreasResponse) Reset() {
	*x = SearchIdentificationServiceAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIdentificationServiceAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIdentificationServiceAreasResponse) ProtoMessage() {}

func (x *SearchIdentificationServiceAreasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIdentificationServiceAreasResponse.ProtoReflect.Descriptor instead.
func (*SearchIdentificationServiceAreasResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{35}
}

func (x *SearchIdentificationServiceAreasResponse) GetServiceAreas() []*IdentificationServiceArea {
	if x != nil {
		return x.ServiceAreas
	}
	return nil
}

type SearchSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The area in which to search for Subscriptions.  Some Subscriptions near this area but wholly outside it may also be returned.
	Area string `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *SearchSubscriptionsRequest) Reset() {
	*x = SearchSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsRequest) ProtoMessage() {}

func (x *SearchSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{36}
}

func (x *SearchSubscriptionsRequest) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

// Response to DSS query for subscriptions in a particular area.
type SearchSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriptions that overlap the specified area.
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SearchSubscriptionsResponse) Reset() {
	*x = SearchSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsResponse) ProtoMessage() {}

func (x *SearchSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{37}
}

func (x *SearchSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Subscriber to notify of a creation/change/deletion of a change in the airspace.  This is provided by the DSS to a client changing the airspace, and it is the responsibility of the client changing the airspace (they will receive a set of these notification requests) to send a notification to each specified `url`.
type SubscriberToNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// The endpoint that the client mutating the airspace should provide the update to.  API depends on the DSS action taken that triggered this notification request.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SubscriberToNotify) Reset() {
	*x = SubscriberToNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberToNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberToNotify) ProtoMessage() {}

func (x *SubscriberToNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberToNotify.ProtoReflect.Descriptor instead.
func (*SubscriberToNotify) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{38}
}

func (x *SubscriberToNotify) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *SubscriberToNotify) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Specification of a geographic area that a client is interested in on an ongoing basis (e.g., "planning area").  Internal to the DSS.
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this subscription.
	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NotificationIndex int32  `protobuf:"varint,2,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	// Assigned by the DSS based on creating clientâ€™s ID (via access token).  Used for restricting mutation and deletion operations to owner.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// If set, this subscription will be automatically removed after this time.
	TimeEnd *Time `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// If set, this Subscription will not generate any notifications before this time.
	TimeStart  *Time  `protobuf:"bytes,5,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl string `protobuf:"bytes,6,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	Version    string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{39}
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *Subscription) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Subscription) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Subscription) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Subscription) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *Subscription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// State of Subscription which is causing a notification to be sent.
type SubscriptionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationIndex int32  `protobuf:"varint,1,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	SubscriptionId    string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *SubscriptionState) Reset() {
	*x = SubscriptionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionState) ProtoMessage() {}

func (x *SubscriptionState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionState.ProtoReflect.Descriptor instead.
func (*SubscriptionState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{40}
}

func (x *SubscriptionState) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *SubscriptionState) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// RFC3339-formatted time/date string.  The time zone must be 'Z'.
	Value *timestamp.Timestamp `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{41}
}

func (x *Time) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Time) GetValue() *timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

type UAClassificationEU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Class    string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *UAClassificationEU) Reset() {
	*x = UAClassificationEU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UAClassificationEU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UAClassificationEU) ProtoMessage() {}

func (x *UAClassificationEU) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UAClassificationEU.ProtoReflect.Descriptor instead.
func (*UAClassificationEU) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{42}
}

func (x *UAClassificationEU) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UAClassificationEU) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

// Identification of the UAS performing this flight.  At least one field of this object must be specified.
type UASID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a CAA provides a method of registering UAS, this number is provided by the CAA or its authorized representative.  Format is <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII encoded, only uppercase letters (A-Z), dot (.), and digits (0-9) are allowed. Example is valid for the US.
	RegistrationId string `protobuf:"bytes,1,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	// This is expressed in the CTA-2063-A Serial Number format.
	SerialNumber      string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	SpecificSessionId string `protobuf:"bytes,3,opt,name=specific_session_id,json=specificSessionId,proto3" json:"specific_session_id,omitempty"`
	// A UTM-provided universally unique ID traceable to a non-obfuscated ID that acts as a "session id" to protect exposure of operationally sensitive information.
	UtmId string `protobuf:"bytes,4,opt,name=utm_id,json=utmId,proto3" json:"utm_id,omitempty"`
}

func (x *UASID) Reset() {
	*x = UASID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UASID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UASID) ProtoMessage() {}

func (x *UASID) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UASID.ProtoReflect.Descriptor instead.
func (*UASID) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{43}
}

func (x *UASID) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *UASID) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *UASID) GetSpecificSessionId() string {
	if x != nil {
		return x.SpecificSessionId
	}
	return ""
}

func (x *UASID) GetUtmId() string {
	if x != nil {
		return x.UtmId
	}
	return ""
}

// Parameters for a request to update an Identification Service Area in the DSS.
type UpdateIdentificationServiceAreaParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bounding spacetime extents of this Identification Service Area.  End time must be specified.  If start time is not specified, it will remain unchanged.  Start times in the past should be rejected by the DSS unless they are unchanged from the Identification Service Area's current start time.
	//
	// These extents should not reveal any sensitive information about the flight or flights within them.  This means, for instance, that extents should not tightly-wrap a flight path, nor should they generally be centered around the takeoff point of a single flight.
	Extents    *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	UssBaseUrl string    `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *UpdateIdentificationServiceAreaParameters) Reset() {
	*x = UpdateIdentificationServiceAreaParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentificationServiceAreaParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentificationServiceAreaParameters) ProtoMessage() {}

func (x *UpdateIdentificationServiceAreaParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentificationServiceAreaParameters.ProtoReflect.Descriptor instead.
func (*UpdateIdentificationServiceAreaParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateIdentificationServiceAreaParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *UpdateIdentificationServiceAreaParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type UpdateIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *UpdateIdentificationServiceAreaParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Version string used to reference an Identification Service Area at a particular point in time. Any updates to an existing Identification Service Area must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateIdentificationServiceAreaRequest) Reset() {
	*x = UpdateIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *UpdateIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*UpdateIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIdentificationServiceAreaRequest) GetParams() *UpdateIdentificationServiceAreaParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateIdentificationServiceAreaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Parameters for a request to update a subscription in the DSS.
type UpdateSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The spacetime extents of the volume to subscribe to.
	//
	// This subscription will automatically be deleted after its end time if it has not been refreshed by then.  If end time is not specified, the value will be chosen automatically by the DSS.
	//
	// Note that some Entities triggering notifications may lie entirely outside the requested area.
	Extents    *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	UssBaseUrl string    `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *UpdateSubscriptionParameters) Reset() {
	*x = UpdateSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionParameters) ProtoMessage() {}

func (x *UpdateSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateSubscriptionParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *UpdateSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type UpdateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *UpdateSubscriptionParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Version string used to reference a Subscription at a particular point in time. Any updates to an existing Subscription must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateSubscriptionRequest) Reset() {
	*x = UpdateSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionRequest) ProtoMessage() {}

func (x *UpdateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubscriptionRequest) GetParams() *UpdateSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// A three-dimensional geographic volume consisting of a vertically-extruded shape. Exactly one outline must be specified.
type Volume3D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum bounding altitude of this volume. Must be less than altitude_upper, if specified.
	AltitudeLower *Altitude `protobuf:"bytes,1,opt,name=altitude_lower,json=altitudeLower,proto3" json:"altitude_lower,omitempty"`
	// Maximum bounding altitude of this volume. Must be greater than altitude_lower, if specified.
	AltitudeUpper *Altitude `protobuf:"bytes,2,opt,name=altitude_upper,json=altitudeUpper,proto3" json:"altitude_upper,omitempty"`
	// A circular geographic shape on the surface of the earth.
	OutlineCircle *Circle `protobuf:"bytes,3,opt,name=outline_circle,json=outlineCircle,proto3" json:"outline_circle,omitempty"`
	// A polygonal geographic shape on the surface of the earth.
	OutlinePolygon *Polygon `protobuf:"bytes,4,opt,name=outline_polygon,json=outlinePolygon,proto3" json:"outline_polygon,omitempty"`
}

func (x *Volume3D) Reset() {
	*x = Volume3D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume3D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume3D) ProtoMessage() {}

func (x *Volume3D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume3D.ProtoReflect.Descriptor instead.
func (*Volume3D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{48}
}

func (x *Volume3D) GetAltitudeLower() *Altitude {
	if x != nil {
		return x.AltitudeLower
	}
	return nil
}

func (x *Volume3D) GetAltitudeUpper() *Altitude {
	if x != nil {
		return x.AltitudeUpper
	}
	return nil
}

func (x *Volume3D) GetOutlineCircle() *Circle {
	if x != nil {
		return x.OutlineCircle
	}
	return nil
}

func (x *Volume3D) GetOutlinePolygon() *Polygon {
	if x != nil {
		return x.OutlinePolygon
	}
	return nil
}

// Contiguous block of geographic spacetime.
type Volume4D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End time of this volume. Must be after time_start.
	TimeEnd *Time `protobuf:"bytes,1,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of this volume. Must be before time_end.
	TimeStart *Time     `protobuf:"bytes,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	Volume    *Volume3D `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Volume4D) Reset() {
	*x = Volume4D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume4D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume4D) ProtoMessage() {}

func (x *Volume4D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume4D.ProtoReflect.Descriptor instead.
func (*Volume4D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP(), []int{49}
}

func (x *Volume4D) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Volume4D) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Volume4D) GetVolume() *Volume3D {
	if x != nil {
		return x.Volume
	}
	return nil
}

var File_pkg_api_v2_ridpbv2_rid_proto protoreflect.FileDescriptor

var file_pkg_api_v2_ridpbv2_rid_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x32, 0x2f, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x08, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x06,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x7a, 0x0a,
	0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69,
	0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x6d, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0x6a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x26, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xaf, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x45, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x29, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x32, 0x2e, 0x52, 0x49, 0x44, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x97, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x52, 0x49, 0x44, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x69, 0x73, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x49,
	0x73, 0x61, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5a, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69,
	0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6e, 0x67, 0x22, 0x68, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x65, 0x61, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x98,
	0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x07, 0x50, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x32, 0x50, 0x75, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x24, 0x50, 0x75, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x52, 0x49, 0x44, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x52, 0x49, 0x44, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x10,
	0x52, 0x49, 0x44, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x52, 0x49, 0x44, 0x41,
	0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22,
	0x39, 0x0a, 0x0b, 0x52, 0x49, 0x44, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x09, 0x52,
	0x49, 0x44, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x52,
	0x49, 0x44, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x4d, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x52, 0x49, 0x44, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x10, 0x52, 0x49,
	0x44, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x52, 0x49, 0x44, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x75, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x55, 0x41, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x52, 0x10, 0x65, 0x75, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x75, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x32, 0x2e, 0x55, 0x41, 0x53, 0x49, 0x44, 0x52, 0x05, 0x75, 0x61, 0x73, 0x49, 0x64,
	0x22, 0x45, 0x0a, 0x09, 0x52, 0x49, 0x44, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x19, 0x52, 0x49, 0x44, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x52, 0x49, 0x44, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x34, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x28, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0x5a, 0x0a, 0x1b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x55,
	0x41, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x55, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x55, 0x41, 0x53, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75,
	0x74, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x74, 0x6d,
	0x49, 0x64, 0x22, 0x7a, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x9e,
	0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x6d, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x84,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x33, 0x44, 0x12, 0x38, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x32, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x0d, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52,
	0x0d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33,
	0x44, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0xa9, 0x0d, 0x0a, 0x24, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x41, 0x50,
	0x49, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x32, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x2d,
	0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x1e, 0x2f, 0x72, 0x69, 0x64,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x2a, 0x37, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xb2, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2c, 0x2e,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x69,
	0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xb9, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x73, 0x12, 0x30, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x12, 0x28, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f,
	0x64, 0x73, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xca, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32,
	0x2e, 0x50, 0x75, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x1a, 0x37, 0x2f,
	0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x94,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x1a, 0x28, 0x2f, 0x72, 0x69, 0x64, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_v2_ridpbv2_rid_proto_rawDescOnce sync.Once
	file_pkg_api_v2_ridpbv2_rid_proto_rawDescData = file_pkg_api_v2_ridpbv2_rid_proto_rawDesc
)

func file_pkg_api_v2_ridpbv2_rid_proto_rawDescGZIP() []byte {
	file_pkg_api_v2_ridpbv2_rid_proto_rawDescOnce.Do(func() {
		file_pkg_api_v2_ridpbv2_rid_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v2_ridpbv2_rid_proto_rawDescData)
	})
	return file_pkg_api_v2_ridpbv2_rid_proto_rawDescData
}

var file_pkg_api_v2_ridpbv2_rid_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_pkg_api_v2_ridpbv2_rid_proto_goTypes = []interface{}{
	(*Altitude)(nil), // 0: ridpbv2.Altitude
	(*Circle)(nil),   // 1: ridpbv2.Circle
	(*CreateIdentificationServiceAreaParameters)(nil),          // 2: ridpbv2.CreateIdentificationServiceAreaParameters
	(*CreateIdentificationServiceAreaRequest)(nil),             // 3: ridpbv2.CreateIdentificationServiceAreaRequest
	(*CreateSubscriptionParameters)(nil),                       // 4: ridpbv2.CreateSubscriptionParameters
	(*CreateSubscriptionRequest)(nil),                          // 5: ridpbv2.CreateSubscriptionRequest
	(*DeleteIdentificationServiceAreaRequest)(nil),             // 6: ridpbv2.DeleteIdentificationServiceAreaRequest
	(*DeleteIdentificationServiceAreaResponse)(nil),            // 7: ridpbv2.DeleteIdentificationServiceAreaResponse
	(*DeleteSubscriptionRequest)(nil),                          // 8: ridpbv2.DeleteSubscriptionRequest
	(*DeleteSubscriptionResponse)(nil),                         // 9: ridpbv2.DeleteSubscriptionResponse
	(*ErrorResponse)(nil),                                      // 10: ridpbv2.ErrorResponse
	(*GetFlightDetailsResponse)(nil),                           // 11: ridpbv2.GetFlightDetailsResponse
	(*GetFlightsResponse)(nil),                                 // 12: ridpbv2.GetFlightsResponse
	(*GetIdentificationServiceAreaDetailsResponse)(nil),        // 13: ridpbv2.GetIdentificationServiceAreaDetailsResponse
	(*GetIdentificationServiceAreaRequest)(nil),                // 14: ridpbv2.GetIdentificationServiceAreaRequest
	(*GetIdentificationServiceAreaResponse)(nil),               // 15: ridpbv2.GetIdentificationServiceAreaResponse
	(*GetSubscriptionRequest)(nil),                             // 16: ridpbv2.GetSubscriptionRequest
	(*GetSubscriptionResponse)(nil),                            // 17: ridpbv2.GetSubscriptionResponse
	(*IdentificationServiceArea)(nil),                          // 18: ridpbv2.IdentificationServiceArea
	(*LatLngPoint)(nil),                                        // 19: ridpbv2.LatLngPoint
	(*OperatingArea)(nil),                                      // 20: ridpbv2.OperatingArea
	(*OperatorLocation)(nil),                                   // 21: ridpbv2.OperatorLocation
	(*Polygon)(nil),                                            // 22: ridpbv2.Polygon
	(*PutIdentificationServiceAreaNotificationParameters)(nil), // 23: ridpbv2.PutIdentificationServiceAreaNotificationParameters
	(*PutIdentificationServiceAreaResponse)(nil),               // 24: ridpbv2.PutIdentificationServiceAreaResponse
	(*PutSubscriptionResponse)(nil),                            // 25: ridpbv2.PutSubscriptionResponse
	(*RIDAircraftPosition)(nil),                                // 26: ridpbv2.RIDAircraftPosition
	(*RIDAircraftState)(nil),                                   // 27: ridpbv2.RIDAircraftState
	(*RIDAuthData)(nil),                                        // 28: ridpbv2.RIDAuthData
	(*RIDFlight)(nil),                                          // 29: ridpbv2.RIDFlight
	(*RIDFlightDetails)(nil),                                   // 30: ridpbv2.RIDFlightDetails
	(*RIDHeight)(nil),                                          // 31: ridpbv2.RIDHeight
	(*RIDRecentAircraftPosition)(nil),                          // 32: ridpbv2.RIDRecentAircraftPosition
	(*Radius)(nil),                                             // 33: ridpbv2.Radius
	(*SearchIdentificationServiceAreasRequest)(nil),            // 34: ridpbv2.SearchIdentificationServiceAreasRequest
	(*SearchIdentificationServiceAreasResponse)(nil),           // 35: ridpbv2.SearchIdentificationServiceAreasResponse
	(*SearchSubscriptionsRequest)(nil),                         // 36: ridpbv2.SearchSubscriptionsRequest
	(*SearchSubscriptionsResponse)(nil),                        // 37: ridpbv2.SearchSubscriptionsResponse
	(*SubscriberToNotify)(nil),                                 // 38: ridpbv2.SubscriberToNotify
	(*Subscription)(nil),                                       // 39: ridpbv2.Subscription
	(*SubscriptionState)(nil),                                  // 40: ridpbv2.SubscriptionState
	(*Time)(nil),                                               // 41: ridpbv2.Time
	(*UAClassificationEU)(nil),                                 // 42: ridpbv2.UAClassificationEU
	(*UASID)(nil),                                              // 43: ridpbv2.UASID
	(*UpdateIdentificationServiceAreaParameters)(nil),          // 44: ridpbv2.UpdateIdentificationServiceAreaParameters
	(*UpdateIdentificationServiceAreaRequest)(nil),             // 45: ridpbv2.UpdateIdentificationServiceAreaRequest
	(*UpdateSubscriptionParameters)(nil),                       // 46: ridpbv2.UpdateSubscriptionParameters
	(*UpdateSubscriptionRequest)(nil),                          // 47: ridpbv2.UpdateSubscriptionRequest
	(*Volume3D)(nil),                                           // 48: ridpbv2.Volume3D
	(*Volume4D)(nil),                                           // 49: ridpbv2.Volume4D
	(*timestamp.Timestamp)(nil),                                // 50: google.protobuf.Timestamp
}
var file_pkg_api_v2_ridpbv2_rid_proto_depIdxs = []int32{
	19, // 0: ridpbv2.Circle.center:type_name -> ridpbv2.LatLngPoint
	33, // 1: ridpbv2.Circle.radius:type_name -> ridpbv2.Radius
	49, // 2: ridpbv2.CreateIdentificationServiceAreaParameters.extents:type_name -> ridpbv2.Volume4D
	2,  // 3: ridpbv2.CreateIdentificationServiceAreaRequest.params:type_name -> ridpbv2.CreateIdentificationServiceAreaParameters
	49, // 4: ridpbv2.CreateSubscriptionParameters.extents:type_name -> ridpbv2.Volume4D
	4,  // 5: ridpbv2.CreateSubscriptionRequest.params:type_name -> ridpbv2.CreateSubscriptionParameters
	18, // 6: ridpbv2.DeleteIdentificationServiceAreaResponse.service_area:type_name -> ridpbv2.IdentificationServiceArea
	38, // 7: ridpbv2.DeleteIdentificationServiceAreaResponse.subscribers:type_name -> ridpbv2.SubscriberToNotify
	39, // 8: ridpbv2.DeleteSubscriptionResponse.subscription:type_name -> ridpbv2.Subscription
	30, // 9: ridpbv2.GetFlightDetailsResponse.details:type_name -> ridpbv2.RIDFlightDetails
	29, // 10: ridpbv2.GetFlightsResponse.flights:type_name -> ridpbv2.RIDFlight
	41, // 11: ridpbv2.GetFlightsResponse.timestamp:type_name -> ridpbv2.Time
	49, // 12: ridpbv2.GetIdentificationServiceAreaDetailsResponse.extents:type_name -> ridpbv2.Volume4D
	18, // 13: ridpbv2.GetIdentificationServiceAreaResponse.service_area:type_name -> ridpbv2.IdentificationServiceArea
	39, // 14: ridpbv2.GetSubscriptionResponse.subscription:type_name -> ridpbv2.Subscription
	41, // 15: ridpbv2.IdentificationServiceArea.time_end:type_name -> ridpbv2.Time
	41, // 16: ridpbv2.IdentificationServiceArea.time_start:type_name -> ridpbv2.Time
	20, // 17: ridpbv2.OperatingArea.volumes:type_name -> ridpbv2.OperatingArea
	0,  // 18: ridpbv2.OperatorLocation.altitude:type_name -> ridpbv2.Altitude
	19, // 19: ridpbv2.OperatorLocation.position:type_name -> ridpbv2.LatLngPoint
	19, // 20: ridpbv2.Polygon.vertices:type_name -> ridpbv2.LatLngPoint
	49, // 21: ridpbv2.PutIdentificationServiceAreaNotificationParameters.extents:type_name -> ridpbv2.Volume4D
	18, // 22: ridpbv2.PutIdentificationServiceAreaNotificationParameters.service_area:type_name -> ridpbv2.IdentificationServiceArea
	40, // 23: ridpbv2.PutIdentificationServiceAreaNotificationParameters.subscriptions:type_name -> ridpbv2.SubscriptionState
	18, // 24: ridpbv2.PutIdentificationServiceAreaResponse.service_area:type_name -> ridpbv2.IdentificationServiceArea
	38, // 25: ridpbv2.PutIdentificationServiceAreaResponse.subscribers:type_name -> ridpbv2.SubscriberToNotify
	18, // 26: ridpbv2.PutSubscriptionResponse.service_areas:type_name -> ridpbv2.IdentificationServiceArea
	39, // 27: ridpbv2.PutSubscriptionResponse.subscription:type_name -> ridpbv2.Subscription
	31, // 28: ridpbv2.RIDAircraftPosition.height:type_name -> ridpbv2.RIDHeight
	26, // 29: ridpbv2.RIDAircraftState.position:type_name -> ridpbv2.RIDAircraftPosition
	41, // 30: ridpbv2.RIDAircraftState.timestamp:type_name -> ridpbv2.Time
	27, // 31: ridpbv2.RIDFlight.current_state:type_name -> ridpbv2.RIDAircraftState
	20, // 32: ridpbv2.RIDFlight.operating_area:type_name -> ridpbv2.OperatingArea
	32, // 33: ridpbv2.RIDFlight.recent_positions:type_name -> ridpbv2.RIDRecentAircraftPosition
	28, // 34: ridpbv2.RIDFlightDetails.auth_data:type_name -> ridpbv2.RIDAuthData
	42, // 35: ridpbv2.RIDFlightDetails.eu_classification:type_name -> ridpbv2.UAClassificationEU
	21, // 36: ridpbv2.RIDFlightDetails.operator_location:type_name -> ridpbv2.OperatorLocation
	43, // 37: ridpbv2.RIDFlightDetails.uas_id:type_name -> ridpbv2.UASID
	26, // 38: ridpbv2.RIDRecentAircraftPosition.position:type_name -> ridpbv2.RIDAircraftPosition
	41, // 39: ridpbv2.RIDRecentAircraftPosition.time:type_name -> ridpbv2.Time
	50, // 40: ridpbv2.SearchIdentificationServiceAreasRequest.earliest_time:type_name -> google.protobuf.Timestamp
	50, // 41: ridpbv2.SearchIdentificationServiceAreasRequest.latest_time:type_name -> google.protobuf.Timestamp
	18, // 42: ridpbv2.SearchIdentificationServiceAreasResponse.service_areas:type_name -> ridpbv2.IdentificationServiceArea
	39, // 43: ridpbv2.SearchSubscriptionsResponse.subscriptions:type_name -> ridpbv2.Subscription
	40, // 44: ridpbv2.SubscriberToNotify.subscriptions:type_name -> ridpbv2.SubscriptionState
	41, // 45: ridpbv2.Subscription.time_end:type_name -> ridpbv2.Time
	41, // 46: ridpbv2.Subscription.time_start:type_name -> ridpbv2.Time
	50, // 47: ridpbv2.Time.value:type_name -> google.protobuf.Timestamp
	49, // 48: ridpbv2.UpdateIdentificationServiceAreaParameters.extents:type_name -> ridpbv2.Volume4D
	44, // 49: ridpbv2.UpdateIdentificationServiceAreaRequest.params:type_name -> ridpbv2.UpdateIdentificationServiceAreaParameters
	49, // 50: ridpbv2.UpdateSubscriptionParameters.extents:type_name -> ridpbv2.Volume4D
	46, // 51: ridpbv2.UpdateSubscriptionRequest.params:type_name -> ridpbv2.UpdateSubscriptionParameters
	0,  // 52: ridpbv2.Volume3D.altitude_lower:type_name -> ridpbv2.Altitude
	0,  // 53: ridpbv2.Volume3D.altitude_upper:type_name -> ridpbv2.Altitude
	1,  // 54: ridpbv2.Volume3D.outline_circle:type_name -> ridpbv2.Circle
	22, // 55: ridpbv2.Volume3D.outline_polygon:type_name -> ridpbv2.Polygon
	41, // 56: ridpbv2.Volume4D.time_end:type_name -> ridpbv2.Time
	41, // 57: ridpbv2.Volume4D.time_start:type_name -> ridpbv2.Time
	48, // 58: ridpbv2.Volume4D.volume:type_name -> ridpbv2.Volume3D
	3,  // 59: ridpbv2.StandardRemoteIDAPIInterfacesService.CreateIdentificationServiceArea:input_type -> ridpbv2.CreateIdentificationServiceAreaRequest
	5,  // 60: ridpbv2.StandardRemoteIDAPIInterfacesService.CreateSubscription:input_type -> ridpbv2.CreateSubscriptionRequest
	6,  // 61: ridpbv2.StandardRemoteIDAPIInterfacesService.DeleteIdentificationServiceArea:input_type -> ridpbv2.DeleteIdentificationServiceAreaRequest
	8,  // 62: ridpbv2.StandardRemoteIDAPIInterfacesService.DeleteSubscription:input_type -> ridpbv2.DeleteSubscriptionRequest
	14, // 63: ridpbv2.StandardRemoteIDAPIInterfacesService.GetIdentificationServiceArea:input_type -> ridpbv2.GetIdentificationServiceAreaRequest
	16, // 64: ridpbv2.StandardRemoteIDAPIInterfacesService.GetSubscription:input_type -> ridpbv2.GetSubscriptionRequest
	34, // 65: ridpbv2.StandardRemoteIDAPIInterfacesService.SearchIdentificationServiceAreas:input_type -> ridpbv2.SearchIdentificationServiceAreasRequest
	36, // 66: ridpbv2.StandardRemoteIDAPIInterfacesService.SearchSubscriptions:input_type -> ridpbv2.SearchSubscriptionsRequest
	45, // 67: ridpbv2.StandardRemoteIDAPIInterfacesService.UpdateIdentificationServiceArea:input_type -> ridpbv2.UpdateIdentificationServiceAreaRequest
	47, // 68: ridpbv2.StandardRemoteIDAPIInterfacesService.UpdateSubscription:input_type -> ridpbv2.UpdateSubscriptionRequest
	24, // 69: ridpbv2.StandardRemoteIDAPIInterfacesService.CreateIdentificationServiceArea:output_type -> ridpbv2.PutIdentificationServiceAreaResponse
	25, // 70: ridpbv2.StandardRemoteIDAPIInterfacesService.CreateSubscription:output_type -> ridpbv2.PutSubscriptionResponse
	7,  // 71: ridpbv2.StandardRemoteIDAPIInterfacesService.DeleteIdentificationServiceArea:output_type -> ridpbv2.DeleteIdentificationServiceAreaResponse
	9,  // 72: ridpbv2.StandardRemoteIDAPIInterfacesService.DeleteSubscription:output_type -> ridpbv2.DeleteSubscriptionResponse
	15, // 73: ridpbv2.StandardRemoteIDAPIInterfacesService.GetIdentificationServiceArea:output_type -> ridpbv2.GetIdentificationServiceAreaResponse
	17, // 74: ridpbv2.StandardRemoteIDAPIInterfacesService.GetSubscription:output_type -> ridpbv2.GetSubscriptionResponse
	35, // 75: ridpbv2.StandardRemoteIDAPIInterfacesService.SearchIdentificationServiceAreas:output_type -> ridpbv2.SearchIdentificationServiceAreasResponse
	37, // 76: ridpbv2.StandardRemoteIDAPIInterfacesService.SearchSubscriptions:output_type -> ridpbv2.SearchSubscriptionsResponse
	24, // 77: ridpbv2.StandardRemoteIDAPIInterfacesService.UpdateIdentificationServiceArea:output_type -> ridpbv2.PutIdentificationServiceAreaResponse
	25, // 78: ridpbv2.StandardRemoteIDAPIInterfacesService.UpdateSubscription:output_type -> ridpbv2.PutSubscriptionResponse
	69, // [69:79] is the sub-list for method output_type
	59, // [59:69] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_pkg_api_v2_ridpbv2_rid_proto_init() }
func file_pkg_api_v2_ridpbv2_rid_proto_init() {
	if File_pkg_api_v2_ridpbv2_rid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Altitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdentificationServiceAreaParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdentificationServiceAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlightDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentificationServiceAreaDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentificationServiceAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentificationServiceArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLngPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatingArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutIdentificationServiceAreaNotificationParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutIdentificationServiceAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDAircraftPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDAircraftState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDAuthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDFlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDFlightDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDRecentAircraftPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIdentificationServiceAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIdentificationServiceAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberToNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UAClassificationEU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UASID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentificationServiceAreaParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume3D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v2_ridpbv2_rid_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume4D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v2_ridpbv2_rid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_v2_ridpbv2_rid_proto_goTypes,
		DependencyIndexes: file_pkg_api_v2_ridpbv2_rid_proto_depIdxs,
		MessageInfos:      file_pkg_api_v2_ridpbv2_rid_proto_msgTypes,
	}.Build()
	File_pkg_api_v2_ridpbv2_rid_proto = out.File
	file_pkg_api_v2_ridpbv2_rid_proto_rawDesc = nil
	file_pkg_api_v2_ridpbv2_rid_proto_goTypes = nil
	file_pkg_api_v2_ridpbv2_rid_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StandardRemoteIDAPIInterfacesServiceClient is the client API for StandardRemoteIDAPIInterfacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StandardRemoteIDAPIInterfacesServiceClient interface {
	// /dss/identification_service_areas/{id}
	//
	// Create a new Identification Service Area.  This call will fail if an Identification Service Area with the same ID already exists.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.
	CreateIdentificationServiceArea(ctx context.Context, in *CreateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Create a subscription.  This call will fail if a Subscription with the same ID already exists.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Delete an Identification Service Area.  USSs should not delete Identification Service Areas before the end of the last managed flight plus the retention period.
	DeleteIdentificationServiceArea(ctx context.Context, in *DeleteIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*DeleteIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Delete a subscription.
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}
	//
	// Retrieve full information of an Identification Service Area owned by the client.
	GetIdentificationServiceArea(ctx context.Context, in *GetIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*GetIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Verify the existence/valdity and state of a particular subscription.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// /dss/identification_service_areas
	//
	// Retrieve all Identification Service Areas in the DAR for a given area during the given time.  Note that some Identification Service Areas returned may lie entirely outside the requested area.
	SearchIdentificationServiceAreas(ctx context.Context, in *SearchIdentificationServiceAreasRequest, opts ...grpc.CallOption) (*SearchIdentificationServiceAreasResponse, error)
	// /dss/subscriptions
	//
	// Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	//
	// Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.
	SearchSubscriptions(ctx context.Context, in *SearchSubscriptionsRequest, opts ...grpc.CallOption) (*SearchSubscriptionsResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Update an Identification Service Area.  The full content of the existing Identification Service Area will be replaced with the provided information as only the most recent version is retained.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.  Updating `time_start` is not allowed if it is before the current time.
	UpdateIdentificationServiceArea(ctx context.Context, in *UpdateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Update a Subscription.  The full content of the existing Subscription will be replaced with the provided information as only the most recent version is retained.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
}

type standardRemoteIDAPIInterfacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStandardRemoteIDAPIInterfacesServiceClient(cc grpc.ClientConnInterface) StandardRemoteIDAPIInterfacesServiceClient {
	return &standardRemoteIDAPIInterfacesServiceClient{cc}
}

func (c *standardRemoteIDAPIInterfacesServiceClient) CreateIdentificationServiceArea(ctx context.Context, in *CreateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error) {
	out := new(PutIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/CreateIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) DeleteIdentificationServiceArea(ctx context.Context, in *DeleteIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*DeleteIdentificationServiceAreaResponse, error) {
	out := new(DeleteIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/DeleteIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) GetIdentificationServiceArea(ctx context.Context, in *GetIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*GetIdentificationServiceAreaResponse, error) {
	out := new(GetIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/GetIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) SearchIdentificationServiceAreas(ctx context.Context, in *SearchIdentificationServiceAreasRequest, opts ...grpc.CallOption) (*SearchIdentificationServiceAreasResponse, error) {
	out := new(SearchIdentificationServiceAreasResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/SearchIdentificationServiceAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) SearchSubscriptions(ctx context.Context, in *SearchSubscriptionsRequest, opts ...grpc.CallOption) (*SearchSubscriptionsResponse, error) {
	out := new(SearchSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/SearchSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) UpdateIdentificationServiceArea(ctx context.Context, in *UpdateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error) {
	out := new(PutIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/UpdateIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standardRemoteIDAPIInterfacesServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv2.StandardRemoteIDAPIInterfacesService/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StandardRemoteIDAPIInterfacesServiceServer is the server API for StandardRemoteIDAPIInterfacesService service.
type StandardRemoteIDAPIInterfacesServiceServer interface {
	// /dss/identification_service_areas/{id}
	//
	// Create a new Identification Service Area.  This call will fail if an Identification Service Area with the same ID already exists.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.
	CreateIdentificationServiceArea(context.Context, *CreateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Create a subscription.  This call will fail if a Subscription with the same ID already exists.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*PutSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Delete an Identification Service Area.  USSs should not delete Identification Service Areas before the end of the last managed flight plus the retention period.
	DeleteIdentificationServiceArea(context.Context, *DeleteIdentificationServiceAreaRequest) (*DeleteIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Delete a subscription.
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}
	//
	// Retrieve full information of an Identification Service Area owned by the client.
	GetIdentificationServiceArea(context.Context, *GetIdentificationServiceAreaRequest) (*GetIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Verify the existence/valdity and state of a particular subscription.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// /dss/identification_service_areas
	//
	// Retrieve all Identification Service Areas in the DAR for a given area during the given time.  Note that some Identification Service Areas returned may lie entirely outside the requested area.
	SearchIdentificationServiceAreas(context.Context, *SearchIdentificationServiceAreasRequest) (*SearchIdentificationServiceAreasResponse, error)
	// /dss/subscriptions
	//
	// Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	//
	// Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.
	SearchSubscriptions(context.Context, *SearchSubscriptionsRequest) (*SearchSubscriptionsResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Update an Identification Service Area.  The full content of the existing Identification Service Area will be replaced with the provided information as only the most recent version is retained.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.  Updating `time_start` is not allowed if it is before the current time.
	UpdateIdentificationServiceArea(context.Context, *UpdateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Update a Subscription.  The full content of the existing Subscription will be replaced with the provided information as only the most recent version is retained.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*PutSubscriptionResponse, error)
}

// UnimplementedStandardRemoteIDAPIInterfacesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStandardRemoteIDAPIInterfacesServiceServer struct {
}

func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) CreateIdentificationServiceArea(context.Context, *CreateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentificationServiceArea not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) DeleteIdentificationServiceArea(context.Context, *DeleteIdentificationServiceAreaRequest) (*DeleteIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentificationServiceArea not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) GetIdentificationServiceArea(context.Context, *GetIdentificationServiceAreaRequest) (*GetIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentificationServiceArea not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) SearchIdentificationServiceAreas(context.Context, *SearchIdentificationServiceAreasRequest) (*SearchIdentificationServiceAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIdentificationServiceAreas not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) SearchSubscriptions(context.Context, *SearchSubscriptionsRequest) (*SearchSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubscriptions not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) UpdateIdentificationServiceArea(context.Context, *UpdateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentificationServiceArea not implemented")
}
func (*UnimplementedStandardRemoteIDAPIInterfacesServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}

func RegisterStandardRemoteIDAPIInterfacesServiceServer(s *grpc.Server, srv StandardRemoteIDAPIInterfacesServiceServer) {
	s.RegisterService(&_StandardRemoteIDAPIInterfacesService_serviceDesc, srv)
}

func _StandardRemoteIDAPIInterfacesService_CreateIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).CreateIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/CreateIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).CreateIdentificationServiceArea(ctx, req.(*CreateIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_DeleteIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).DeleteIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/DeleteIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).DeleteIdentificationServiceArea(ctx, req.(*DeleteIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_GetIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).GetIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/GetIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).GetIdentificationServiceArea(ctx, req.(*GetIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_SearchIdentificationServiceAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIdentificationServiceAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).SearchIdentificationServiceAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/SearchIdentificationServiceAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).SearchIdentificationServiceAreas(ctx, req.(*SearchIdentificationServiceAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_SearchSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).SearchSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/SearchSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).SearchSubscriptions(ctx, req.(*SearchSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_UpdateIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).UpdateIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/UpdateIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).UpdateIdentificationServiceArea(ctx, req.(*UpdateIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandardRemoteIDAPIInterfacesService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv2.StandardRemoteIDAPIInterfacesService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandardRemoteIDAPIInterfacesServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StandardRemoteIDAPIInterfacesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ridpbv2.StandardRemoteIDAPIInterfacesService",
	HandlerType: (*StandardRemoteIDAPIInterfacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentificationServiceArea",
			Handler:    _StandardRemoteIDAPIInterfacesService_CreateIdentificationServiceArea_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _StandardRemoteIDAPIInterfacesService_CreateSubscription_Handler,
		},
		{
			MethodName: "DeleteIdentificationServiceArea",
			Handler:    _StandardRemoteIDAPIInterfacesService_DeleteIdentificationServiceArea_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _StandardRemoteIDAPIInterfacesService_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetIdentificationServiceArea",
			Handler:    _StandardRemoteIDAPIInterfacesService_GetIdentificationServiceArea_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _StandardRemoteIDAPIInterfacesService_GetSubscription_Handler,
		},
		{
			MethodName: "SearchIdentificationServiceAreas",
			Handler:    _StandardRemoteIDAPIInterfacesService_SearchIdentificationServiceAreas_Handler,
		},
		{
			MethodName: "SearchSubscriptions",
			Handler:    _StandardRemoteIDAPIInterfacesService_SearchSubscriptions_Handler,
		},
		{
			MethodName: "UpdateIdentificationServiceArea",
			Handler:    _StandardRemoteIDAPIInterfacesService_UpdateIdentificationServiceArea_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _StandardRemoteIDAPIInterfacesService_UpdateSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v2/ridpbv2/rid.proto",
}
