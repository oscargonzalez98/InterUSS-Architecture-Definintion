// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: pkg/api/v1/scdpb/scd.proto

package scdpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Data provided when an airspace conflict was encountered.
type AirspaceConflictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable message indicating what error occurred and/or why.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// List of constraint references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these constraints to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
	MissingConstraints []*ConstraintReference `protobuf:"bytes,2,rep,name=missing_constraints,json=missingConstraints,proto3" json:"missing_constraints,omitempty"`
	// List of operational intent references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these operational intents to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
	MissingOperationalIntents []*OperationalIntentReference `protobuf:"bytes,3,rep,name=missing_operational_intents,json=missingOperationalIntents,proto3" json:"missing_operational_intents,omitempty"`
}

func (x *AirspaceConflictResponse) Reset() {
	*x = AirspaceConflictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirspaceConflictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirspaceConflictResponse) ProtoMessage() {}

func (x *AirspaceConflictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirspaceConflictResponse.ProtoReflect.Descriptor instead.
func (*AirspaceConflictResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{0}
}

func (x *AirspaceConflictResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AirspaceConflictResponse) GetMissingConstraints() []*ConstraintReference {
	if x != nil {
		return x.MissingConstraints
	}
	return nil
}

func (x *AirspaceConflictResponse) GetMissingOperationalIntents() []*OperationalIntentReference {
	if x != nil {
		return x.MissingOperationalIntents
	}
	return nil
}

type Altitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A code indicating the reference for a vertical distance. See AIXM 5.1 and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate plans to allow other options. FIXM and AIXM allow for 'SFC' which is equivalent to AGL.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// The reference quantities used to express the value of altitude. See FIXM 4.2. Currently, UTM only allows meters with no immediate plans to allow other options.
	Units string `protobuf:"bytes,2,opt,name=units,proto3" json:"units,omitempty"`
	// The numeric value of the altitude. Note that min and max values are added as a sanity check. As use cases evolve and more options are made available in terms of units of measure or reference systems, these bounds may be re-evaluated.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Altitude) Reset() {
	*x = Altitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Altitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Altitude) ProtoMessage() {}

func (x *Altitude) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Altitude.ProtoReflect.Descriptor instead.
func (*Altitude) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{1}
}

func (x *Altitude) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Altitude) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Altitude) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A relevant authority that is in charge for authorising, being notified or providing information for UAS operations in the UAS zone.
// Rule: >-
//    at least one of the following shall be specified - siteURL, email,
// phone.
type Authority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name or role of a specific person that needs to be contacted within the organisation
	ContactName string `protobuf:"bytes,1,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	// The e-mail address by which the organisation may be contacted.
	// Note: in the data coding format, this might be further constrained in order to ensure a valid e-mail format.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// The minimal time interval required between notification or authorization request and starting to operate in the zone, in the format PnnDTnnHnnM (ISO 8601).
	IntervalBefore string `protobuf:"bytes,3,opt,name=interval_before,json=intervalBefore,proto3" json:"interval_before,omitempty"`
	// The official name of a public or private authority
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// A phone number at which the organisation may be contacted
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// The role of the Authority in relation with the zone.
	Purpose string `protobuf:"bytes,6,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// The name of a specific department or service within the organisation
	Service string `protobuf:"bytes,7,opt,name=service,proto3" json:"service,omitempty"`
	// The URL of the public internet site through which the organisation may be contacted
	// Note: in the data coding format, this might be further constrained in order to ensure a valid URL format.
	SiteUrl string `protobuf:"bytes,8,opt,name=site_url,json=siteUrl,proto3" json:"site_url,omitempty"`
}

func (x *Authority) Reset() {
	*x = Authority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority) ProtoMessage() {}

func (x *Authority) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority.ProtoReflect.Descriptor instead.
func (*Authority) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{2}
}

func (x *Authority) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Authority) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Authority) GetIntervalBefore() string {
	if x != nil {
		return x.IntervalBefore
	}
	return ""
}

func (x *Authority) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Authority) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Authority) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *Authority) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Authority) GetSiteUrl() string {
	if x != nil {
		return x.SiteUrl
	}
	return ""
}

// Response to a request to create, update, or delete a ConstraintReference. in the DSS.
type ChangeConstraintReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *ConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/constraints` path API.  The client's own subscriptions will also be included in this list.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ChangeConstraintReferenceResponse) Reset() {
	*x = ChangeConstraintReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConstraintReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConstraintReferenceResponse) ProtoMessage() {}

func (x *ChangeConstraintReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConstraintReferenceResponse.ProtoReflect.Descriptor instead.
func (*ChangeConstraintReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeConstraintReferenceResponse) GetConstraintReference() *ConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

func (x *ChangeConstraintReferenceResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// Response to a request to create, update, or delete an OperationalIntentReference in the DSS.
type ChangeOperationalIntentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationalIntentReference *OperationalIntentReference `protobuf:"bytes,1,opt,name=operational_intent_reference,json=operationalIntentReference,proto3" json:"operational_intent_reference,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the operational intent changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/operational_intents` path API.  The client's own subscriptions will also be included in this list.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ChangeOperationalIntentReferenceResponse) Reset() {
	*x = ChangeOperationalIntentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeOperationalIntentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOperationalIntentReferenceResponse) ProtoMessage() {}

func (x *ChangeOperationalIntentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOperationalIntentReferenceResponse.ProtoReflect.Descriptor instead.
func (*ChangeOperationalIntentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{4}
}

func (x *ChangeOperationalIntentReferenceResponse) GetOperationalIntentReference() *OperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReference
	}
	return nil
}

func (x *ChangeOperationalIntentReferenceResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// A circular area on the surface of the earth.
type Circle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Center *LatLngPoint `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	Radius *Radius      `protobuf:"bytes,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *Circle) Reset() {
	*x = Circle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{5}
}

func (x *Circle) GetCenter() *LatLngPoint {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *Circle) GetRadius() *Radius {
	if x != nil {
		return x.Radius
	}
	return nil
}

// Full specification of a UTM constraint.
type Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details   *ConstraintDetails   `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Reference *ConstraintReference `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{6}
}

func (x *Constraint) GetDetails() *ConstraintDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Constraint) GetReference() *ConstraintReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Details of a UTM constraint. Note that this data is not stored in the DSS; only with the clients.
type ConstraintDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this constraint is an ED-269 compliant geo zone, the details about that geo zone.
	Geozone *GeoZone `protobuf:"bytes,1,opt,name=geozone,proto3" json:"geozone,omitempty"`
	// Type of airspace feature this constraint represents.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Volumes that wholly contain the constraint while being as small as practical.
	// The end time may not be in the past.
	Volumes []*Volume4D `protobuf:"bytes,3,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *ConstraintDetails) Reset() {
	*x = ConstraintDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintDetails) ProtoMessage() {}

func (x *ConstraintDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintDetails.ProtoReflect.Descriptor instead.
func (*ConstraintDetails) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{7}
}

func (x *ConstraintDetails) GetGeozone() *GeoZone {
	if x != nil {
		return x.Geozone
	}
	return nil
}

func (x *ConstraintDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConstraintDetails) GetVolumes() []*Volume4D {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// Association between a constraint and the constraint provider responsible for that constraint
type ConstraintProviderAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of constraint to which this association pertains
	ConstraintId string `protobuf:"bytes,1,opt,name=constraint_id,json=constraintId,proto3" json:"constraint_id,omitempty"`
	// Unique identifier of the constraint provider responsible for the constraint
	ConstraintProviderId string `protobuf:"bytes,2,opt,name=constraint_provider_id,json=constraintProviderId,proto3" json:"constraint_provider_id,omitempty"`
}

func (x *ConstraintProviderAssociation) Reset() {
	*x = ConstraintProviderAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintProviderAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintProviderAssociation) ProtoMessage() {}

func (x *ConstraintProviderAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintProviderAssociation.ProtoReflect.Descriptor instead.
func (*ConstraintProviderAssociation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{8}
}

func (x *ConstraintProviderAssociation) GetConstraintId() string {
	if x != nil {
		return x.ConstraintId
	}
	return ""
}

func (x *ConstraintProviderAssociation) GetConstraintProviderId() string {
	if x != nil {
		return x.ConstraintProviderId
	}
	return ""
}

// A ConstraintReference (area in which a constraint is present, along with other high-level information, but no details).  The DSS reports only these references and clients must exchange details and additional information peer-to-peer.
type ConstraintReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Created by the DSS based on creating client's ID (via access token).  Used internal to the DSS for restricting mutation and deletion operations to manager.  Used by USSs to reject constraint update notifications originating from a USS that does not manage the constraint.
	Manager string `protobuf:"bytes,2,opt,name=manager,proto3" json:"manager,omitempty"`
	// Opaque version number of this constraint.  Populated only when the ConstraintReference is managed by the USS retrieving or providing it.  Not populated when the ConstraintReference is not managed by the USS retrieving or providing it (instead, the USS must obtain the OVN from the details retrieved from the managing USS).
	Ovn             string `protobuf:"bytes,3,opt,name=ovn,proto3" json:"ovn,omitempty"`
	TimeEnd         *Time  `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	TimeStart       *Time  `protobuf:"bytes,5,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssAvailability string `protobuf:"bytes,6,opt,name=uss_availability,json=ussAvailability,proto3" json:"uss_availability,omitempty"`
	UssBaseUrl      string `protobuf:"bytes,7,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Numeric version of this constraint which increments upon each change in the constraint, regardless of whether any field of the constraint reference changes.  A USS with the details of this constraint when it was at a particular version does not need to retrieve the details again until the version changes.
	Version int32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConstraintReference) Reset() {
	*x = ConstraintReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintReference) ProtoMessage() {}

func (x *ConstraintReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintReference.ProtoReflect.Descriptor instead.
func (*ConstraintReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{9}
}

func (x *ConstraintReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConstraintReference) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *ConstraintReference) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *ConstraintReference) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *ConstraintReference) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *ConstraintReference) GetUssAvailability() string {
	if x != nil {
		return x.UssAvailability
	}
	return ""
}

func (x *ConstraintReference) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *ConstraintReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CreateConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Request body.
	Params *PutConstraintReferenceParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateConstraintReferenceRequest) Reset() {
	*x = CreateConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConstraintReferenceRequest) ProtoMessage() {}

func (x *CreateConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{10}
}

func (x *CreateConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *CreateConstraintReferenceRequest) GetParams() *PutConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type CreateOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Request body.
	Params *PutOperationalIntentReferenceParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateOperationalIntentReferenceRequest) Reset() {
	*x = CreateOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *CreateOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{11}
}

func (x *CreateOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *CreateOperationalIntentReferenceRequest) GetParams() *PutOperationalIntentReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type CreateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *PutSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,2,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *CreateSubscriptionRequest) Reset() {
	*x = CreateSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionRequest) ProtoMessage() {}

func (x *CreateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{12}
}

func (x *CreateSubscriptionRequest) GetParams() *PutSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CreateSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

type DeleteConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
}

func (x *DeleteConstraintReferenceRequest) Reset() {
	*x = DeleteConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstraintReferenceRequest) ProtoMessage() {}

func (x *DeleteConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *DeleteConstraintReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

type DeleteOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
}

func (x *DeleteOperationalIntentReferenceRequest) Reset() {
	*x = DeleteOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *DeleteOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *DeleteOperationalIntentReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,1,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
	// Version of the subscription to be modified.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

func (x *DeleteSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Response for a successful request to delete a subscription.
type DeleteSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *DeleteSubscriptionResponse) Reset() {
	*x = DeleteSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionResponse) ProtoMessage() {}

func (x *DeleteSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// A report informing a server of a communication problem.
type ErrorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request (by this USS) and response associated with the error.
	Exchange *ExchangeRecord `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// ID assigned by the server receiving the report.  Not populated when submitting a report.
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *ErrorReport) Reset() {
	*x = ErrorReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorReport) ProtoMessage() {}

func (x *ErrorReport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorReport.ProtoReflect.Descriptor instead.
func (*ErrorReport) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{17}
}

func (x *ErrorReport) GetExchange() *ExchangeRecord {
	if x != nil {
		return x.Exchange
	}
	return nil
}

func (x *ErrorReport) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

// Human-readable string returned when an error occurs as a result of a USS - DSS transaction.
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable message indicating what error occurred and/or why.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{18}
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Details of a request/response data exchange.
type ExchangeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of headers associated with request or response. Requires 'Authorization:' field (at a minimum)
	Headers []string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	// HTTP verb used by requestor (e.g., "PUT," "GET," etc.)
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// 'Human-readable description of the problem with the exchange, if any.'
	Problem string `protobuf:"bytes,3,opt,name=problem,proto3" json:"problem,omitempty"`
	// A coded value that indicates the role of the logging USS: 'Client' (initiating a request to a remote USS) or 'Server' (handling a request from a remote USS)
	RecorderRole string `protobuf:"bytes,4,opt,name=recorder_role,json=recorderRole,proto3" json:"recorder_role,omitempty"`
	// Base64-encoded body content sent/received as a request.
	RequestBody string `protobuf:"bytes,5,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	// The time at which the request was sent/received.
	RequestTime *Time `protobuf:"bytes,6,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	// Base64-encoded body content sent/received in response to request.
	ResponseBody string `protobuf:"bytes,7,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	// HTTP response code sent/received in response to request.
	ResponseCode int32 `protobuf:"varint,8,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// The time at which the response was sent/received.
	ResponseTime *Time `protobuf:"bytes,9,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	// Full URL of request.
	Url string `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExchangeRecord) Reset() {
	*x = ExchangeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRecord) ProtoMessage() {}

func (x *ExchangeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRecord.ProtoReflect.Descriptor instead.
func (*ExchangeRecord) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{19}
}

func (x *ExchangeRecord) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ExchangeRecord) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ExchangeRecord) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *ExchangeRecord) GetRecorderRole() string {
	if x != nil {
		return x.RecorderRole
	}
	return ""
}

func (x *ExchangeRecord) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *ExchangeRecord) GetRequestTime() *Time {
	if x != nil {
		return x.RequestTime
	}
	return nil
}

func (x *ExchangeRecord) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *ExchangeRecord) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *ExchangeRecord) GetResponseTime() *Time {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *ExchangeRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// An airspace of defined dimensions, above the land areas or territorial waters of a State, within which a particular restriction or condition for UAS flights applies.
type GeoZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates that exemptions from the national or European regulations are allowed in the UAS Zone, that will be detailed via the "message" property.
	AdditionalProperties *GeoZone_AdditionalPropertiesMessage `protobuf:"bytes,1,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
	// The State that has the authority to declare the zone.
	// Note - There will be no Zone belonging to two States. Not necessary to code the information that two zones are "in neighboring States" or "related".
	Country []string `protobuf:"bytes,2,rep,name=country,proto3" json:"country,omitempty"`
	// A string of characters that uniquely identifies the UAS Zone within the State/Territory identified by the country attribute.
	// Note - The UAS Zone is uniquely identified worldwide by the combination of the country and the identifier attributes
	Identifier []string `protobuf:"bytes,3,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// A message to be displayed to the user of the zone, typically on the RPS for the Remote Pilot, to make him/her aware about specific information associated with the zone (typically when it is not only a restriction to fly in the zone, thus not only an alert or an automatic limitation, for example : “image capture prohibited in this zone”, “frequent strong winds in this zone”, “no landing or take-off in this zone”). This message is also used to indicate exemptions from regulation in a zone (see below). Several information can be grouped in a message, separated by a “/”.
	Message []string `protobuf:"bytes,4,rep,name=message,proto3" json:"message,omitempty"`
	// A free text name by which the zone may be known by the public or by the UAS community.
	Name []string `protobuf:"bytes,5,rep,name=name,proto3" json:"name,omitempty"`
	// A free text description of the reason that led to the establishment of the zone, when not covered by a pre-defined coded value.
	OtherReasonInfo string `protobuf:"bytes,6,opt,name=other_reason_info,json=otherReasonInfo,proto3" json:"other_reason_info,omitempty"`
	// A coded indication for the reason that led to the establishment of the zone.
	Reason []string `protobuf:"bytes,7,rep,name=reason,proto3" json:"reason,omitempty"`
	// Where applicable, identifies a region inside a State where the UAS Zone is located.
	// Note 1) identified with a digit between 0-65535 (16 bit), corresponding to a list of regions pre-defined for each State.
	// Note 2) this attribute is intended to facilitate extracting sub-sets of data, for specific regions
	Region int32 `protobuf:"varint,8,opt,name=region,proto3" json:"region,omitempty"`
	// This is an extension point. It allows adding additional attributes of national interest through this element.
	RegulationExemption []string `protobuf:"bytes,9,rep,name=regulation_exemption,json=regulationExemption,proto3" json:"regulation_exemption,omitempty"`
	// An indication if flying in the zone is conditional, forbidden or unrestricted.
	Restriction []string `protobuf:"bytes,10,rep,name=restriction,proto3" json:"restriction,omitempty"`
	// An indication of the conditions under which the zone can be used
	RestrictionConditions []string `protobuf:"bytes,11,rep,name=restriction_conditions,json=restrictionConditions,proto3" json:"restriction_conditions,omitempty"`
	// An indication whether the Zone is provided with its common definition or with a customised definition, for a particular user.
	Type []string `protobuf:"bytes,12,rep,name=type,proto3" json:"type,omitempty"`
	// A code that identifies the category or class of the zone applying a "USpace concept".
	// Note: Two (draft) classifications exist, one from Eurocontrol and one from CORUS. Therefore, two instances of this attribute are expected, one from each sub-list. This might be later replaced with separate attributes and separate lists of values.
	USpaceClass   []string     `protobuf:"bytes,13,rep,name=u_space_class,json=uSpaceClass,proto3" json:"u_space_class,omitempty"`
	ZoneAuthority []*Authority `protobuf:"bytes,14,rep,name=zone_authority,json=zoneAuthority,proto3" json:"zone_authority,omitempty"`
}

func (x *GeoZone) Reset() {
	*x = GeoZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoZone) ProtoMessage() {}

func (x *GeoZone) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoZone.ProtoReflect.Descriptor instead.
func (*GeoZone) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{20}
}

func (x *GeoZone) GetAdditionalProperties() *GeoZone_AdditionalPropertiesMessage {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *GeoZone) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *GeoZone) GetIdentifier() []string {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GeoZone) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GeoZone) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GeoZone) GetOtherReasonInfo() string {
	if x != nil {
		return x.OtherReasonInfo
	}
	return ""
}

func (x *GeoZone) GetReason() []string {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *GeoZone) GetRegion() int32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *GeoZone) GetRegulationExemption() []string {
	if x != nil {
		return x.RegulationExemption
	}
	return nil
}

func (x *GeoZone) GetRestriction() []string {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *GeoZone) GetRestrictionConditions() []string {
	if x != nil {
		return x.RestrictionConditions
	}
	return nil
}

func (x *GeoZone) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GeoZone) GetUSpaceClass() []string {
	if x != nil {
		return x.USpaceClass
	}
	return nil
}

func (x *GeoZone) GetZoneAuthority() []*Authority {
	if x != nil {
		return x.ZoneAuthority
	}
	return nil
}

// Response to peer request for the details of operational intent with the given ID.
type GetConstraintDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraint *Constraint `protobuf:"bytes,1,opt,name=constraint,proto3" json:"constraint,omitempty"`
}

func (x *GetConstraintDetailsResponse) Reset() {
	*x = GetConstraintDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstraintDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstraintDetailsResponse) ProtoMessage() {}

func (x *GetConstraintDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstraintDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetConstraintDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{21}
}

func (x *GetConstraintDetailsResponse) GetConstraint() *Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type GetConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
}

func (x *GetConstraintReferenceRequest) Reset() {
	*x = GetConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstraintReferenceRequest) ProtoMessage() {}

func (x *GetConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{22}
}

func (x *GetConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

// Response to DSS request for the ConstraintReference with the given ID.
type GetConstraintReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *ConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
}

func (x *GetConstraintReferenceResponse) Reset() {
	*x = GetConstraintReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstraintReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstraintReferenceResponse) ProtoMessage() {}

func (x *GetConstraintReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstraintReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetConstraintReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{23}
}

func (x *GetConstraintReferenceResponse) GetConstraintReference() *ConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

// Response to peer request for the details of operational intent with the given ID.
type GetOperationalIntentDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationalIntent *OperationalIntent `protobuf:"bytes,1,opt,name=operational_intent,json=operationalIntent,proto3" json:"operational_intent,omitempty"`
}

func (x *GetOperationalIntentDetailsResponse) Reset() {
	*x = GetOperationalIntentDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationalIntentDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationalIntentDetailsResponse) ProtoMessage() {}

func (x *GetOperationalIntentDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationalIntentDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetOperationalIntentDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{24}
}

func (x *GetOperationalIntentDetailsResponse) GetOperationalIntent() *OperationalIntent {
	if x != nil {
		return x.OperationalIntent
	}
	return nil
}

type GetOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
}

func (x *GetOperationalIntentReferenceRequest) Reset() {
	*x = GetOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *GetOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{25}
}

func (x *GetOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

// Response to DSS request for the OperationalIntentReference with the given ID.
type GetOperationalIntentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationalIntentReference *OperationalIntentReference `protobuf:"bytes,1,opt,name=operational_intent_reference,json=operationalIntentReference,proto3" json:"operational_intent_reference,omitempty"`
}

func (x *GetOperationalIntentReferenceResponse) Reset() {
	*x = GetOperationalIntentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationalIntentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationalIntentReferenceResponse) ProtoMessage() {}

func (x *GetOperationalIntentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationalIntentReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetOperationalIntentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{26}
}

func (x *GetOperationalIntentReferenceResponse) GetOperationalIntentReference() *OperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReference
	}
	return nil
}

// Response to a peer request for telemetry of an off-nominal operational intent.
type GetOperationalIntentTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The next telemetry similar to this telemetry is not expected to be available until at or after this time, so the polling USS should generally not poll the endpoint providing this response data again until at or after that time.  If this field is omitted, then there is no current expectation of new telemetry becoming available.
	NextTelemetryOpportunity *Time `protobuf:"bytes,1,opt,name=next_telemetry_opportunity,json=nextTelemetryOpportunity,proto3" json:"next_telemetry_opportunity,omitempty"`
	// ID of the operational intent which the vehicle reporting telemetry is flying.
	OperationalIntentId string            `protobuf:"bytes,2,opt,name=operational_intent_id,json=operationalIntentId,proto3" json:"operational_intent_id,omitempty"`
	Telemetry           *VehicleTelemetry `protobuf:"bytes,3,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
}

func (x *GetOperationalIntentTelemetryResponse) Reset() {
	*x = GetOperationalIntentTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationalIntentTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationalIntentTelemetryResponse) ProtoMessage() {}

func (x *GetOperationalIntentTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationalIntentTelemetryResponse.ProtoReflect.Descriptor instead.
func (*GetOperationalIntentTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{27}
}

func (x *GetOperationalIntentTelemetryResponse) GetNextTelemetryOpportunity() *Time {
	if x != nil {
		return x.NextTelemetryOpportunity
	}
	return nil
}

func (x *GetOperationalIntentTelemetryResponse) GetOperationalIntentId() string {
	if x != nil {
		return x.OperationalIntentId
	}
	return ""
}

func (x *GetOperationalIntentTelemetryResponse) GetTelemetry() *VehicleTelemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,1,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{28}
}

func (x *GetSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

// Response to DSS request for the subscription with the given id.
type GetSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{29}
}

func (x *GetSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type GetUssAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
	UssId string `protobuf:"bytes,1,opt,name=uss_id,json=ussId,proto3" json:"uss_id,omitempty"`
}

func (x *GetUssAvailabilityRequest) Reset() {
	*x = GetUssAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUssAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUssAvailabilityRequest) ProtoMessage() {}

func (x *GetUssAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUssAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*GetUssAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{30}
}

func (x *GetUssAvailabilityRequest) GetUssId() string {
	if x != nil {
		return x.UssId
	}
	return ""
}

// Information necessary to create a subscription to serve a single operational intent's notification needs.
type ImplicitSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this operational intent's subscription should trigger notifications when constraints change. Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true, and a USS performing the constraint processing role should set this flag true.
	NotifyForConstraints bool `protobuf:"varint,1,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	// The base URL of a USS implementation of the parts of the USS-USS API necessary for receiving the notifications that the operational intent must be aware of.  This includes, at least, notifications for relevant changes in operational intents.
	UssBaseUrl string `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *ImplicitSubscriptionParameters) Reset() {
	*x = ImplicitSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplicitSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplicitSubscriptionParameters) ProtoMessage() {}

func (x *ImplicitSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplicitSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*ImplicitSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{31}
}

func (x *ImplicitSubscriptionParameters) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *ImplicitSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

// Point on the earth's surface.
type LatLngPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *LatLngPoint) Reset() {
	*x = LatLngPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLngPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLngPoint) ProtoMessage() {}

func (x *LatLngPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLngPoint.ProtoReflect.Descriptor instead.
func (*LatLngPoint) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{32}
}

func (x *LatLngPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *LatLngPoint) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type MakeDssReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *ErrorReport `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *MakeDssReportRequest) Reset() {
	*x = MakeDssReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeDssReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeDssReportRequest) ProtoMessage() {}

func (x *MakeDssReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeDssReportRequest.ProtoReflect.Descriptor instead.
func (*MakeDssReportRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{33}
}

func (x *MakeDssReportRequest) GetParams() *ErrorReport {
	if x != nil {
		return x.Params
	}
	return nil
}

// Full description of a UTM operational intent.
type OperationalIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details   *OperationalIntentDetails   `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Reference *OperationalIntentReference `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *OperationalIntent) Reset() {
	*x = OperationalIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalIntent) ProtoMessage() {}

func (x *OperationalIntent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalIntent.ProtoReflect.Descriptor instead.
func (*OperationalIntent) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{34}
}

func (x *OperationalIntent) GetDetails() *OperationalIntentDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OperationalIntent) GetReference() *OperationalIntentReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Details of a UTM operational intent. Note that this data is not stored in the DSS; only with the clients.
type OperationalIntentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volumes that contain the anticipated area of non-conformance while the aircraft is in the Nonconforming or Contingent states.
	// Start and end times, as well as lower and upper altitudes, are required for each volume. The end time may not be in the past.
	// Required with at least one item when the operational intent is Nonconforming or Contingent.
	// May not contain any items when the operational intent is Accepted or Activated.
	OffNominalVolumes []*Volume4D `protobuf:"bytes,1,rep,name=off_nominal_volumes,json=offNominalVolumes,proto3" json:"off_nominal_volumes,omitempty"`
	Priority          int32       `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Volumes that wholly contain the operational intent while being as small as practical.
	// Start and end times, as well as lower and upper altitudes, are required for each volume. The end time may not be in the past.
	// Required with at least one item when the operational intent is Accepted, Activated, or Nonconforming.
	// May not contain any items when the operational intent is Contingent.
	Volumes []*Volume4D `protobuf:"bytes,3,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *OperationalIntentDetails) Reset() {
	*x = OperationalIntentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalIntentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalIntentDetails) ProtoMessage() {}

func (x *OperationalIntentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalIntentDetails.ProtoReflect.Descriptor instead.
func (*OperationalIntentDetails) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{35}
}

func (x *OperationalIntentDetails) GetOffNominalVolumes() []*Volume4D {
	if x != nil {
		return x.OffNominalVolumes
	}
	return nil
}

func (x *OperationalIntentDetails) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *OperationalIntentDetails) GetVolumes() []*Volume4D {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// A record of position data gathered through the course of an operational intent
type OperationalIntentPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the operational intent associated with `positions`
	OperationalIntentId string            `protobuf:"bytes,1,opt,name=operational_intent_id,json=operationalIntentId,proto3" json:"operational_intent_id,omitempty"`
	Positions           []*PositionRecord `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *OperationalIntentPositions) Reset() {
	*x = OperationalIntentPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalIntentPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalIntentPositions) ProtoMessage() {}

func (x *OperationalIntentPositions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalIntentPositions.ProtoReflect.Descriptor instead.
func (*OperationalIntentPositions) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{36}
}

func (x *OperationalIntentPositions) GetOperationalIntentId() string {
	if x != nil {
		return x.OperationalIntentId
	}
	return ""
}

func (x *OperationalIntentPositions) GetPositions() []*PositionRecord {
	if x != nil {
		return x.Positions
	}
	return nil
}

// The high-level information of a planned or active operational intent with the URL of a USS to query for details.  Note: 'ovn' is returned ONLY to the USS that created the operational intent but NEVER to other USS instances.
type OperationalIntentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Created by the DSS based on creating client's ID (via access token).  Used internal to the DSS for restricting mutation and deletion operations to manager.  Used by USSs to reject operational intent update notifications originating from a USS that does not manage the operational intent.
	Manager string `protobuf:"bytes,2,opt,name=manager,proto3" json:"manager,omitempty"`
	// Opaque version number of this operational intent.  Populated only when the OperationalIntentReference is managed by the USS retrieving or providing it.  Not populated when the OperationalIntentReference is not managed by the USS retrieving or providing it (instead, the USS must obtain the OVN from the details retrieved from the managing USS).
	Ovn   string `protobuf:"bytes,3,opt,name=ovn,proto3" json:"ovn,omitempty"`
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// The ID of the subscription that is ensuring the operational intent manager receives relevant airspace updates.
	SubscriptionId string `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// End time of operational intent.
	TimeEnd *Time `protobuf:"bytes,6,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of operational intent.
	TimeStart       *Time  `protobuf:"bytes,7,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssAvailability string `protobuf:"bytes,8,opt,name=uss_availability,json=ussAvailability,proto3" json:"uss_availability,omitempty"`
	UssBaseUrl      string `protobuf:"bytes,9,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Numeric version of this operational intent which increments upon each change in the operational intent, regardless of whether any field of the operational intent reference changes.  A USS with the details of this operational intent when it was at a particular version does not need to retrieve the details again until the version changes.
	Version int32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OperationalIntentReference) Reset() {
	*x = OperationalIntentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalIntentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalIntentReference) ProtoMessage() {}

func (x *OperationalIntentReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalIntentReference.ProtoReflect.Descriptor instead.
func (*OperationalIntentReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{37}
}

func (x *OperationalIntentReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationalIntentReference) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *OperationalIntentReference) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *OperationalIntentReference) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *OperationalIntentReference) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *OperationalIntentReference) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *OperationalIntentReference) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *OperationalIntentReference) GetUssAvailability() string {
	if x != nil {
		return x.UssAvailability
	}
	return ""
}

func (x *OperationalIntentReference) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *OperationalIntentReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Association between an operational intent and the operator of that operational intent
type OperatorAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of operational intent to which this association pertains
	OperationalIntentId string `protobuf:"bytes,1,opt,name=operational_intent_id,json=operationalIntentId,proto3" json:"operational_intent_id,omitempty"`
	// Unique identifier of the operator responsible for the operational intent
	OperatorId string `protobuf:"bytes,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *OperatorAssociation) Reset() {
	*x = OperatorAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorAssociation) ProtoMessage() {}

func (x *OperatorAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorAssociation.ProtoReflect.Descriptor instead.
func (*OperatorAssociation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{38}
}

func (x *OperatorAssociation) GetOperationalIntentId() string {
	if x != nil {
		return x.OperationalIntentId
	}
	return ""
}

func (x *OperatorAssociation) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

// A record of a single attempt to (successfully or unsuccessfully) create or modify an operational intent.
type PlanningRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of missing constraints (for planning attempts that were denied by the DSS with code 409)
	MissingConstraints []string `protobuf:"bytes,1,rep,name=missing_constraints,json=missingConstraints,proto3" json:"missing_constraints,omitempty"`
	// List of missing operational intents (for planning attempts that were denied by the DSS with code 409)
	MissingOperationalIntents []string `protobuf:"bytes,2,rep,name=missing_operational_intents,json=missingOperationalIntents,proto3" json:"missing_operational_intents,omitempty"`
	// ID of the operational intent being planned
	OperationalIntentId string `protobuf:"bytes,3,opt,name=operational_intent_id,json=operationalIntentId,proto3" json:"operational_intent_id,omitempty"`
	// OVNs the planning USS was aware of when it was planning the operational intent
	Ovns []string `protobuf:"bytes,4,rep,name=ovns,proto3" json:"ovns,omitempty"`
	// A free text description of the problem(s) encountered during this planning attempt.
	Problem string `protobuf:"bytes,5,opt,name=problem,proto3" json:"problem,omitempty"`
	// Time that this planning event occurred
	Time *Time `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *PlanningRecord) Reset() {
	*x = PlanningRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanningRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanningRecord) ProtoMessage() {}

func (x *PlanningRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanningRecord.ProtoReflect.Descriptor instead.
func (*PlanningRecord) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{39}
}

func (x *PlanningRecord) GetMissingConstraints() []string {
	if x != nil {
		return x.MissingConstraints
	}
	return nil
}

func (x *PlanningRecord) GetMissingOperationalIntents() []string {
	if x != nil {
		return x.MissingOperationalIntents
	}
	return nil
}

func (x *PlanningRecord) GetOperationalIntentId() string {
	if x != nil {
		return x.OperationalIntentId
	}
	return ""
}

func (x *PlanningRecord) GetOvns() []string {
	if x != nil {
		return x.Ovns
	}
	return nil
}

func (x *PlanningRecord) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *PlanningRecord) GetTime() *Time {
	if x != nil {
		return x.Time
	}
	return nil
}

// An enclosed area on the earth. The bounding edges of this polygon are defined to be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude. The winding order must be interpreted as the order which produces the smaller area. The path between two vertices is defined to be the shortest possible path between those vertices. Edges may not cross. Vertices may not be duplicated.  In particular, the final polygon vertex must not be identical to the first vertex.
type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertices []*LatLngPoint `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{40}
}

func (x *Polygon) GetVertices() []*LatLngPoint {
	if x != nil {
		return x.Vertices
	}
	return nil
}

// Location of the vehicle (UAS) as reported for UTM. Note: 'accuracy' values are required when extrapolated field is true.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccuracyH string    `protobuf:"bytes,1,opt,name=accuracy_h,json=accuracyH,proto3" json:"accuracy_h,omitempty"`
	AccuracyV string    `protobuf:"bytes,2,opt,name=accuracy_v,json=accuracyV,proto3" json:"accuracy_v,omitempty"`
	Altitude  *Altitude `protobuf:"bytes,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// True if this position was generated primarily by computation rather than primarily from a direct instrument measurement.
	Extrapolated bool    `protobuf:"varint,4,opt,name=extrapolated,proto3" json:"extrapolated,omitempty"`
	Latitude     float64 `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{41}
}

func (x *Position) GetAccuracyH() string {
	if x != nil {
		return x.AccuracyH
	}
	return ""
}

func (x *Position) GetAccuracyV() string {
	if x != nil {
		return x.AccuracyV
	}
	return ""
}

func (x *Position) GetAltitude() *Altitude {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *Position) GetExtrapolated() bool {
	if x != nil {
		return x.Extrapolated
	}
	return false
}

func (x *Position) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Position) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// A record of vehicle telemetry information received by this USS (typically for conformance monitoring).
type PositionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telemetry *VehicleTelemetry `protobuf:"bytes,1,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	// Time that this position data was received by the USS
	TimeReceived *Time `protobuf:"bytes,2,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
}

func (x *PositionRecord) Reset() {
	*x = PositionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRecord) ProtoMessage() {}

func (x *PositionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionRecord.ProtoReflect.Descriptor instead.
func (*PositionRecord) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{42}
}

func (x *PositionRecord) GetTelemetry() *VehicleTelemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

func (x *PositionRecord) GetTimeReceived() *Time {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

// Parameters of a message informing of new full information for a constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
type PutConstraintDetailsParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full information about the constraint that has changed.  If this field is omitted, the constraint was deleted.  The `ovn` field in the nested `reference` must be populated.
	Constraint *Constraint `protobuf:"bytes,1,opt,name=constraint,proto3" json:"constraint,omitempty"`
	// ID of constraint that has changed.
	ConstraintId string `protobuf:"bytes,2,opt,name=constraint_id,json=constraintId,proto3" json:"constraint_id,omitempty"`
	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *PutConstraintDetailsParameters) Reset() {
	*x = PutConstraintDetailsParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConstraintDetailsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConstraintDetailsParameters) ProtoMessage() {}

func (x *PutConstraintDetailsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConstraintDetailsParameters.ProtoReflect.Descriptor instead.
func (*PutConstraintDetailsParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{43}
}

func (x *PutConstraintDetailsParameters) GetConstraint() *Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *PutConstraintDetailsParameters) GetConstraintId() string {
	if x != nil {
		return x.ConstraintId
	}
	return ""
}

func (x *PutConstraintDetailsParameters) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Parameters for a request to create/update a ConstraintReference in the DSS.
type PutConstraintReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spacetime extents that bound this constraint.
	// The end time may not be in the past.
	// All volumes of the constraint must be encompassed in these extents. However, these extents do not need to match the precise volumes of the constraint; a single bounding extent may be provided instead, for instance.
	Extents    []*Volume4D `protobuf:"bytes,1,rep,name=extents,proto3" json:"extents,omitempty"`
	UssBaseUrl string      `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutConstraintReferenceParameters) Reset() {
	*x = PutConstraintReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConstraintReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConstraintReferenceParameters) ProtoMessage() {}

func (x *PutConstraintReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConstraintReferenceParameters.ProtoReflect.Descriptor instead.
func (*PutConstraintReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{44}
}

func (x *PutConstraintReferenceParameters) GetExtents() []*Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutConstraintReferenceParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

// Parameters of a message informing of detailed information for a peer operational intent. Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
type PutOperationalIntentDetailsParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full information about the operational intent that has changed.  If this field is omitted, the operational intent was deleted.  The `ovn` field in the nested `reference` must be populated.
	OperationalIntent *OperationalIntent `protobuf:"bytes,1,opt,name=operational_intent,json=operationalIntent,proto3" json:"operational_intent,omitempty"`
	// ID of operational intent that has changed.
	OperationalIntentId string `protobuf:"bytes,2,opt,name=operational_intent_id,json=operationalIntentId,proto3" json:"operational_intent_id,omitempty"`
	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *PutOperationalIntentDetailsParameters) Reset() {
	*x = PutOperationalIntentDetailsParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOperationalIntentDetailsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOperationalIntentDetailsParameters) ProtoMessage() {}

func (x *PutOperationalIntentDetailsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOperationalIntentDetailsParameters.ProtoReflect.Descriptor instead.
func (*PutOperationalIntentDetailsParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{45}
}

func (x *PutOperationalIntentDetailsParameters) GetOperationalIntent() *OperationalIntent {
	if x != nil {
		return x.OperationalIntent
	}
	return nil
}

func (x *PutOperationalIntentDetailsParameters) GetOperationalIntentId() string {
	if x != nil {
		return x.OperationalIntentId
	}
	return ""
}

func (x *PutOperationalIntentDetailsParameters) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Parameters for a request to create an OperationalIntentReference in the DSS. A subscription to changes overlapping this volume may be implicitly created, but this can be overridden by providing the (optional) 'subscription_id' to use. Note: The implicit subscription is managed by the DSS, not the USS.
type PutOperationalIntentReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spacetime extents that bound this operational intent.
	// Start and end times, as well as lower and upper altitudes, are required for each volume. The end time may not be in the past. All volumes, both nominal and off-nominal, must be encompassed in these extents. However, these extents do not need to match the precise volumes of the operational intent; a single bounding extent may be provided instead, for instance.
	Extents []*Volume4D `protobuf:"bytes,1,rep,name=extents,proto3" json:"extents,omitempty"`
	// Proof that the USS creating or mutating this operational intent was aware of the current state of the airspace, with the expectation that this operational intent is therefore deconflicted from all relevant features in the airspace.  This field is not required when declaring an operational intent Nonconforming or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required. OVNs for constraints are required if and only if the USS managing this operational intent is performing the constraint processing role, which is indicated by whether the subscription associated with this operational intent triggers notifications for constraints.  The key does not need to contain the OVN for the operational intent being updated.
	Key []string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
	// If an existing subscription is not specified in `subscription_id`, and the operational intent is in the Activated, Nonconforming, or Contingent state, then this field must be populated.  When this field is populated, an implicit subscription will be created and associated with this operational intent, and will generally be deleted automatically upon the deletion of this operational intent.
	NewSubscription *ImplicitSubscriptionParameters `protobuf:"bytes,3,opt,name=new_subscription,json=newSubscription,proto3" json:"new_subscription,omitempty"`
	State           string                          `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// The ID of an existing subscription that the USS will use to keep the operator informed about updates to relevant airspace information. If this field is not provided when the operational intent is in the Activated, Nonconforming, or Contingent state, then the `new_subscription` field must be provided in order to provide notification capability for the operational intent.  The subscription specified by this ID must cover at least the area over which this operational intent is conducted, and it must provide notifications for operational intents.
	SubscriptionId string `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UssBaseUrl     string `protobuf:"bytes,6,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutOperationalIntentReferenceParameters) Reset() {
	*x = PutOperationalIntentReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOperationalIntentReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOperationalIntentReferenceParameters) ProtoMessage() {}

func (x *PutOperationalIntentReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOperationalIntentReferenceParameters.ProtoReflect.Descriptor instead.
func (*PutOperationalIntentReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{46}
}

func (x *PutOperationalIntentReferenceParameters) GetExtents() []*Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutOperationalIntentReferenceParameters) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutOperationalIntentReferenceParameters) GetNewSubscription() *ImplicitSubscriptionParameters {
	if x != nil {
		return x.NewSubscription
	}
	return nil
}

func (x *PutOperationalIntentReferenceParameters) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PutOperationalIntentReferenceParameters) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *PutOperationalIntentReferenceParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

// Parameters for a request to create/update a subscription in the DSS.  At least one form of notifications must be requested.
type PutSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spacetime extents of the volume to subscribe to.
	// This subscription will automatically be deleted after its end time if it has not been refreshed by then. If end time is not specified, the value will be chosen automatically by the DSS. If start time is not specified, it will default to the time the request is processed. The end time may not be in the past.
	// Note that some Entities triggering notifications may lie entirely outside the requested area.
	Extents *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	// If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true.
	NotifyForConstraints bool `protobuf:"varint,2,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	// If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true.
	NotifyForOperationalIntents bool   `protobuf:"varint,3,opt,name=notify_for_operational_intents,json=notifyForOperationalIntents,proto3" json:"notify_for_operational_intents,omitempty"`
	UssBaseUrl                  string `protobuf:"bytes,4,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutSubscriptionParameters) Reset() {
	*x = PutSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionParameters) ProtoMessage() {}

func (x *PutSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*PutSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{47}
}

func (x *PutSubscriptionParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutSubscriptionParameters) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *PutSubscriptionParameters) GetNotifyForOperationalIntents() bool {
	if x != nil {
		return x.NotifyForOperationalIntents
	}
	return false
}

func (x *PutSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

// Response for a request to create or update a subscription.
type PutSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraints in or near the subscription area at the time of creation/update, if `notify_for_constraints` is true.
	ConstraintReferences []*ConstraintReference `protobuf:"bytes,1,rep,name=constraint_references,json=constraintReferences,proto3" json:"constraint_references,omitempty"`
	// Operational intents in or near the subscription area at the time of creation/update, if `notify_for_operational_intents` is true.
	OperationalIntentReferences []*OperationalIntentReference `protobuf:"bytes,2,rep,name=operational_intent_references,json=operationalIntentReferences,proto3" json:"operational_intent_references,omitempty"`
	Subscription                *Subscription                 `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *PutSubscriptionResponse) Reset() {
	*x = PutSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionResponse) ProtoMessage() {}

func (x *PutSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*PutSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{48}
}

func (x *PutSubscriptionResponse) GetConstraintReferences() []*ConstraintReference {
	if x != nil {
		return x.ConstraintReferences
	}
	return nil
}

func (x *PutSubscriptionResponse) GetOperationalIntentReferences() []*OperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReferences
	}
	return nil
}

func (x *PutSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Parameters for a request to find ConstraintReferences matching the provided criteria.
type QueryConstraintReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaOfInterest *Volume4D `protobuf:"bytes,1,opt,name=area_of_interest,json=areaOfInterest,proto3" json:"area_of_interest,omitempty"`
}

func (x *QueryConstraintReferenceParameters) Reset() {
	*x = QueryConstraintReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConstraintReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConstraintReferenceParameters) ProtoMessage() {}

func (x *QueryConstraintReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConstraintReferenceParameters.ProtoReflect.Descriptor instead.
func (*QueryConstraintReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{49}
}

func (x *QueryConstraintReferenceParameters) GetAreaOfInterest() *Volume4D {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

type QueryConstraintReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *QueryConstraintReferenceParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryConstraintReferencesRequest) Reset() {
	*x = QueryConstraintReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConstraintReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConstraintReferencesRequest) ProtoMessage() {}

func (x *QueryConstraintReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConstraintReferencesRequest.ProtoReflect.Descriptor instead.
func (*QueryConstraintReferencesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{50}
}

func (x *QueryConstraintReferencesRequest) GetParams() *QueryConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Response to DSS query for ConstraintReferences in an area of interest.
type QueryConstraintReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConstraintReferences in the area of interest.
	ConstraintReferences []*ConstraintReference `protobuf:"bytes,1,rep,name=constraint_references,json=constraintReferences,proto3" json:"constraint_references,omitempty"`
}

func (x *QueryConstraintReferencesResponse) Reset() {
	*x = QueryConstraintReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConstraintReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConstraintReferencesResponse) ProtoMessage() {}

func (x *QueryConstraintReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConstraintReferencesResponse.ProtoReflect.Descriptor instead.
func (*QueryConstraintReferencesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{51}
}

func (x *QueryConstraintReferencesResponse) GetConstraintReferences() []*ConstraintReference {
	if x != nil {
		return x.ConstraintReferences
	}
	return nil
}

// Parameters for a request to find OperationalIntentReferences matching the provided criteria.
type QueryOperationalIntentReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaOfInterest *Volume4D `protobuf:"bytes,1,opt,name=area_of_interest,json=areaOfInterest,proto3" json:"area_of_interest,omitempty"`
}

func (x *QueryOperationalIntentReferenceParameters) Reset() {
	*x = QueryOperationalIntentReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperationalIntentReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperationalIntentReferenceParameters) ProtoMessage() {}

func (x *QueryOperationalIntentReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperationalIntentReferenceParameters.ProtoReflect.Descriptor instead.
func (*QueryOperationalIntentReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{52}
}

func (x *QueryOperationalIntentReferenceParameters) GetAreaOfInterest() *Volume4D {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

// Response to DSS query for OperationalIntentReferences in an area of interest.
type QueryOperationalIntentReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OperationalIntentReferences in the area of interest.
	OperationalIntentReferences []*OperationalIntentReference `protobuf:"bytes,1,rep,name=operational_intent_references,json=operationalIntentReferences,proto3" json:"operational_intent_references,omitempty"`
}

func (x *QueryOperationalIntentReferenceResponse) Reset() {
	*x = QueryOperationalIntentReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperationalIntentReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperationalIntentReferenceResponse) ProtoMessage() {}

func (x *QueryOperationalIntentReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperationalIntentReferenceResponse.ProtoReflect.Descriptor instead.
func (*QueryOperationalIntentReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{53}
}

func (x *QueryOperationalIntentReferenceResponse) GetOperationalIntentReferences() []*OperationalIntentReference {
	if x != nil {
		return x.OperationalIntentReferences
	}
	return nil
}

type QueryOperationalIntentReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *QueryOperationalIntentReferenceParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryOperationalIntentReferencesRequest) Reset() {
	*x = QueryOperationalIntentReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOperationalIntentReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOperationalIntentReferencesRequest) ProtoMessage() {}

func (x *QueryOperationalIntentReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOperationalIntentReferencesRequest.ProtoReflect.Descriptor instead.
func (*QueryOperationalIntentReferencesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{54}
}

func (x *QueryOperationalIntentReferencesRequest) GetParams() *QueryOperationalIntentReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to find subscriptions matching the provided criteria.
type QuerySubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaOfInterest *Volume4D `protobuf:"bytes,1,opt,name=area_of_interest,json=areaOfInterest,proto3" json:"area_of_interest,omitempty"`
}

func (x *QuerySubscriptionParameters) Reset() {
	*x = QuerySubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubscriptionParameters) ProtoMessage() {}

func (x *QuerySubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubscriptionParameters.ProtoReflect.Descriptor instead.
func (*QuerySubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{55}
}

func (x *QuerySubscriptionParameters) GetAreaOfInterest() *Volume4D {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

type QuerySubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *QuerySubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QuerySubscriptionsRequest) Reset() {
	*x = QuerySubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubscriptionsRequest) ProtoMessage() {}

func (x *QuerySubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*QuerySubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{56}
}

func (x *QuerySubscriptionsRequest) GetParams() *QuerySubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Response to DSS query for subscriptions in a particular geographic area.
type QuerySubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriptions that overlap the specified geographic area.
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *QuerySubscriptionsResponse) Reset() {
	*x = QuerySubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubscriptionsResponse) ProtoMessage() {}

func (x *QuerySubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*QuerySubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{57}
}

func (x *QuerySubscriptionsResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Radius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
	Units string `protobuf:"bytes,1,opt,name=units,proto3" json:"units,omitempty"`
	// Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Radius) Reset() {
	*x = Radius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radius) ProtoMessage() {}

func (x *Radius) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radius.ProtoReflect.Descriptor instead.
func (*Radius) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{58}
}

func (x *Radius) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Radius) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SetUssAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *SetUssAvailabilityStatusParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
	UssId string `protobuf:"bytes,2,opt,name=uss_id,json=ussId,proto3" json:"uss_id,omitempty"`
}

func (x *SetUssAvailabilityRequest) Reset() {
	*x = SetUssAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUssAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUssAvailabilityRequest) ProtoMessage() {}

func (x *SetUssAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUssAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*SetUssAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{59}
}

func (x *SetUssAvailabilityRequest) GetParams() *SetUssAvailabilityStatusParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SetUssAvailabilityRequest) GetUssId() string {
	if x != nil {
		return x.UssId
	}
	return ""
}

type SetUssAvailabilityStatusParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availability string `protobuf:"bytes,1,opt,name=availability,proto3" json:"availability,omitempty"`
	// Version of USS's availability to change, for consistent read-modify-write operations and consistent retry behavior.
	OldVersion string `protobuf:"bytes,2,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
}

func (x *SetUssAvailabilityStatusParameters) Reset() {
	*x = SetUssAvailabilityStatusParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUssAvailabilityStatusParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUssAvailabilityStatusParameters) ProtoMessage() {}

func (x *SetUssAvailabilityStatusParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUssAvailabilityStatusParameters.ProtoReflect.Descriptor instead.
func (*SetUssAvailabilityStatusParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{60}
}

func (x *SetUssAvailabilityStatusParameters) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *SetUssAvailabilityStatusParameters) GetOldVersion() string {
	if x != nil {
		return x.OldVersion
	}
	return ""
}

// Subscriber to notify of a change in the airspace.  This is provided by the DSS to a client changing the airspace, and it is the responsibility of that client to send a notification to the specified USS according to the change made to the airspace.
type SubscriberToNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	UssBaseUrl    string               `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *SubscriberToNotify) Reset() {
	*x = SubscriberToNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberToNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberToNotify) ProtoMessage() {}

func (x *SubscriberToNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberToNotify.ProtoReflect.Descriptor instead.
func (*SubscriberToNotify) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{61}
}

func (x *SubscriberToNotify) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *SubscriberToNotify) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

// Specification of a geographic area that a client is interested in on an ongoing basis (e.g., "planning area").
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IDs for operational intents that are dependent on this subscription.
	DependentOperationalIntents []string `protobuf:"bytes,1,rep,name=dependent_operational_intents,json=dependentOperationalIntents,proto3" json:"dependent_operational_intents,omitempty"`
	Id                          string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// True if this subscription was implicitly created by the DSS via the creation of an operational intent, and should therefore be deleted by the DSS when that operational intent is deleted.
	ImplicitSubscription bool  `protobuf:"varint,3,opt,name=implicit_subscription,json=implicitSubscription,proto3" json:"implicit_subscription,omitempty"`
	NotificationIndex    int32 `protobuf:"varint,4,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	// If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true.
	NotifyForConstraints bool `protobuf:"varint,5,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	// If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true.
	NotifyForOperationalIntents bool `protobuf:"varint,6,opt,name=notify_for_operational_intents,json=notifyForOperationalIntents,proto3" json:"notify_for_operational_intents,omitempty"`
	// If set, this subscription will not receive notifications involving airspace changes entirely after this time.
	TimeEnd *Time `protobuf:"bytes,7,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// If set, this subscription will not receive notifications involving airspace changes entirely before this time.
	TimeStart  *Time  `protobuf:"bytes,8,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl string `protobuf:"bytes,9,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Version of the subscription that the DSS changes every time a USS changes the subscription.  The DSS incrementing the notification_index does not constitute a change that triggers a new version.  A USS must specify this version when modifying an existing subscription to ensure consistency in read-modify-write operations and distributed systems.
	Version string `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{62}
}

func (x *Subscription) GetDependentOperationalIntents() []string {
	if x != nil {
		return x.DependentOperationalIntents
	}
	return nil
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetImplicitSubscription() bool {
	if x != nil {
		return x.ImplicitSubscription
	}
	return false
}

func (x *Subscription) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *Subscription) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *Subscription) GetNotifyForOperationalIntents() bool {
	if x != nil {
		return x.NotifyForOperationalIntents
	}
	return false
}

func (x *Subscription) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Subscription) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Subscription) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *Subscription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// State of subscription which is causing a notification to be sent.
type SubscriptionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationIndex int32  `protobuf:"varint,1,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	SubscriptionId    string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *SubscriptionState) Reset() {
	*x = SubscriptionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionState) ProtoMessage() {}

func (x *SubscriptionState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionState.ProtoReflect.Descriptor instead.
func (*SubscriptionState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{63}
}

func (x *SubscriptionState) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *SubscriptionState) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// RFC3339-formatted time/date string.  The time zone must be 'Z'.
	Value *timestamp.Timestamp `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{64}
}

func (x *Time) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Time) GetValue() *timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

// The set of log data fulfilling this standard's Logging requirements.
type USSLogSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For a USS that performs constraint management, associations of an authorized constraint provider with all constraints that transition to the valid state.
	ConstraintProviderAssociations []*ConstraintProviderAssociation `protobuf:"bytes,1,rep,name=constraint_provider_associations,json=constraintProviderAssociations,proto3" json:"constraint_provider_associations,omitempty"`
	// Outgoing messages sent to other USSs and the DSS, and incoming messages received from other USSs, including instances where an expected response to a request is not received.
	Messages []*ExchangeRecord `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// For a USS performing conformance monitoring, all position data used for conformance monitoring that is ingested from the UA.
	OperationalIntentPositions []*OperationalIntentPositions `protobuf:"bytes,3,rep,name=operational_intent_positions,json=operationalIntentPositions,proto3" json:"operational_intent_positions,omitempty"`
	// For a USS that manages operational intents, associations of an operator with operational intents that transitioned to the Accepted state.
	OperatorAssociations []*OperatorAssociation `protobuf:"bytes,4,rep,name=operator_associations,json=operatorAssociations,proto3" json:"operator_associations,omitempty"`
	// Instances of operator input as specifically required within this standard.
	OperatorInputs []*UserInputRecord `protobuf:"bytes,5,rep,name=operator_inputs,json=operatorInputs,proto3" json:"operator_inputs,omitempty"`
	// Instances of operator notifications as specifically required within this standard.
	OperatorNotifications []*UserNotificationRecord `protobuf:"bytes,6,rep,name=operator_notifications,json=operatorNotifications,proto3" json:"operator_notifications,omitempty"`
	// For a USS that manages operational intents, instances where an operational intent could not be planned or replanned due to conflicts with other operational intents or constraints.
	PlanningAttempts []*PlanningRecord `protobuf:"bytes,7,rep,name=planning_attempts,json=planningAttempts,proto3" json:"planning_attempts,omitempty"`
}

func (x *USSLogSet) Reset() {
	*x = USSLogSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USSLogSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USSLogSet) ProtoMessage() {}

func (x *USSLogSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USSLogSet.ProtoReflect.Descriptor instead.
func (*USSLogSet) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{65}
}

func (x *USSLogSet) GetConstraintProviderAssociations() []*ConstraintProviderAssociation {
	if x != nil {
		return x.ConstraintProviderAssociations
	}
	return nil
}

func (x *USSLogSet) GetMessages() []*ExchangeRecord {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *USSLogSet) GetOperationalIntentPositions() []*OperationalIntentPositions {
	if x != nil {
		return x.OperationalIntentPositions
	}
	return nil
}

func (x *USSLogSet) GetOperatorAssociations() []*OperatorAssociation {
	if x != nil {
		return x.OperatorAssociations
	}
	return nil
}

func (x *USSLogSet) GetOperatorInputs() []*UserInputRecord {
	if x != nil {
		return x.OperatorInputs
	}
	return nil
}

func (x *USSLogSet) GetOperatorNotifications() []*UserNotificationRecord {
	if x != nil {
		return x.OperatorNotifications
	}
	return nil
}

func (x *USSLogSet) GetPlanningAttempts() []*PlanningRecord {
	if x != nil {
		return x.PlanningAttempts
	}
	return nil
}

type UpdateConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the constraint.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
	// Request body.
	Params *PutConstraintReferenceParameters `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdateConstraintReferenceRequest) Reset() {
	*x = UpdateConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConstraintReferenceRequest) ProtoMessage() {}

func (x *UpdateConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateConstraintReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *UpdateConstraintReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *UpdateConstraintReferenceRequest) GetParams() *PutConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateOperationalIntentReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityID of the operational intent.
	Entityid string `protobuf:"bytes,1,opt,name=entityid,proto3" json:"entityid,omitempty"`
	// Opaque version number of the existing operational intent reference.
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
	// Request body.
	Params *PutOperationalIntentReferenceParameters `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *UpdateOperationalIntentReferenceRequest) Reset() {
	*x = UpdateOperationalIntentReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOperationalIntentReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOperationalIntentReferenceRequest) ProtoMessage() {}

func (x *UpdateOperationalIntentReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOperationalIntentReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateOperationalIntentReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateOperationalIntentReferenceRequest) GetEntityid() string {
	if x != nil {
		return x.Entityid
	}
	return ""
}

func (x *UpdateOperationalIntentReferenceRequest) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *UpdateOperationalIntentReferenceRequest) GetParams() *PutOperationalIntentReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type UpdateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *PutSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// SubscriptionID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,2,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
	// Version of the subscription to be modified.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateSubscriptionRequest) Reset() {
	*x = UpdateSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionRequest) ProtoMessage() {}

func (x *UpdateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateSubscriptionRequest) GetParams() *PutSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

func (x *UpdateSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// User input record
type UserInputRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the information that was provided by the user, as per the referenced input_triggering_event requirement
	InputDetails string `protobuf:"bytes,1,opt,name=input_details,json=inputDetails,proto3" json:"input_details,omitempty"`
	// Requirement ID that pertains to the given notification
	InputTriggeringEvent string `protobuf:"bytes,2,opt,name=input_triggering_event,json=inputTriggeringEvent,proto3" json:"input_triggering_event,omitempty"`
	// ID of the operational_intent ID pertaining to the user input
	OperationalIntentId string `protobuf:"bytes,3,opt,name=operational_intent_id,json=operationalIntentId,proto3" json:"operational_intent_id,omitempty"`
	// Time in which user input was received by the USS
	TriggeringEventTime *Time `protobuf:"bytes,4,opt,name=triggering_event_time,json=triggeringEventTime,proto3" json:"triggering_event_time,omitempty"`
}

func (x *UserInputRecord) Reset() {
	*x = UserInputRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInputRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInputRecord) ProtoMessage() {}

func (x *UserInputRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInputRecord.ProtoReflect.Descriptor instead.
func (*UserInputRecord) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{69}
}

func (x *UserInputRecord) GetInputDetails() string {
	if x != nil {
		return x.InputDetails
	}
	return ""
}

func (x *UserInputRecord) GetInputTriggeringEvent() string {
	if x != nil {
		return x.InputTriggeringEvent
	}
	return ""
}

func (x *UserInputRecord) GetOperationalIntentId() string {
	if x != nil {
		return x.OperationalIntentId
	}
	return ""
}

func (x *UserInputRecord) GetTriggeringEventTime() *Time {
	if x != nil {
		return x.TriggeringEventTime
	}
	return nil
}

// User notification record.
type UserNotificationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of information that was provided to the user, as per the referenced notification_triggering_event requirement
	NotificationDetails string `protobuf:"bytes,1,opt,name=notification_details,json=notificationDetails,proto3" json:"notification_details,omitempty"`
	// Time at which the user was notified
	NotificationTime *Time `protobuf:"bytes,2,opt,name=notification_time,json=notificationTime,proto3" json:"notification_time,omitempty"`
	// Requirement ID that pertains to the given notification
	NotificationTriggeringEvent string `protobuf:"bytes,3,opt,name=notification_triggering_event,json=notificationTriggeringEvent,proto3" json:"notification_triggering_event,omitempty"`
	// Time of the notification triggering event
	TriggeringEventTime *Time `protobuf:"bytes,4,opt,name=triggering_event_time,json=triggeringEventTime,proto3" json:"triggering_event_time,omitempty"`
}

func (x *UserNotificationRecord) Reset() {
	*x = UserNotificationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNotificationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationRecord) ProtoMessage() {}

func (x *UserNotificationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationRecord.ProtoReflect.Descriptor instead.
func (*UserNotificationRecord) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{70}
}

func (x *UserNotificationRecord) GetNotificationDetails() string {
	if x != nil {
		return x.NotificationDetails
	}
	return ""
}

func (x *UserNotificationRecord) GetNotificationTime() *Time {
	if x != nil {
		return x.NotificationTime
	}
	return nil
}

func (x *UserNotificationRecord) GetNotificationTriggeringEvent() string {
	if x != nil {
		return x.NotificationTriggeringEvent
	}
	return ""
}

func (x *UserNotificationRecord) GetTriggeringEventTime() *Time {
	if x != nil {
		return x.TriggeringEventTime
	}
	return nil
}

type UssAvailabilityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Availability string `protobuf:"bytes,1,opt,name=availability,proto3" json:"availability,omitempty"`
	// Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
	Uss string `protobuf:"bytes,2,opt,name=uss,proto3" json:"uss,omitempty"`
}

func (x *UssAvailabilityStatus) Reset() {
	*x = UssAvailabilityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssAvailabilityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssAvailabilityStatus) ProtoMessage() {}

func (x *UssAvailabilityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssAvailabilityStatus.ProtoReflect.Descriptor instead.
func (*UssAvailabilityStatus) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{71}
}

func (x *UssAvailabilityStatus) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *UssAvailabilityStatus) GetUss() string {
	if x != nil {
		return x.Uss
	}
	return ""
}

type UssAvailabilityStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *UssAvailabilityStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Current version of USS's availability.  Used to change USS's availability.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UssAvailabilityStatusResponse) Reset() {
	*x = UssAvailabilityStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssAvailabilityStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssAvailabilityStatusResponse) ProtoMessage() {}

func (x *UssAvailabilityStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssAvailabilityStatusResponse.ProtoReflect.Descriptor instead.
func (*UssAvailabilityStatusResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{72}
}

func (x *UssAvailabilityStatusResponse) GetStatus() *UssAvailabilityStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UssAvailabilityStatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Vehicle position, altitude, and velocity.
type VehicleTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position     *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	TimeMeasured *Time     `protobuf:"bytes,2,opt,name=time_measured,json=timeMeasured,proto3" json:"time_measured,omitempty"`
	Velocity     *Velocity `protobuf:"bytes,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *VehicleTelemetry) Reset() {
	*x = VehicleTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleTelemetry) ProtoMessage() {}

func (x *VehicleTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleTelemetry.ProtoReflect.Descriptor instead.
func (*VehicleTelemetry) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{73}
}

func (x *VehicleTelemetry) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *VehicleTelemetry) GetTimeMeasured() *Time {
	if x != nil {
		return x.TimeMeasured
	}
	return nil
}

func (x *VehicleTelemetry) GetVelocity() *Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

type Velocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ground speed in meters/second.
	Speed float32 `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	// Direction of flight expressed as a "True North-based" ground track angle. This value is provided in degrees East of North with a minimum resolution of 1 degree. A value of 360 indicates invalid, no value, or unknown.
	Track      float32 `protobuf:"fixed32,2,opt,name=track,proto3" json:"track,omitempty"`
	UnitsSpeed string  `protobuf:"bytes,3,opt,name=units_speed,json=unitsSpeed,proto3" json:"units_speed,omitempty"`
}

func (x *Velocity) Reset() {
	*x = Velocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Velocity) ProtoMessage() {}

func (x *Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Velocity.ProtoReflect.Descriptor instead.
func (*Velocity) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{74}
}

func (x *Velocity) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Velocity) GetTrack() float32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *Velocity) GetUnitsSpeed() string {
	if x != nil {
		return x.UnitsSpeed
	}
	return ""
}

// A three-dimensional geographic volume consisting of a vertically-extruded shape. Exactly one outline must be specified.
type Volume3D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum bounding altitude of this volume. Must be less than altitude_upper, if specified.
	AltitudeLower *Altitude `protobuf:"bytes,1,opt,name=altitude_lower,json=altitudeLower,proto3" json:"altitude_lower,omitempty"`
	// Maximum bounding altitude of this volume. Must be greater than altitude_lower, if specified.
	AltitudeUpper *Altitude `protobuf:"bytes,2,opt,name=altitude_upper,json=altitudeUpper,proto3" json:"altitude_upper,omitempty"`
	// A circular geographic shape on the surface of the earth.
	OutlineCircle *Circle `protobuf:"bytes,3,opt,name=outline_circle,json=outlineCircle,proto3" json:"outline_circle,omitempty"`
	// A polygonal geographic shape on the surface of the earth.
	OutlinePolygon *Polygon `protobuf:"bytes,4,opt,name=outline_polygon,json=outlinePolygon,proto3" json:"outline_polygon,omitempty"`
}

func (x *Volume3D) Reset() {
	*x = Volume3D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume3D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume3D) ProtoMessage() {}

func (x *Volume3D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume3D.ProtoReflect.Descriptor instead.
func (*Volume3D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{75}
}

func (x *Volume3D) GetAltitudeLower() *Altitude {
	if x != nil {
		return x.AltitudeLower
	}
	return nil
}

func (x *Volume3D) GetAltitudeUpper() *Altitude {
	if x != nil {
		return x.AltitudeUpper
	}
	return nil
}

func (x *Volume3D) GetOutlineCircle() *Circle {
	if x != nil {
		return x.OutlineCircle
	}
	return nil
}

func (x *Volume3D) GetOutlinePolygon() *Polygon {
	if x != nil {
		return x.OutlinePolygon
	}
	return nil
}

// Contiguous block of geographic spacetime.
type Volume4D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End time of this volume. Must be after time_start.
	TimeEnd *Time `protobuf:"bytes,1,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of this volume. Must be before time_end.
	TimeStart *Time     `protobuf:"bytes,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	Volume    *Volume3D `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Volume4D) Reset() {
	*x = Volume4D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume4D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume4D) ProtoMessage() {}

func (x *Volume4D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume4D.ProtoReflect.Descriptor instead.
func (*Volume4D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{76}
}

func (x *Volume4D) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Volume4D) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Volume4D) GetVolume() *Volume3D {
	if x != nil {
		return x.Volume
	}
	return nil
}

type GeoZone_AdditionalPropertiesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GeoZone_AdditionalPropertiesMessage) Reset() {
	*x = GeoZone_AdditionalPropertiesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoZone_AdditionalPropertiesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoZone_AdditionalPropertiesMessage) ProtoMessage() {}

func (x *GeoZone_AdditionalPropertiesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_scdpb_scd_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoZone_AdditionalPropertiesMessage.ProtoReflect.Descriptor instead.
func (*GeoZone_AdditionalPropertiesMessage) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP(), []int{20, 0}
}

var File_pkg_api_v1_scdpb_scd_proto protoreflect.FileDescriptor

var file_pkg_api_v1_scdpb_scd_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2f, 0x73, 0x63, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x41, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x1b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x08, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe6, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x21, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x28, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x06, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x74, 0x4c,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x7a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x7c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6f, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x7a, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x02, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e,
	0x12, 0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x7d, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x22, 0x57, 0x0a,
	0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x22, 0x5d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x0b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2e, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xca, 0x04, 0x0a, 0x07,
	0x47, 0x65, 0x6f, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x6f, 0x5a, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x53, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x37, 0x0a, 0x0e, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x7a, 0x6f, 0x6e, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x1d, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdd, 0x01, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x18, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x40, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x75, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x73, 0x73, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x31, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6e, 0x67, 0x22, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x5f, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x34, 0x44, 0x52, 0x11, 0x6f, 0x66, 0x66, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x13, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x19, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x76, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6f,
	0x76, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1f, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x39,
	0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x5f, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x48, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x5f, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x56, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22,
	0x79, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x1e, 0x50,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x20, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x25, 0x50, 0x75, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x47, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x99, 0x02,
	0x0a, 0x27, 0x50, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x50, 0x75,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0x8a, 0x02, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x1d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x22,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x0e, 0x61,
	0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x74, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x29, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x34, 0x44, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x1d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x58, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x34, 0x44, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x57, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x75, 0x0a, 0x19,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x75, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73,
	0x73, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xd1, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x09, 0x55, 0x53,
	0x53, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x12, 0x6e, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x1c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4f, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x54, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12, 0x3f,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x15, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8a, 0x02, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x15, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x15,
	0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x55,
	0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x63, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a,
	0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x57, 0x0a,
	0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x33, 0x44, 0x12, 0x36, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x12,
	0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x33, 0x44, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x85, 0x17, 0x0a,
	0x1c, 0x55, 0x54, 0x4d, 0x41, 0x50, 0x49, 0x55, 0x53, 0x53, 0x44, 0x53, 0x53, 0x41, 0x6e, 0x64,
	0x55, 0x53, 0x53, 0x55, 0x53, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa8, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x1a, 0x28, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d,
	0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e,
	0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x30, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x8e, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x1a, 0x26, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f, 0x76, 0x6e, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f, 0x76, 0x6e, 0x7d,
	0x12, 0x93, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x63, 0x64, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x24, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d,
	0x12, 0xb4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x63,
	0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x64,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x12, 0x26, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x73, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x75, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x61, 0x0a, 0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x6b, 0x65, 0x44, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x0f,
	0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x22, 0x23, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xbf, 0x01,
	0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x2b, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x86, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x22, 0x1b, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x1a,
	0x21, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x73, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x75, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x38, 0x1a, 0x2e, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f,
	0x76, 0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x1a, 0x36, 0x2f, 0x64, 0x73, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6f, 0x76, 0x6e,
	0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x30, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_v1_scdpb_scd_proto_rawDescOnce sync.Once
	file_pkg_api_v1_scdpb_scd_proto_rawDescData = file_pkg_api_v1_scdpb_scd_proto_rawDesc
)

func file_pkg_api_v1_scdpb_scd_proto_rawDescGZIP() []byte {
	file_pkg_api_v1_scdpb_scd_proto_rawDescOnce.Do(func() {
		file_pkg_api_v1_scdpb_scd_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v1_scdpb_scd_proto_rawDescData)
	})
	return file_pkg_api_v1_scdpb_scd_proto_rawDescData
}

var file_pkg_api_v1_scdpb_scd_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_pkg_api_v1_scdpb_scd_proto_goTypes = []interface{}{
	(*AirspaceConflictResponse)(nil),                  // 0: scdpb.AirspaceConflictResponse
	(*Altitude)(nil),                                  // 1: scdpb.Altitude
	(*Authority)(nil),                                 // 2: scdpb.Authority
	(*ChangeConstraintReferenceResponse)(nil),         // 3: scdpb.ChangeConstraintReferenceResponse
	(*ChangeOperationalIntentReferenceResponse)(nil),  // 4: scdpb.ChangeOperationalIntentReferenceResponse
	(*Circle)(nil),                                    // 5: scdpb.Circle
	(*Constraint)(nil),                                // 6: scdpb.Constraint
	(*ConstraintDetails)(nil),                         // 7: scdpb.ConstraintDetails
	(*ConstraintProviderAssociation)(nil),             // 8: scdpb.ConstraintProviderAssociation
	(*ConstraintReference)(nil),                       // 9: scdpb.ConstraintReference
	(*CreateConstraintReferenceRequest)(nil),          // 10: scdpb.CreateConstraintReferenceRequest
	(*CreateOperationalIntentReferenceRequest)(nil),   // 11: scdpb.CreateOperationalIntentReferenceRequest
	(*CreateSubscriptionRequest)(nil),                 // 12: scdpb.CreateSubscriptionRequest
	(*DeleteConstraintReferenceRequest)(nil),          // 13: scdpb.DeleteConstraintReferenceRequest
	(*DeleteOperationalIntentReferenceRequest)(nil),   // 14: scdpb.DeleteOperationalIntentReferenceRequest
	(*DeleteSubscriptionRequest)(nil),                 // 15: scdpb.DeleteSubscriptionRequest
	(*DeleteSubscriptionResponse)(nil),                // 16: scdpb.DeleteSubscriptionResponse
	(*ErrorReport)(nil),                               // 17: scdpb.ErrorReport
	(*ErrorResponse)(nil),                             // 18: scdpb.ErrorResponse
	(*ExchangeRecord)(nil),                            // 19: scdpb.ExchangeRecord
	(*GeoZone)(nil),                                   // 20: scdpb.GeoZone
	(*GetConstraintDetailsResponse)(nil),              // 21: scdpb.GetConstraintDetailsResponse
	(*GetConstraintReferenceRequest)(nil),             // 22: scdpb.GetConstraintReferenceRequest
	(*GetConstraintReferenceResponse)(nil),            // 23: scdpb.GetConstraintReferenceResponse
	(*GetOperationalIntentDetailsResponse)(nil),       // 24: scdpb.GetOperationalIntentDetailsResponse
	(*GetOperationalIntentReferenceRequest)(nil),      // 25: scdpb.GetOperationalIntentReferenceRequest
	(*GetOperationalIntentReferenceResponse)(nil),     // 26: scdpb.GetOperationalIntentReferenceResponse
	(*GetOperationalIntentTelemetryResponse)(nil),     // 27: scdpb.GetOperationalIntentTelemetryResponse
	(*GetSubscriptionRequest)(nil),                    // 28: scdpb.GetSubscriptionRequest
	(*GetSubscriptionResponse)(nil),                   // 29: scdpb.GetSubscriptionResponse
	(*GetUssAvailabilityRequest)(nil),                 // 30: scdpb.GetUssAvailabilityRequest
	(*ImplicitSubscriptionParameters)(nil),            // 31: scdpb.ImplicitSubscriptionParameters
	(*LatLngPoint)(nil),                               // 32: scdpb.LatLngPoint
	(*MakeDssReportRequest)(nil),                      // 33: scdpb.MakeDssReportRequest
	(*OperationalIntent)(nil),                         // 34: scdpb.OperationalIntent
	(*OperationalIntentDetails)(nil),                  // 35: scdpb.OperationalIntentDetails
	(*OperationalIntentPositions)(nil),                // 36: scdpb.OperationalIntentPositions
	(*OperationalIntentReference)(nil),                // 37: scdpb.OperationalIntentReference
	(*OperatorAssociation)(nil),                       // 38: scdpb.OperatorAssociation
	(*PlanningRecord)(nil),                            // 39: scdpb.PlanningRecord
	(*Polygon)(nil),                                   // 40: scdpb.Polygon
	(*Position)(nil),                                  // 41: scdpb.Position
	(*PositionRecord)(nil),                            // 42: scdpb.PositionRecord
	(*PutConstraintDetailsParameters)(nil),            // 43: scdpb.PutConstraintDetailsParameters
	(*PutConstraintReferenceParameters)(nil),          // 44: scdpb.PutConstraintReferenceParameters
	(*PutOperationalIntentDetailsParameters)(nil),     // 45: scdpb.PutOperationalIntentDetailsParameters
	(*PutOperationalIntentReferenceParameters)(nil),   // 46: scdpb.PutOperationalIntentReferenceParameters
	(*PutSubscriptionParameters)(nil),                 // 47: scdpb.PutSubscriptionParameters
	(*PutSubscriptionResponse)(nil),                   // 48: scdpb.PutSubscriptionResponse
	(*QueryConstraintReferenceParameters)(nil),        // 49: scdpb.QueryConstraintReferenceParameters
	(*QueryConstraintReferencesRequest)(nil),          // 50: scdpb.QueryConstraintReferencesRequest
	(*QueryConstraintReferencesResponse)(nil),         // 51: scdpb.QueryConstraintReferencesResponse
	(*QueryOperationalIntentReferenceParameters)(nil), // 52: scdpb.QueryOperationalIntentReferenceParameters
	(*QueryOperationalIntentReferenceResponse)(nil),   // 53: scdpb.QueryOperationalIntentReferenceResponse
	(*QueryOperationalIntentReferencesRequest)(nil),   // 54: scdpb.QueryOperationalIntentReferencesRequest
	(*QuerySubscriptionParameters)(nil),               // 55: scdpb.QuerySubscriptionParameters
	(*QuerySubscriptionsRequest)(nil),                 // 56: scdpb.QuerySubscriptionsRequest
	(*QuerySubscriptionsResponse)(nil),                // 57: scdpb.QuerySubscriptionsResponse
	(*Radius)(nil),                                    // 58: scdpb.Radius
	(*SetUssAvailabilityRequest)(nil),                 // 59: scdpb.SetUssAvailabilityRequest
	(*SetUssAvailabilityStatusParameters)(nil),        // 60: scdpb.SetUssAvailabilityStatusParameters
	(*SubscriberToNotify)(nil),                        // 61: scdpb.SubscriberToNotify
	(*Subscription)(nil),                              // 62: scdpb.Subscription
	(*SubscriptionState)(nil),                         // 63: scdpb.SubscriptionState
	(*Time)(nil),                                      // 64: scdpb.Time
	(*USSLogSet)(nil),                                 // 65: scdpb.USSLogSet
	(*UpdateConstraintReferenceRequest)(nil),          // 66: scdpb.UpdateConstraintReferenceRequest
	(*UpdateOperationalIntentReferenceRequest)(nil),   // 67: scdpb.UpdateOperationalIntentReferenceRequest
	(*UpdateSubscriptionRequest)(nil),                 // 68: scdpb.UpdateSubscriptionRequest
	(*UserInputRecord)(nil),                           // 69: scdpb.UserInputRecord
	(*UserNotificationRecord)(nil),                    // 70: scdpb.UserNotificationRecord
	(*UssAvailabilityStatus)(nil),                     // 71: scdpb.UssAvailabilityStatus
	(*UssAvailabilityStatusResponse)(nil),             // 72: scdpb.UssAvailabilityStatusResponse
	(*VehicleTelemetry)(nil),                          // 73: scdpb.VehicleTelemetry
	(*Velocity)(nil),                                  // 74: scdpb.Velocity
	(*Volume3D)(nil),                                  // 75: scdpb.Volume3D
	(*Volume4D)(nil),                                  // 76: scdpb.Volume4D
	(*GeoZone_AdditionalPropertiesMessage)(nil),       // 77: scdpb.GeoZone.AdditionalPropertiesMessage
	(*timestamp.Timestamp)(nil),                       // 78: google.protobuf.Timestamp
}
var file_pkg_api_v1_scdpb_scd_proto_depIdxs = []int32{
	9,   // 0: scdpb.AirspaceConflictResponse.missing_constraints:type_name -> scdpb.ConstraintReference
	37,  // 1: scdpb.AirspaceConflictResponse.missing_operational_intents:type_name -> scdpb.OperationalIntentReference
	9,   // 2: scdpb.ChangeConstraintReferenceResponse.constraint_reference:type_name -> scdpb.ConstraintReference
	61,  // 3: scdpb.ChangeConstraintReferenceResponse.subscribers:type_name -> scdpb.SubscriberToNotify
	37,  // 4: scdpb.ChangeOperationalIntentReferenceResponse.operational_intent_reference:type_name -> scdpb.OperationalIntentReference
	61,  // 5: scdpb.ChangeOperationalIntentReferenceResponse.subscribers:type_name -> scdpb.SubscriberToNotify
	32,  // 6: scdpb.Circle.center:type_name -> scdpb.LatLngPoint
	58,  // 7: scdpb.Circle.radius:type_name -> scdpb.Radius
	7,   // 8: scdpb.Constraint.details:type_name -> scdpb.ConstraintDetails
	9,   // 9: scdpb.Constraint.reference:type_name -> scdpb.ConstraintReference
	20,  // 10: scdpb.ConstraintDetails.geozone:type_name -> scdpb.GeoZone
	76,  // 11: scdpb.ConstraintDetails.volumes:type_name -> scdpb.Volume4D
	64,  // 12: scdpb.ConstraintReference.time_end:type_name -> scdpb.Time
	64,  // 13: scdpb.ConstraintReference.time_start:type_name -> scdpb.Time
	44,  // 14: scdpb.CreateConstraintReferenceRequest.params:type_name -> scdpb.PutConstraintReferenceParameters
	46,  // 15: scdpb.CreateOperationalIntentReferenceRequest.params:type_name -> scdpb.PutOperationalIntentReferenceParameters
	47,  // 16: scdpb.CreateSubscriptionRequest.params:type_name -> scdpb.PutSubscriptionParameters
	62,  // 17: scdpb.DeleteSubscriptionResponse.subscription:type_name -> scdpb.Subscription
	19,  // 18: scdpb.ErrorReport.exchange:type_name -> scdpb.ExchangeRecord
	64,  // 19: scdpb.ExchangeRecord.request_time:type_name -> scdpb.Time
	64,  // 20: scdpb.ExchangeRecord.response_time:type_name -> scdpb.Time
	77,  // 21: scdpb.GeoZone.additional_properties:type_name -> scdpb.GeoZone.AdditionalPropertiesMessage
	2,   // 22: scdpb.GeoZone.zone_authority:type_name -> scdpb.Authority
	6,   // 23: scdpb.GetConstraintDetailsResponse.constraint:type_name -> scdpb.Constraint
	9,   // 24: scdpb.GetConstraintReferenceResponse.constraint_reference:type_name -> scdpb.ConstraintReference
	34,  // 25: scdpb.GetOperationalIntentDetailsResponse.operational_intent:type_name -> scdpb.OperationalIntent
	37,  // 26: scdpb.GetOperationalIntentReferenceResponse.operational_intent_reference:type_name -> scdpb.OperationalIntentReference
	64,  // 27: scdpb.GetOperationalIntentTelemetryResponse.next_telemetry_opportunity:type_name -> scdpb.Time
	73,  // 28: scdpb.GetOperationalIntentTelemetryResponse.telemetry:type_name -> scdpb.VehicleTelemetry
	62,  // 29: scdpb.GetSubscriptionResponse.subscription:type_name -> scdpb.Subscription
	17,  // 30: scdpb.MakeDssReportRequest.params:type_name -> scdpb.ErrorReport
	35,  // 31: scdpb.OperationalIntent.details:type_name -> scdpb.OperationalIntentDetails
	37,  // 32: scdpb.OperationalIntent.reference:type_name -> scdpb.OperationalIntentReference
	76,  // 33: scdpb.OperationalIntentDetails.off_nominal_volumes:type_name -> scdpb.Volume4D
	76,  // 34: scdpb.OperationalIntentDetails.volumes:type_name -> scdpb.Volume4D
	42,  // 35: scdpb.OperationalIntentPositions.positions:type_name -> scdpb.PositionRecord
	64,  // 36: scdpb.OperationalIntentReference.time_end:type_name -> scdpb.Time
	64,  // 37: scdpb.OperationalIntentReference.time_start:type_name -> scdpb.Time
	64,  // 38: scdpb.PlanningRecord.time:type_name -> scdpb.Time
	32,  // 39: scdpb.Polygon.vertices:type_name -> scdpb.LatLngPoint
	1,   // 40: scdpb.Position.altitude:type_name -> scdpb.Altitude
	73,  // 41: scdpb.PositionRecord.telemetry:type_name -> scdpb.VehicleTelemetry
	64,  // 42: scdpb.PositionRecord.time_received:type_name -> scdpb.Time
	6,   // 43: scdpb.PutConstraintDetailsParameters.constraint:type_name -> scdpb.Constraint
	63,  // 44: scdpb.PutConstraintDetailsParameters.subscriptions:type_name -> scdpb.SubscriptionState
	76,  // 45: scdpb.PutConstraintReferenceParameters.extents:type_name -> scdpb.Volume4D
	34,  // 46: scdpb.PutOperationalIntentDetailsParameters.operational_intent:type_name -> scdpb.OperationalIntent
	63,  // 47: scdpb.PutOperationalIntentDetailsParameters.subscriptions:type_name -> scdpb.SubscriptionState
	76,  // 48: scdpb.PutOperationalIntentReferenceParameters.extents:type_name -> scdpb.Volume4D
	31,  // 49: scdpb.PutOperationalIntentReferenceParameters.new_subscription:type_name -> scdpb.ImplicitSubscriptionParameters
	76,  // 50: scdpb.PutSubscriptionParameters.extents:type_name -> scdpb.Volume4D
	9,   // 51: scdpb.PutSubscriptionResponse.constraint_references:type_name -> scdpb.ConstraintReference
	37,  // 52: scdpb.PutSubscriptionResponse.operational_intent_references:type_name -> scdpb.OperationalIntentReference
	62,  // 53: scdpb.PutSubscriptionResponse.subscription:type_name -> scdpb.Subscription
	76,  // 54: scdpb.QueryConstraintReferenceParameters.area_of_interest:type_name -> scdpb.Volume4D
	49,  // 55: scdpb.QueryConstraintReferencesRequest.params:type_name -> scdpb.QueryConstraintReferenceParameters
	9,   // 56: scdpb.QueryConstraintReferencesResponse.constraint_references:type_name -> scdpb.ConstraintReference
	76,  // 57: scdpb.QueryOperationalIntentReferenceParameters.area_of_interest:type_name -> scdpb.Volume4D
	37,  // 58: scdpb.QueryOperationalIntentReferenceResponse.operational_intent_references:type_name -> scdpb.OperationalIntentReference
	52,  // 59: scdpb.QueryOperationalIntentReferencesRequest.params:type_name -> scdpb.QueryOperationalIntentReferenceParameters
	76,  // 60: scdpb.QuerySubscriptionParameters.area_of_interest:type_name -> scdpb.Volume4D
	55,  // 61: scdpb.QuerySubscriptionsRequest.params:type_name -> scdpb.QuerySubscriptionParameters
	62,  // 62: scdpb.QuerySubscriptionsResponse.subscriptions:type_name -> scdpb.Subscription
	60,  // 63: scdpb.SetUssAvailabilityRequest.params:type_name -> scdpb.SetUssAvailabilityStatusParameters
	63,  // 64: scdpb.SubscriberToNotify.subscriptions:type_name -> scdpb.SubscriptionState
	64,  // 65: scdpb.Subscription.time_end:type_name -> scdpb.Time
	64,  // 66: scdpb.Subscription.time_start:type_name -> scdpb.Time
	78,  // 67: scdpb.Time.value:type_name -> google.protobuf.Timestamp
	8,   // 68: scdpb.USSLogSet.constraint_provider_associations:type_name -> scdpb.ConstraintProviderAssociation
	19,  // 69: scdpb.USSLogSet.messages:type_name -> scdpb.ExchangeRecord
	36,  // 70: scdpb.USSLogSet.operational_intent_positions:type_name -> scdpb.OperationalIntentPositions
	38,  // 71: scdpb.USSLogSet.operator_associations:type_name -> scdpb.OperatorAssociation
	69,  // 72: scdpb.USSLogSet.operator_inputs:type_name -> scdpb.UserInputRecord
	70,  // 73: scdpb.USSLogSet.operator_notifications:type_name -> scdpb.UserNotificationRecord
	39,  // 74: scdpb.USSLogSet.planning_attempts:type_name -> scdpb.PlanningRecord
	44,  // 75: scdpb.UpdateConstraintReferenceRequest.params:type_name -> scdpb.PutConstraintReferenceParameters
	46,  // 76: scdpb.UpdateOperationalIntentReferenceRequest.params:type_name -> scdpb.PutOperationalIntentReferenceParameters
	47,  // 77: scdpb.UpdateSubscriptionRequest.params:type_name -> scdpb.PutSubscriptionParameters
	64,  // 78: scdpb.UserInputRecord.triggering_event_time:type_name -> scdpb.Time
	64,  // 79: scdpb.UserNotificationRecord.notification_time:type_name -> scdpb.Time
	64,  // 80: scdpb.UserNotificationRecord.triggering_event_time:type_name -> scdpb.Time
	71,  // 81: scdpb.UssAvailabilityStatusResponse.status:type_name -> scdpb.UssAvailabilityStatus
	41,  // 82: scdpb.VehicleTelemetry.position:type_name -> scdpb.Position
	64,  // 83: scdpb.VehicleTelemetry.time_measured:type_name -> scdpb.Time
	74,  // 84: scdpb.VehicleTelemetry.velocity:type_name -> scdpb.Velocity
	1,   // 85: scdpb.Volume3D.altitude_lower:type_name -> scdpb.Altitude
	1,   // 86: scdpb.Volume3D.altitude_upper:type_name -> scdpb.Altitude
	5,   // 87: scdpb.Volume3D.outline_circle:type_name -> scdpb.Circle
	40,  // 88: scdpb.Volume3D.outline_polygon:type_name -> scdpb.Polygon
	64,  // 89: scdpb.Volume4D.time_end:type_name -> scdpb.Time
	64,  // 90: scdpb.Volume4D.time_start:type_name -> scdpb.Time
	75,  // 91: scdpb.Volume4D.volume:type_name -> scdpb.Volume3D
	10,  // 92: scdpb.UTMAPIUSSDSSAndUSSUSSService.CreateConstraintReference:input_type -> scdpb.CreateConstraintReferenceRequest
	11,  // 93: scdpb.UTMAPIUSSDSSAndUSSUSSService.CreateOperationalIntentReference:input_type -> scdpb.CreateOperationalIntentReferenceRequest
	12,  // 94: scdpb.UTMAPIUSSDSSAndUSSUSSService.CreateSubscription:input_type -> scdpb.CreateSubscriptionRequest
	13,  // 95: scdpb.UTMAPIUSSDSSAndUSSUSSService.DeleteConstraintReference:input_type -> scdpb.DeleteConstraintReferenceRequest
	14,  // 96: scdpb.UTMAPIUSSDSSAndUSSUSSService.DeleteOperationalIntentReference:input_type -> scdpb.DeleteOperationalIntentReferenceRequest
	15,  // 97: scdpb.UTMAPIUSSDSSAndUSSUSSService.DeleteSubscription:input_type -> scdpb.DeleteSubscriptionRequest
	22,  // 98: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetConstraintReference:input_type -> scdpb.GetConstraintReferenceRequest
	25,  // 99: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetOperationalIntentReference:input_type -> scdpb.GetOperationalIntentReferenceRequest
	28,  // 100: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetSubscription:input_type -> scdpb.GetSubscriptionRequest
	30,  // 101: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetUssAvailability:input_type -> scdpb.GetUssAvailabilityRequest
	33,  // 102: scdpb.UTMAPIUSSDSSAndUSSUSSService.MakeDssReport:input_type -> scdpb.MakeDssReportRequest
	50,  // 103: scdpb.UTMAPIUSSDSSAndUSSUSSService.QueryConstraintReferences:input_type -> scdpb.QueryConstraintReferencesRequest
	54,  // 104: scdpb.UTMAPIUSSDSSAndUSSUSSService.QueryOperationalIntentReferences:input_type -> scdpb.QueryOperationalIntentReferencesRequest
	56,  // 105: scdpb.UTMAPIUSSDSSAndUSSUSSService.QuerySubscriptions:input_type -> scdpb.QuerySubscriptionsRequest
	59,  // 106: scdpb.UTMAPIUSSDSSAndUSSUSSService.SetUssAvailability:input_type -> scdpb.SetUssAvailabilityRequest
	66,  // 107: scdpb.UTMAPIUSSDSSAndUSSUSSService.UpdateConstraintReference:input_type -> scdpb.UpdateConstraintReferenceRequest
	67,  // 108: scdpb.UTMAPIUSSDSSAndUSSUSSService.UpdateOperationalIntentReference:input_type -> scdpb.UpdateOperationalIntentReferenceRequest
	68,  // 109: scdpb.UTMAPIUSSDSSAndUSSUSSService.UpdateSubscription:input_type -> scdpb.UpdateSubscriptionRequest
	3,   // 110: scdpb.UTMAPIUSSDSSAndUSSUSSService.CreateConstraintReference:output_type -> scdpb.ChangeConstraintReferenceResponse
	4,   // 111: scdpb.UTMAPIUSSDSSAndUSSUSSService.CreateOperationalIntentReference:output_type -> scdpb.ChangeOperationalIntentReferenceResponse
	48,  // 112: scdpb.UTMAPIUSSDSSAndUSSUSSService.CreateSubscription:output_type -> scdpb.PutSubscriptionResponse
	3,   // 113: scdpb.UTMAPIUSSDSSAndUSSUSSService.DeleteConstraintReference:output_type -> scdpb.ChangeConstraintReferenceResponse
	4,   // 114: scdpb.UTMAPIUSSDSSAndUSSUSSService.DeleteOperationalIntentReference:output_type -> scdpb.ChangeOperationalIntentReferenceResponse
	16,  // 115: scdpb.UTMAPIUSSDSSAndUSSUSSService.DeleteSubscription:output_type -> scdpb.DeleteSubscriptionResponse
	23,  // 116: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetConstraintReference:output_type -> scdpb.GetConstraintReferenceResponse
	26,  // 117: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetOperationalIntentReference:output_type -> scdpb.GetOperationalIntentReferenceResponse
	29,  // 118: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetSubscription:output_type -> scdpb.GetSubscriptionResponse
	72,  // 119: scdpb.UTMAPIUSSDSSAndUSSUSSService.GetUssAvailability:output_type -> scdpb.UssAvailabilityStatusResponse
	17,  // 120: scdpb.UTMAPIUSSDSSAndUSSUSSService.MakeDssReport:output_type -> scdpb.ErrorReport
	51,  // 121: scdpb.UTMAPIUSSDSSAndUSSUSSService.QueryConstraintReferences:output_type -> scdpb.QueryConstraintReferencesResponse
	53,  // 122: scdpb.UTMAPIUSSDSSAndUSSUSSService.QueryOperationalIntentReferences:output_type -> scdpb.QueryOperationalIntentReferenceResponse
	57,  // 123: scdpb.UTMAPIUSSDSSAndUSSUSSService.QuerySubscriptions:output_type -> scdpb.QuerySubscriptionsResponse
	72,  // 124: scdpb.UTMAPIUSSDSSAndUSSUSSService.SetUssAvailability:output_type -> scdpb.UssAvailabilityStatusResponse
	3,   // 125: scdpb.UTMAPIUSSDSSAndUSSUSSService.UpdateConstraintReference:output_type -> scdpb.ChangeConstraintReferenceResponse
	4,   // 126: scdpb.UTMAPIUSSDSSAndUSSUSSService.UpdateOperationalIntentReference:output_type -> scdpb.ChangeOperationalIntentReferenceResponse
	48,  // 127: scdpb.UTMAPIUSSDSSAndUSSUSSService.UpdateSubscription:output_type -> scdpb.PutSubscriptionResponse
	110, // [110:128] is the sub-list for method output_type
	92,  // [92:110] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_pkg_api_v1_scdpb_scd_proto_init() }
func file_pkg_api_v1_scdpb_scd_proto_init() {
	if File_pkg_api_v1_scdpb_scd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirspaceConflictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Altitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConstraintReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeOperationalIntentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintProviderAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstraintDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstraintReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationalIntentDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationalIntentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationalIntentTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUssAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplicitSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLngPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeDssReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalIntentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalIntentPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalIntentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanningRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConstraintDetailsParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConstraintReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOperationalIntentDetailsParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOperationalIntentReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConstraintReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConstraintReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConstraintReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperationalIntentReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperationalIntentReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOperationalIntentReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUssAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUssAvailabilityStatusParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberToNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*USSLogSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOperationalIntentReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInputRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNotificationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssAvailabilityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssAvailabilityStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Velocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume3D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume4D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_scdpb_scd_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoZone_AdditionalPropertiesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v1_scdpb_scd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_v1_scdpb_scd_proto_goTypes,
		DependencyIndexes: file_pkg_api_v1_scdpb_scd_proto_depIdxs,
		MessageInfos:      file_pkg_api_v1_scdpb_scd_proto_msgTypes,
	}.Build()
	File_pkg_api_v1_scdpb_scd_proto = out.File
	file_pkg_api_v1_scdpb_scd_proto_rawDesc = nil
	file_pkg_api_v1_scdpb_scd_proto_goTypes = nil
	file_pkg_api_v1_scdpb_scd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UTMAPIUSSDSSAndUSSUSSServiceClient is the client API for UTMAPIUSSDSSAndUSSUSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UTMAPIUSSDSSAndUSSUSSServiceClient interface {
	// Create the specified constraint reference in the DSS.
	CreateConstraintReference(ctx context.Context, in *CreateConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error)
	// Create the specified operational intent reference in the DSS.
	CreateOperationalIntentReference(ctx context.Context, in *CreateOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationalIntentReferenceResponse, error)
	// Create the specified subscription in the DSS.
	//
	// Create a subscription.
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
	// Delete the specified constraint reference from the DSS.
	DeleteConstraintReference(ctx context.Context, in *DeleteConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error)
	// Remove the specified operational intent reference from the DSS.
	DeleteOperationalIntentReference(ctx context.Context, in *DeleteOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationalIntentReferenceResponse, error)
	// Remove the specified subscription from the DSS.
	//
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to delete a subscription upon which an operational intent depends, the deletion will be rejected by the DSS as a bad request.
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	// Retrieve the specified constraint reference from the DSS.
	GetConstraintReference(ctx context.Context, in *GetConstraintReferenceRequest, opts ...grpc.CallOption) (*GetConstraintReferenceResponse, error)
	// Retrieve the specified operational intent reference from the DSS.
	GetOperationalIntentReference(ctx context.Context, in *GetOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*GetOperationalIntentReferenceResponse, error)
	// Retrieve the specified subscription from the DSS.
	//
	// Retrieve a specific subscription.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// Get availability status of a USS.
	//
	// Get availability status of a USS.
	GetUssAvailability(ctx context.Context, in *GetUssAvailabilityRequest, opts ...grpc.CallOption) (*UssAvailabilityStatusResponse, error)
	// Report information about communication issues to a DSS.
	//
	// Report issues to a DSS. Data sent to this endpoint is archived.
	MakeDssReport(ctx context.Context, in *MakeDssReportRequest, opts ...grpc.CallOption) (*ErrorReport, error)
	// Query all constraint references in the specified area/volume from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body.
	QueryConstraintReferences(ctx context.Context, in *QueryConstraintReferencesRequest, opts ...grpc.CallOption) (*QueryConstraintReferencesResponse, error)
	// Query all operational intent references in the specified area/volume/time from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body.
	QueryOperationalIntentReferences(ctx context.Context, in *QueryOperationalIntentReferencesRequest, opts ...grpc.CallOption) (*QueryOperationalIntentReferenceResponse, error)
	// Query all subscriptions in the specified area/volume from the DSS.
	//
	// Query subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	// Note that this parameter is a JSON object (in the 'request-body'). Note that either or both of the 'altitude' and 'time' values may be omitted from this parameter.
	// Only subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing subscriptions in an area.
	QuerySubscriptions(ctx context.Context, in *QuerySubscriptionsRequest, opts ...grpc.CallOption) (*QuerySubscriptionsResponse, error)
	// Set availability status of a USS.
	//
	// Set availability status of a USS.
	SetUssAvailability(ctx context.Context, in *SetUssAvailabilityRequest, opts ...grpc.CallOption) (*UssAvailabilityStatusResponse, error)
	// Update the specified constraint reference in the DSS.
	UpdateConstraintReference(ctx context.Context, in *UpdateConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error)
	// Update the specified operational intent reference in the DSS.
	UpdateOperationalIntentReference(ctx context.Context, in *UpdateOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationalIntentReferenceResponse, error)
	// Update the specified subscription in the DSS.
	//
	// Update a subscription.
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to update a subscription upon which an operational intent depends, and this update would cause the operational intent to lose subscription coverage, the update will be rejected by the DSS as a bad request.
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
}

type uTMAPIUSSDSSAndUSSUSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUTMAPIUSSDSSAndUSSUSSServiceClient(cc grpc.ClientConnInterface) UTMAPIUSSDSSAndUSSUSSServiceClient {
	return &uTMAPIUSSDSSAndUSSUSSServiceClient{cc}
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) CreateConstraintReference(ctx context.Context, in *CreateConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error) {
	out := new(ChangeConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/CreateConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) CreateOperationalIntentReference(ctx context.Context, in *CreateOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationalIntentReferenceResponse, error) {
	out := new(ChangeOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/CreateOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) DeleteConstraintReference(ctx context.Context, in *DeleteConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error) {
	out := new(ChangeConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/DeleteConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) DeleteOperationalIntentReference(ctx context.Context, in *DeleteOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationalIntentReferenceResponse, error) {
	out := new(ChangeOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/DeleteOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetConstraintReference(ctx context.Context, in *GetConstraintReferenceRequest, opts ...grpc.CallOption) (*GetConstraintReferenceResponse, error) {
	out := new(GetConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetOperationalIntentReference(ctx context.Context, in *GetOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*GetOperationalIntentReferenceResponse, error) {
	out := new(GetOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetUssAvailability(ctx context.Context, in *GetUssAvailabilityRequest, opts ...grpc.CallOption) (*UssAvailabilityStatusResponse, error) {
	out := new(UssAvailabilityStatusResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetUssAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) MakeDssReport(ctx context.Context, in *MakeDssReportRequest, opts ...grpc.CallOption) (*ErrorReport, error) {
	out := new(ErrorReport)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/MakeDssReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) QueryConstraintReferences(ctx context.Context, in *QueryConstraintReferencesRequest, opts ...grpc.CallOption) (*QueryConstraintReferencesResponse, error) {
	out := new(QueryConstraintReferencesResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/QueryConstraintReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) QueryOperationalIntentReferences(ctx context.Context, in *QueryOperationalIntentReferencesRequest, opts ...grpc.CallOption) (*QueryOperationalIntentReferenceResponse, error) {
	out := new(QueryOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/QueryOperationalIntentReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) QuerySubscriptions(ctx context.Context, in *QuerySubscriptionsRequest, opts ...grpc.CallOption) (*QuerySubscriptionsResponse, error) {
	out := new(QuerySubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/QuerySubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) SetUssAvailability(ctx context.Context, in *SetUssAvailabilityRequest, opts ...grpc.CallOption) (*UssAvailabilityStatusResponse, error) {
	out := new(UssAvailabilityStatusResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/SetUssAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) UpdateConstraintReference(ctx context.Context, in *UpdateConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error) {
	out := new(ChangeConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/UpdateConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) UpdateOperationalIntentReference(ctx context.Context, in *UpdateOperationalIntentReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationalIntentReferenceResponse, error) {
	out := new(ChangeOperationalIntentReferenceResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/UpdateOperationalIntentReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/scdpb.UTMAPIUSSDSSAndUSSUSSService/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTMAPIUSSDSSAndUSSUSSServiceServer is the server API for UTMAPIUSSDSSAndUSSUSSService service.
type UTMAPIUSSDSSAndUSSUSSServiceServer interface {
	// Create the specified constraint reference in the DSS.
	CreateConstraintReference(context.Context, *CreateConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error)
	// Create the specified operational intent reference in the DSS.
	CreateOperationalIntentReference(context.Context, *CreateOperationalIntentReferenceRequest) (*ChangeOperationalIntentReferenceResponse, error)
	// Create the specified subscription in the DSS.
	//
	// Create a subscription.
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*PutSubscriptionResponse, error)
	// Delete the specified constraint reference from the DSS.
	DeleteConstraintReference(context.Context, *DeleteConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error)
	// Remove the specified operational intent reference from the DSS.
	DeleteOperationalIntentReference(context.Context, *DeleteOperationalIntentReferenceRequest) (*ChangeOperationalIntentReferenceResponse, error)
	// Remove the specified subscription from the DSS.
	//
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to delete a subscription upon which an operational intent depends, the deletion will be rejected by the DSS as a bad request.
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	// Retrieve the specified constraint reference from the DSS.
	GetConstraintReference(context.Context, *GetConstraintReferenceRequest) (*GetConstraintReferenceResponse, error)
	// Retrieve the specified operational intent reference from the DSS.
	GetOperationalIntentReference(context.Context, *GetOperationalIntentReferenceRequest) (*GetOperationalIntentReferenceResponse, error)
	// Retrieve the specified subscription from the DSS.
	//
	// Retrieve a specific subscription.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// Get availability status of a USS.
	//
	// Get availability status of a USS.
	GetUssAvailability(context.Context, *GetUssAvailabilityRequest) (*UssAvailabilityStatusResponse, error)
	// Report information about communication issues to a DSS.
	//
	// Report issues to a DSS. Data sent to this endpoint is archived.
	MakeDssReport(context.Context, *MakeDssReportRequest) (*ErrorReport, error)
	// Query all constraint references in the specified area/volume from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body.
	QueryConstraintReferences(context.Context, *QueryConstraintReferencesRequest) (*QueryConstraintReferencesResponse, error)
	// Query all operational intent references in the specified area/volume/time from the DSS.
	//
	// Note that this endpoint does not produce any mutations in the DSS despite using the HTTP POST verb.  The HTTP GET verb is traditionally used for operations like this one, but requiring or using a request body for HTTP GET requests is non-standard and not supported by some architectures.  POST is used here instead of GET to ensure robust support for the use of a request body.
	QueryOperationalIntentReferences(context.Context, *QueryOperationalIntentReferencesRequest) (*QueryOperationalIntentReferenceResponse, error)
	// Query all subscriptions in the specified area/volume from the DSS.
	//
	// Query subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	// Note that this parameter is a JSON object (in the 'request-body'). Note that either or both of the 'altitude' and 'time' values may be omitted from this parameter.
	// Only subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing subscriptions in an area.
	QuerySubscriptions(context.Context, *QuerySubscriptionsRequest) (*QuerySubscriptionsResponse, error)
	// Set availability status of a USS.
	//
	// Set availability status of a USS.
	SetUssAvailability(context.Context, *SetUssAvailabilityRequest) (*UssAvailabilityStatusResponse, error)
	// Update the specified constraint reference in the DSS.
	UpdateConstraintReference(context.Context, *UpdateConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error)
	// Update the specified operational intent reference in the DSS.
	UpdateOperationalIntentReference(context.Context, *UpdateOperationalIntentReferenceRequest) (*ChangeOperationalIntentReferenceResponse, error)
	// Update the specified subscription in the DSS.
	//
	// Update a subscription.
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	// The standard requires each operational intent to have a subscription that cover the 4D volume of the operational intent.  If a USS attempts to update a subscription upon which an operational intent depends, and this update would cause the operational intent to lose subscription coverage, the update will be rejected by the DSS as a bad request.
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*PutSubscriptionResponse, error)
}

// UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer struct {
}

func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) CreateConstraintReference(context.Context, *CreateConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) CreateOperationalIntentReference(context.Context, *CreateOperationalIntentReferenceRequest) (*ChangeOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) DeleteConstraintReference(context.Context, *DeleteConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) DeleteOperationalIntentReference(context.Context, *DeleteOperationalIntentReferenceRequest) (*ChangeOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetConstraintReference(context.Context, *GetConstraintReferenceRequest) (*GetConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetOperationalIntentReference(context.Context, *GetOperationalIntentReferenceRequest) (*GetOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetUssAvailability(context.Context, *GetUssAvailabilityRequest) (*UssAvailabilityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUssAvailability not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) MakeDssReport(context.Context, *MakeDssReportRequest) (*ErrorReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDssReport not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) QueryConstraintReferences(context.Context, *QueryConstraintReferencesRequest) (*QueryConstraintReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConstraintReferences not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) QueryOperationalIntentReferences(context.Context, *QueryOperationalIntentReferencesRequest) (*QueryOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperationalIntentReferences not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) QuerySubscriptions(context.Context, *QuerySubscriptionsRequest) (*QuerySubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubscriptions not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) SetUssAvailability(context.Context, *SetUssAvailabilityRequest) (*UssAvailabilityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUssAvailability not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) UpdateConstraintReference(context.Context, *UpdateConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) UpdateOperationalIntentReference(context.Context, *UpdateOperationalIntentReferenceRequest) (*ChangeOperationalIntentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperationalIntentReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}

func RegisterUTMAPIUSSDSSAndUSSUSSServiceServer(s *grpc.Server, srv UTMAPIUSSDSSAndUSSUSSServiceServer) {
	s.RegisterService(&_UTMAPIUSSDSSAndUSSUSSService_serviceDesc, srv)
}

func _UTMAPIUSSDSSAndUSSUSSService_CreateConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).CreateConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/CreateConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).CreateConstraintReference(ctx, req.(*CreateConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_CreateOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).CreateOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/CreateOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).CreateOperationalIntentReference(ctx, req.(*CreateOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_DeleteConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/DeleteConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteConstraintReference(ctx, req.(*DeleteConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_DeleteOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/DeleteOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteOperationalIntentReference(ctx, req.(*DeleteOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetConstraintReference(ctx, req.(*GetConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetOperationalIntentReference(ctx, req.(*GetOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetUssAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUssAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetUssAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/GetUssAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetUssAvailability(ctx, req.(*GetUssAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_MakeDssReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDssReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).MakeDssReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/MakeDssReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).MakeDssReport(ctx, req.(*MakeDssReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_QueryConstraintReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConstraintReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QueryConstraintReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/QueryConstraintReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QueryConstraintReferences(ctx, req.(*QueryConstraintReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_QueryOperationalIntentReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperationalIntentReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QueryOperationalIntentReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/QueryOperationalIntentReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QueryOperationalIntentReferences(ctx, req.(*QueryOperationalIntentReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_QuerySubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QuerySubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/QuerySubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QuerySubscriptions(ctx, req.(*QuerySubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_SetUssAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUssAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).SetUssAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/SetUssAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).SetUssAvailability(ctx, req.(*SetUssAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_UpdateConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).UpdateConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/UpdateConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).UpdateConstraintReference(ctx, req.(*UpdateConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_UpdateOperationalIntentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperationalIntentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).UpdateOperationalIntentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/UpdateOperationalIntentReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).UpdateOperationalIntentReference(ctx, req.(*UpdateOperationalIntentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scdpb.UTMAPIUSSDSSAndUSSUSSService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UTMAPIUSSDSSAndUSSUSSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scdpb.UTMAPIUSSDSSAndUSSUSSService",
	HandlerType: (*UTMAPIUSSDSSAndUSSUSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_CreateConstraintReference_Handler,
		},
		{
			MethodName: "CreateOperationalIntentReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_CreateOperationalIntentReference_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_CreateSubscription_Handler,
		},
		{
			MethodName: "DeleteConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_DeleteConstraintReference_Handler,
		},
		{
			MethodName: "DeleteOperationalIntentReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_DeleteOperationalIntentReference_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetConstraintReference_Handler,
		},
		{
			MethodName: "GetOperationalIntentReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetOperationalIntentReference_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetSubscription_Handler,
		},
		{
			MethodName: "GetUssAvailability",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetUssAvailability_Handler,
		},
		{
			MethodName: "MakeDssReport",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_MakeDssReport_Handler,
		},
		{
			MethodName: "QueryConstraintReferences",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_QueryConstraintReferences_Handler,
		},
		{
			MethodName: "QueryOperationalIntentReferences",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_QueryOperationalIntentReferences_Handler,
		},
		{
			MethodName: "QuerySubscriptions",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_QuerySubscriptions_Handler,
		},
		{
			MethodName: "SetUssAvailability",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_SetUssAvailability_Handler,
		},
		{
			MethodName: "UpdateConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_UpdateConstraintReference_Handler,
		},
		{
			MethodName: "UpdateOperationalIntentReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_UpdateOperationalIntentReference_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_UpdateSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/scdpb/scd.proto",
}
