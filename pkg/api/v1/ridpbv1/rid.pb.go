// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: pkg/api/v1/ridpbv1/rid.proto

package ridpbv1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HorizontalAccuracy int32

const (
	HorizontalAccuracy_HA_UNKNOWN    HorizontalAccuracy = 0
	HorizontalAccuracy_H_A10_NM_PLUS HorizontalAccuracy = 1
	HorizontalAccuracy_H_A10_NM      HorizontalAccuracy = 2
	HorizontalAccuracy_H_A4_NM       HorizontalAccuracy = 3
	HorizontalAccuracy_H_A2_NM       HorizontalAccuracy = 4
	HorizontalAccuracy_H_A1_NM       HorizontalAccuracy = 5
	HorizontalAccuracy_H_A05_NM      HorizontalAccuracy = 6
	HorizontalAccuracy_H_A03_NM      HorizontalAccuracy = 7
	HorizontalAccuracy_H_A01_NM      HorizontalAccuracy = 8
	HorizontalAccuracy_H_A005_NM     HorizontalAccuracy = 9
	HorizontalAccuracy_H_A30M        HorizontalAccuracy = 10
	HorizontalAccuracy_H_A10M        HorizontalAccuracy = 11
	HorizontalAccuracy_H_A3M         HorizontalAccuracy = 12
	HorizontalAccuracy_H_A1M         HorizontalAccuracy = 13
)

// Enum value maps for HorizontalAccuracy.
var (
	HorizontalAccuracy_name = map[int32]string{
		0:  "HA_UNKNOWN",
		1:  "H_A10_NM_PLUS",
		2:  "H_A10_NM",
		3:  "H_A4_NM",
		4:  "H_A2_NM",
		5:  "H_A1_NM",
		6:  "H_A05_NM",
		7:  "H_A03_NM",
		8:  "H_A01_NM",
		9:  "H_A005_NM",
		10: "H_A30M",
		11: "H_A10M",
		12: "H_A3M",
		13: "H_A1M",
	}
	HorizontalAccuracy_value = map[string]int32{
		"HA_UNKNOWN":    0,
		"H_A10_NM_PLUS": 1,
		"H_A10_NM":      2,
		"H_A4_NM":       3,
		"H_A2_NM":       4,
		"H_A1_NM":       5,
		"H_A05_NM":      6,
		"H_A03_NM":      7,
		"H_A01_NM":      8,
		"H_A005_NM":     9,
		"H_A30M":        10,
		"H_A10M":        11,
		"H_A3M":         12,
		"H_A1M":         13,
	}
)

func (x HorizontalAccuracy) Enum() *HorizontalAccuracy {
	p := new(HorizontalAccuracy)
	*p = x
	return p
}

func (x HorizontalAccuracy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HorizontalAccuracy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[0].Descriptor()
}

func (HorizontalAccuracy) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[0]
}

func (x HorizontalAccuracy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HorizontalAccuracy.Descriptor instead.
func (HorizontalAccuracy) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{0}
}

type RIDAircraftType int32

const (
	RIDAircraftType_NOT_DECLARED              RIDAircraftType = 0
	RIDAircraftType_AEROPLANE                 RIDAircraftType = 1
	RIDAircraftType_HELICOPTER                RIDAircraftType = 2
	RIDAircraftType_GYROPLANE                 RIDAircraftType = 3
	RIDAircraftType_VTOL                      RIDAircraftType = 4
	RIDAircraftType_ORNITHOPTER               RIDAircraftType = 5
	RIDAircraftType_GLIDER                    RIDAircraftType = 6
	RIDAircraftType_KITE                      RIDAircraftType = 7
	RIDAircraftType_FREE_BALLOON              RIDAircraftType = 8
	RIDAircraftType_CAPTIVE_BALLOON           RIDAircraftType = 9
	RIDAircraftType_AIRSHIP                   RIDAircraftType = 10
	RIDAircraftType_FREE_FALL_OR_PARACHUTE    RIDAircraftType = 11
	RIDAircraftType_ROCKET                    RIDAircraftType = 12
	RIDAircraftType_TETHERED_POWERED_AIRCRAFT RIDAircraftType = 13
	RIDAircraftType_GROUND_OBSTACLE           RIDAircraftType = 14
	RIDAircraftType_OTHER                     RIDAircraftType = 15
)

// Enum value maps for RIDAircraftType.
var (
	RIDAircraftType_name = map[int32]string{
		0:  "NOT_DECLARED",
		1:  "AEROPLANE",
		2:  "HELICOPTER",
		3:  "GYROPLANE",
		4:  "VTOL",
		5:  "ORNITHOPTER",
		6:  "GLIDER",
		7:  "KITE",
		8:  "FREE_BALLOON",
		9:  "CAPTIVE_BALLOON",
		10: "AIRSHIP",
		11: "FREE_FALL_OR_PARACHUTE",
		12: "ROCKET",
		13: "TETHERED_POWERED_AIRCRAFT",
		14: "GROUND_OBSTACLE",
		15: "OTHER",
	}
	RIDAircraftType_value = map[string]int32{
		"NOT_DECLARED":              0,
		"AEROPLANE":                 1,
		"HELICOPTER":                2,
		"GYROPLANE":                 3,
		"VTOL":                      4,
		"ORNITHOPTER":               5,
		"GLIDER":                    6,
		"KITE":                      7,
		"FREE_BALLOON":              8,
		"CAPTIVE_BALLOON":           9,
		"AIRSHIP":                   10,
		"FREE_FALL_OR_PARACHUTE":    11,
		"ROCKET":                    12,
		"TETHERED_POWERED_AIRCRAFT": 13,
		"GROUND_OBSTACLE":           14,
		"OTHER":                     15,
	}
)

func (x RIDAircraftType) Enum() *RIDAircraftType {
	p := new(RIDAircraftType)
	*p = x
	return p
}

func (x RIDAircraftType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RIDAircraftType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[1].Descriptor()
}

func (RIDAircraftType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[1]
}

func (x RIDAircraftType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RIDAircraftType.Descriptor instead.
func (RIDAircraftType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{1}
}

type RIDOperationalStatus int32

const (
	RIDOperationalStatus_UNDECLARED RIDOperationalStatus = 0
	RIDOperationalStatus_GROUND     RIDOperationalStatus = 1
	RIDOperationalStatus_AIRBORNE   RIDOperationalStatus = 2
)

// Enum value maps for RIDOperationalStatus.
var (
	RIDOperationalStatus_name = map[int32]string{
		0: "UNDECLARED",
		1: "GROUND",
		2: "AIRBORNE",
	}
	RIDOperationalStatus_value = map[string]int32{
		"UNDECLARED": 0,
		"GROUND":     1,
		"AIRBORNE":   2,
	}
)

func (x RIDOperationalStatus) Enum() *RIDOperationalStatus {
	p := new(RIDOperationalStatus)
	*p = x
	return p
}

func (x RIDOperationalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RIDOperationalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[2].Descriptor()
}

func (RIDOperationalStatus) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[2]
}

func (x RIDOperationalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RIDOperationalStatus.Descriptor instead.
func (RIDOperationalStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{2}
}

type SpeedAccuracy int32

const (
	SpeedAccuracy_SA_UNKNOWN    SpeedAccuracy = 0
	SpeedAccuracy_S_A10MPS_PLUS SpeedAccuracy = 1
	SpeedAccuracy_S_A10MPS      SpeedAccuracy = 2
	SpeedAccuracy_S_A3MPS       SpeedAccuracy = 3
	SpeedAccuracy_S_A1MPS       SpeedAccuracy = 4
	SpeedAccuracy_S_A03MPS      SpeedAccuracy = 5
)

// Enum value maps for SpeedAccuracy.
var (
	SpeedAccuracy_name = map[int32]string{
		0: "SA_UNKNOWN",
		1: "S_A10MPS_PLUS",
		2: "S_A10MPS",
		3: "S_A3MPS",
		4: "S_A1MPS",
		5: "S_A03MPS",
	}
	SpeedAccuracy_value = map[string]int32{
		"SA_UNKNOWN":    0,
		"S_A10MPS_PLUS": 1,
		"S_A10MPS":      2,
		"S_A3MPS":       3,
		"S_A1MPS":       4,
		"S_A03MPS":      5,
	}
)

func (x SpeedAccuracy) Enum() *SpeedAccuracy {
	p := new(SpeedAccuracy)
	*p = x
	return p
}

func (x SpeedAccuracy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedAccuracy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[3].Descriptor()
}

func (SpeedAccuracy) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[3]
}

func (x SpeedAccuracy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedAccuracy.Descriptor instead.
func (SpeedAccuracy) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{3}
}

type VerticalAccuracy int32

const (
	VerticalAccuracy_VA_UNKNOWN   VerticalAccuracy = 0
	VerticalAccuracy_V_A150M_PLUS VerticalAccuracy = 1
	VerticalAccuracy_V_A150M      VerticalAccuracy = 2
	VerticalAccuracy_V_A45M       VerticalAccuracy = 3
	VerticalAccuracy_V_A25M       VerticalAccuracy = 4
	VerticalAccuracy_V_A10M       VerticalAccuracy = 5
	VerticalAccuracy_V_A3M        VerticalAccuracy = 6
	VerticalAccuracy_V_A1M        VerticalAccuracy = 7
)

// Enum value maps for VerticalAccuracy.
var (
	VerticalAccuracy_name = map[int32]string{
		0: "VA_UNKNOWN",
		1: "V_A150M_PLUS",
		2: "V_A150M",
		3: "V_A45M",
		4: "V_A25M",
		5: "V_A10M",
		6: "V_A3M",
		7: "V_A1M",
	}
	VerticalAccuracy_value = map[string]int32{
		"VA_UNKNOWN":   0,
		"V_A150M_PLUS": 1,
		"V_A150M":      2,
		"V_A45M":       3,
		"V_A25M":       4,
		"V_A10M":       5,
		"V_A3M":        6,
		"V_A1M":        7,
	}
)

func (x VerticalAccuracy) Enum() *VerticalAccuracy {
	p := new(VerticalAccuracy)
	*p = x
	return p
}

func (x VerticalAccuracy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerticalAccuracy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[4].Descriptor()
}

func (VerticalAccuracy) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[4]
}

func (x VerticalAccuracy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerticalAccuracy.Descriptor instead.
func (VerticalAccuracy) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{4}
}

type RIDHeight_RIDHeightReference int32

const (
	RIDHeight_RID_HEIGHT_REFERENCE_TAKEOFF_LOCATION RIDHeight_RIDHeightReference = 0
	RIDHeight_RID_HEIGHT_REFERENCE_GROUND_LEVEL     RIDHeight_RIDHeightReference = 1
)

// Enum value maps for RIDHeight_RIDHeightReference.
var (
	RIDHeight_RIDHeightReference_name = map[int32]string{
		0: "RID_HEIGHT_REFERENCE_TAKEOFF_LOCATION",
		1: "RID_HEIGHT_REFERENCE_GROUND_LEVEL",
	}
	RIDHeight_RIDHeightReference_value = map[string]int32{
		"RID_HEIGHT_REFERENCE_TAKEOFF_LOCATION": 0,
		"RID_HEIGHT_REFERENCE_GROUND_LEVEL":     1,
	}
)

func (x RIDHeight_RIDHeightReference) Enum() *RIDHeight_RIDHeightReference {
	p := new(RIDHeight_RIDHeightReference)
	*p = x
	return p
}

func (x RIDHeight_RIDHeightReference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RIDHeight_RIDHeightReference) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[5].Descriptor()
}

func (RIDHeight_RIDHeightReference) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_ridpbv1_rid_proto_enumTypes[5]
}

func (x RIDHeight_RIDHeightReference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RIDHeight_RIDHeightReference.Descriptor instead.
func (RIDHeight_RIDHeightReference) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{26, 0}
}

// Parameters for a request to create an Identification Service Area in the DSS.
type CreateIdentificationServiceAreaParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bounding spacetime extents of this Identification Service Area.  End time must be specified.  If start time is not specified, it will be set to the current time.  Start times in the past should be rejected by the DSS, except that it may adjust very recent start times to the current time.
	//
	// These extents should not reveal any sensitive information about the flight or flights within them.  This means, for instance, that extents should not tightly-wrap a flight path, nor should they generally be centered around the takeoff point of a single flight.
	Extents    *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	FlightsUrl string    `protobuf:"bytes,2,opt,name=flights_url,json=flightsUrl,proto3" json:"flights_url,omitempty"`
}

func (x *CreateIdentificationServiceAreaParameters) Reset() {
	*x = CreateIdentificationServiceAreaParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdentificationServiceAreaParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentificationServiceAreaParameters) ProtoMessage() {}

func (x *CreateIdentificationServiceAreaParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentificationServiceAreaParameters.ProtoReflect.Descriptor instead.
func (*CreateIdentificationServiceAreaParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIdentificationServiceAreaParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *CreateIdentificationServiceAreaParameters) GetFlightsUrl() string {
	if x != nil {
		return x.FlightsUrl
	}
	return ""
}

type CreateIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *CreateIdentificationServiceAreaParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateIdentificationServiceAreaRequest) Reset() {
	*x = CreateIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *CreateIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*CreateIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateIdentificationServiceAreaRequest) GetParams() *CreateIdentificationServiceAreaParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to create a subscription in the DSS.
type CreateSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callbacks *SubscriptionCallbacks `protobuf:"bytes,1,opt,name=callbacks,proto3" json:"callbacks,omitempty"`
	// The spacetime extents of the volume to subscribe to.
	//
	// This subscription will automatically be deleted after its end time if it has not been refreshed by then.  If end time is not specified, the value will be chosen automatically by the DSS.
	//
	// Note that some Entities triggering notifications may lie entirely outside the requested area.
	Extents *Volume4D `protobuf:"bytes,2,opt,name=extents,proto3" json:"extents,omitempty"`
}

func (x *CreateSubscriptionParameters) Reset() {
	*x = CreateSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionParameters) ProtoMessage() {}

func (x *CreateSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSubscriptionParameters) GetCallbacks() *SubscriptionCallbacks {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *CreateSubscriptionParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

type CreateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *CreateSubscriptionParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateSubscriptionRequest) Reset() {
	*x = CreateSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionRequest) ProtoMessage() {}

func (x *CreateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateSubscriptionRequest) GetParams() *CreateSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type DeleteIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version string used to reference an Identification Service Area at a particular point in time. Any updates to an existing Identification Service Area must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteIdentificationServiceAreaRequest) Reset() {
	*x = DeleteIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *DeleteIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*DeleteIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteIdentificationServiceAreaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Response for a request to delete an Identification Service Area.
type DeleteIdentificationServiceAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indentification Service Area that was just deleted.
	ServiceArea *IdentificationServiceArea `protobuf:"bytes,1,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the Identification Service Area just deleted.  This client must call POST for each provided URL according to the `/uss/identification_service_areas` path API.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *DeleteIdentificationServiceAreaResponse) Reset() {
	*x = DeleteIdentificationServiceAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIdentificationServiceAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentificationServiceAreaResponse) ProtoMessage() {}

func (x *DeleteIdentificationServiceAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentificationServiceAreaResponse.ProtoReflect.Descriptor instead.
func (*DeleteIdentificationServiceAreaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteIdentificationServiceAreaResponse) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

func (x *DeleteIdentificationServiceAreaResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version string used to reference a Subscription at a particular point in time. Any updates to an existing Subscription must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Response for a successful request to delete an Subscription.
type DeleteSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Subscription which was deleted.
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *DeleteSubscriptionResponse) Reset() {
	*x = DeleteSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionResponse) ProtoMessage() {}

func (x *DeleteSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Data provided when an off-nominal condition was encountered.
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable message indicating what error occurred and/or why.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// An enclosed area on the earth.
// The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
// The winding order shall be interpreted as the order which produces the smaller area.
// The path between two vertices shall be the shortest possible path between those vertices.
// Edges may not cross.
// Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
type GeoPolygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertices []*LatLngPoint `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *GeoPolygon) Reset() {
	*x = GeoPolygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPolygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPolygon) ProtoMessage() {}

func (x *GeoPolygon) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPolygon.ProtoReflect.Descriptor instead.
func (*GeoPolygon) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{9}
}

func (x *GeoPolygon) GetVertices() []*LatLngPoint {
	if x != nil {
		return x.Vertices
	}
	return nil
}

// Response to remote ID provider query for details about a specific flight.
type GetFlightDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *RIDFlightDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetFlightDetailsResponse) Reset() {
	*x = GetFlightDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlightDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlightDetailsResponse) ProtoMessage() {}

func (x *GetFlightDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlightDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetFlightDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{10}
}

func (x *GetFlightDetailsResponse) GetDetails() *RIDFlightDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Response to remote ID provider query for flight information in an area of interest.
type GetFlightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of all flights that have been within the requested area within the remote ID retention period.  This includes flights that are not currently within the requested area, but were within the requested area within the remote ID retention period.
	Flights []*RIDFlight `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
	// The remote ID service provider's timestamp for when this information was current.  RFC 3339 format, per OpenAPI specification.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetFlightsResponse) Reset() {
	*x = GetFlightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlightsResponse) ProtoMessage() {}

func (x *GetFlightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlightsResponse.ProtoReflect.Descriptor instead.
func (*GetFlightsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{11}
}

func (x *GetFlightsResponse) GetFlights() []*RIDFlight {
	if x != nil {
		return x.Flights
	}
	return nil
}

func (x *GetFlightsResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GetIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIdentificationServiceAreaRequest) Reset() {
	*x = GetIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *GetIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*GetIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{12}
}

func (x *GetIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to DSS request for the identification service area with the given id.
type GetIdentificationServiceAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceArea *IdentificationServiceArea `protobuf:"bytes,1,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
}

func (x *GetIdentificationServiceAreaResponse) Reset() {
	*x = GetIdentificationServiceAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentificationServiceAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentificationServiceAreaResponse) ProtoMessage() {}

func (x *GetIdentificationServiceAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentificationServiceAreaResponse.ProtoReflect.Descriptor instead.
func (*GetIdentificationServiceAreaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{13}
}

func (x *GetIdentificationServiceAreaResponse) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to DSS request for the subscription with the given id.
type GetSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{15}
}

func (x *GetSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// An Identification Service Area (area in which remote ID services are being provided).  The DSS reports only these declarations and clients must exchange flight information peer-to-peer.
type IdentificationServiceArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightsUrl string `protobuf:"bytes,1,opt,name=flights_url,json=flightsUrl,proto3" json:"flights_url,omitempty"`
	// Unique identifier for this Identification Service Area.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Assigned by the DSS based on creating client’s ID (via access token).  Used for restricting mutation and deletion operations to owner.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// End time of service.  RFC 3339 format, per OpenAPI specification.
	TimeEnd *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of service.  RFC 3339 format, per OpenAPI specification.
	TimeStart *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	Version   string               `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *IdentificationServiceArea) Reset() {
	*x = IdentificationServiceArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentificationServiceArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationServiceArea) ProtoMessage() {}

func (x *IdentificationServiceArea) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationServiceArea.ProtoReflect.Descriptor instead.
func (*IdentificationServiceArea) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{16}
}

func (x *IdentificationServiceArea) GetFlightsUrl() string {
	if x != nil {
		return x.FlightsUrl
	}
	return ""
}

func (x *IdentificationServiceArea) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdentificationServiceArea) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IdentificationServiceArea) GetTimeEnd() *timestamp.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *IdentificationServiceArea) GetTimeStart() *timestamp.Timestamp {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *IdentificationServiceArea) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Point on the earth's surface.
type LatLngPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *LatLngPoint) Reset() {
	*x = LatLngPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLngPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLngPoint) ProtoMessage() {}

func (x *LatLngPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLngPoint.ProtoReflect.Descriptor instead.
func (*LatLngPoint) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{17}
}

func (x *LatLngPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *LatLngPoint) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

// Parameters of a message informing of new full information for an Identification Service Area.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
type PutIdentificationServiceAreaNotificationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new or updated extents of the Identification Service Area.
	//
	// Omitted if Identification Service Area was deleted.
	Extents *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	// Identification Service Area that the notifying client changed or created.
	//
	// If this field is populated, the Identification Service Area was created or updated.  If this field is not populated, the Identification Service Area was deleted.
	ServiceArea *IdentificationServiceArea `protobuf:"bytes,2,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *PutIdentificationServiceAreaNotificationParameters) Reset() {
	*x = PutIdentificationServiceAreaNotificationParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutIdentificationServiceAreaNotificationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutIdentificationServiceAreaNotificationParameters) ProtoMessage() {}

func (x *PutIdentificationServiceAreaNotificationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutIdentificationServiceAreaNotificationParameters.ProtoReflect.Descriptor instead.
func (*PutIdentificationServiceAreaNotificationParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{18}
}

func (x *PutIdentificationServiceAreaNotificationParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutIdentificationServiceAreaNotificationParameters) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

func (x *PutIdentificationServiceAreaNotificationParameters) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Response to a request to create or update a reference to an Identification Service Area in the DSS.
type PutIdentificationServiceAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting service area stored in DSS.
	ServiceArea *IdentificationServiceArea `protobuf:"bytes,1,opt,name=service_area,json=serviceArea,proto3" json:"service_area,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the Identification Service Area changes just made.  This client must call POST for each provided URL according to the `/uss/identification_service_areas/{id}` path API.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *PutIdentificationServiceAreaResponse) Reset() {
	*x = PutIdentificationServiceAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutIdentificationServiceAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutIdentificationServiceAreaResponse) ProtoMessage() {}

func (x *PutIdentificationServiceAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutIdentificationServiceAreaResponse.ProtoReflect.Descriptor instead.
func (*PutIdentificationServiceAreaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{19}
}

func (x *PutIdentificationServiceAreaResponse) GetServiceArea() *IdentificationServiceArea {
	if x != nil {
		return x.ServiceArea
	}
	return nil
}

func (x *PutIdentificationServiceAreaResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// Response for a request to create or update a subscription.
type PutSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identification Service Areas in or near the subscription area at the time of creation/update, if `identification_service_area_url` callback was specified.
	ServiceAreas []*IdentificationServiceArea `protobuf:"bytes,1,rep,name=service_areas,json=serviceAreas,proto3" json:"service_areas,omitempty"`
	// Result of the operation on the subscription.
	Subscription *Subscription `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *PutSubscriptionResponse) Reset() {
	*x = PutSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionResponse) ProtoMessage() {}

func (x *PutSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*PutSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{20}
}

func (x *PutSubscriptionResponse) GetServiceAreas() []*IdentificationServiceArea {
	if x != nil {
		return x.ServiceAreas
	}
	return nil
}

func (x *PutSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Position of an aircraft as reported for remote ID purposes.
type RIDAircraftPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Horizontal error that is likely to be present in this reported position.  Required when `extrapolated` field is true and always in the entry for the current state.
	AccuracyH HorizontalAccuracy `protobuf:"varint,1,opt,name=accuracy_h,json=accuracyH,proto3,enum=ridpbv1.HorizontalAccuracy" json:"accuracy_h,omitempty"`
	// Vertical error that is likely to be present in this reported position.  Required when `extrapolated` field is true and always in the entry for the current state.
	AccuracyV VerticalAccuracy `protobuf:"varint,2,opt,name=accuracy_v,json=accuracyV,proto3,enum=ridpbv1.VerticalAccuracy" json:"accuracy_v,omitempty"`
	// Geodetic altitude (NOT altitude above launch, altitude above ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured along a line that passes through the aircraft and is normal to the surface of the WGS84 ellipsoid.  This value is provided in meters and must have a minimum resolution of 1 meter.
	Alt float32 `protobuf:"fixed32,3,opt,name=alt,proto3" json:"alt,omitempty"`
	// True if this position was generated primarily by computation rather than primarily from a direct instrument measurement.  Assumed false if not specified.
	Extrapolated bool    `protobuf:"varint,4,opt,name=extrapolated,proto3" json:"extrapolated,omitempty"`
	Lat          float64 `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng          float64 `protobuf:"fixed64,6,opt,name=lng,proto3" json:"lng,omitempty"`
	// The uncorrected altitude (based on reference standard 29.92 inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude deltas" between aircraft.  This value is provided in meters and must have a minimum resolution of 1 meter.
	PressureAltitude float32 `protobuf:"fixed32,7,opt,name=pressure_altitude,json=pressureAltitude,proto3" json:"pressure_altitude,omitempty"`
}

func (x *RIDAircraftPosition) Reset() {
	*x = RIDAircraftPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDAircraftPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDAircraftPosition) ProtoMessage() {}

func (x *RIDAircraftPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDAircraftPosition.ProtoReflect.Descriptor instead.
func (*RIDAircraftPosition) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{21}
}

func (x *RIDAircraftPosition) GetAccuracyH() HorizontalAccuracy {
	if x != nil {
		return x.AccuracyH
	}
	return HorizontalAccuracy_HA_UNKNOWN
}

func (x *RIDAircraftPosition) GetAccuracyV() VerticalAccuracy {
	if x != nil {
		return x.AccuracyV
	}
	return VerticalAccuracy_VA_UNKNOWN
}

func (x *RIDAircraftPosition) GetAlt() float32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *RIDAircraftPosition) GetExtrapolated() bool {
	if x != nil {
		return x.Extrapolated
	}
	return false
}

func (x *RIDAircraftPosition) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *RIDAircraftPosition) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *RIDAircraftPosition) GetPressureAltitude() float32 {
	if x != nil {
		return x.PressureAltitude
	}
	return 0
}

// State of an aircraft for the purposes of remote ID.
type RIDAircraftState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum altitude (meters WGS84-HAE) of Group Operation.  This value contains the "Operating Area Ceiling" data from the common data dictionary when group operation area is specified by point-radius.
	GroupCeiling float32 `protobuf:"fixed32,1,opt,name=group_ceiling,json=groupCeiling,proto3" json:"group_ceiling,omitempty"`
	// When operating a group (or formation or swarm), number of aircraft in group.  This value contains the "Operating Area Count" data from the common data dictionary when group operation area is specified by point-radius.
	GroupCount int32 `protobuf:"varint,2,opt,name=group_count,json=groupCount,proto3" json:"group_count,omitempty"`
	// Minimum altitude (meters WGS84-HAE) of Group Operation.  If not specified, ground level shall be assumed.  This value contains the "Operating Area Floor" data from the common data dictionary when group operation area is specified by point-radius.
	GroupFloor float32 `protobuf:"fixed32,3,opt,name=group_floor,json=groupFloor,proto3" json:"group_floor,omitempty"`
	// Farthest horizontal distance from reported group location at which an aircraft in the group may be located (meters).  This value contains the "Operating Area Radius" data from the common data dictionary when group operation area is specified by point-radius.
	GroupRadius float32 `protobuf:"fixed32,4,opt,name=group_radius,json=groupRadius,proto3" json:"group_radius,omitempty"`
	// Time at which a group operation starts.  This value contains the "Operation Area End" data from the common data dictionary when group operation area is specified by point-radius.
	GroupTimeEnd *timestamp.Timestamp `protobuf:"bytes,5,opt,name=group_time_end,json=groupTimeEnd,proto3" json:"group_time_end,omitempty"`
	// Time at which a group operation starts.  This value contains the "Operation Area Start" data from the common data dictionary when group operation area is specified by point-radius.
	GroupTimeStart    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=group_time_start,json=groupTimeStart,proto3" json:"group_time_start,omitempty"`
	Height            *RIDHeight           `protobuf:"bytes,7,opt,name=height,proto3" json:"height,omitempty"`
	OperationalStatus RIDOperationalStatus `protobuf:"varint,8,opt,name=operational_status,json=operationalStatus,proto3,enum=ridpbv1.RIDOperationalStatus" json:"operational_status,omitempty"`
	Position          *RIDAircraftPosition `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
	// Ground speed of flight in meters per second.
	Speed float32 `protobuf:"fixed32,10,opt,name=speed,proto3" json:"speed,omitempty"`
	// Accuracy of horizontal ground speed.
	SpeedAccuracy SpeedAccuracy `protobuf:"varint,11,opt,name=speed_accuracy,json=speedAccuracy,proto3,enum=ridpbv1.SpeedAccuracy" json:"speed_accuracy,omitempty"`
	// Time at which this state was valid.  This may be the time coming from the source, such as a GPS, or the time when the system computes the values using an algorithm such as an Extended Kalman Filter (EKF).  Timestamp must be expressed with a minimum resolution of 1/10th of a second.  RFC 3339 format, per OpenAPI specification.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Declaration of timestamp accuracy, which is the largest difference between Timestamp and true time of applicability for any of the following fields: Latitude, Longitude, Geodetic Altitude, Pressure Altitude of Position, Height. to determine time of applicability of the location data provided.  Expressed in seconds, precise to 1/10ths of seconds. The accuracy reflects the 95% uncertainty bound value for the timestamp.
	TimestampAccuracy float32 `protobuf:"fixed32,13,opt,name=timestamp_accuracy,json=timestampAccuracy,proto3" json:"timestamp_accuracy,omitempty"`
	// Direction of flight expressed as a "True North-based" ground track angle.  This value is provided in degrees East of North with a minimum resolution of 1 degree.
	Track float32 `protobuf:"fixed32,14,opt,name=track,proto3" json:"track,omitempty"`
	// Speed up (vertically) WGS84-HAE, m/s.
	VerticalSpeed float32 `protobuf:"fixed32,15,opt,name=vertical_speed,json=verticalSpeed,proto3" json:"vertical_speed,omitempty"`
}

func (x *RIDAircraftState) Reset() {
	*x = RIDAircraftState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDAircraftState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDAircraftState) ProtoMessage() {}

func (x *RIDAircraftState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDAircraftState.ProtoReflect.Descriptor instead.
func (*RIDAircraftState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{22}
}

func (x *RIDAircraftState) GetGroupCeiling() float32 {
	if x != nil {
		return x.GroupCeiling
	}
	return 0
}

func (x *RIDAircraftState) GetGroupCount() int32 {
	if x != nil {
		return x.GroupCount
	}
	return 0
}

func (x *RIDAircraftState) GetGroupFloor() float32 {
	if x != nil {
		return x.GroupFloor
	}
	return 0
}

func (x *RIDAircraftState) GetGroupRadius() float32 {
	if x != nil {
		return x.GroupRadius
	}
	return 0
}

func (x *RIDAircraftState) GetGroupTimeEnd() *timestamp.Timestamp {
	if x != nil {
		return x.GroupTimeEnd
	}
	return nil
}

func (x *RIDAircraftState) GetGroupTimeStart() *timestamp.Timestamp {
	if x != nil {
		return x.GroupTimeStart
	}
	return nil
}

func (x *RIDAircraftState) GetHeight() *RIDHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *RIDAircraftState) GetOperationalStatus() RIDOperationalStatus {
	if x != nil {
		return x.OperationalStatus
	}
	return RIDOperationalStatus_UNDECLARED
}

func (x *RIDAircraftState) GetPosition() *RIDAircraftPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RIDAircraftState) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *RIDAircraftState) GetSpeedAccuracy() SpeedAccuracy {
	if x != nil {
		return x.SpeedAccuracy
	}
	return SpeedAccuracy_SA_UNKNOWN
}

func (x *RIDAircraftState) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RIDAircraftState) GetTimestampAccuracy() float32 {
	if x != nil {
		return x.TimestampAccuracy
	}
	return 0
}

func (x *RIDAircraftState) GetTrack() float32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *RIDAircraftState) GetVerticalSpeed() float32 {
	if x != nil {
		return x.VerticalSpeed
	}
	return 0
}

// Additional authentication data.
type RIDAuthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authentication data in form specified by `format`.
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Format of additional authentication data.
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *RIDAuthData) Reset() {
	*x = RIDAuthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDAuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDAuthData) ProtoMessage() {}

func (x *RIDAuthData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDAuthData.ProtoReflect.Descriptor instead.
func (*RIDAuthData) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{23}
}

func (x *RIDAuthData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RIDAuthData) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// Description of a remote ID flight.
type RIDFlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic type of aircraft.
	AircraftType RIDAircraftType `protobuf:"varint,1,opt,name=aircraft_type,json=aircraftType,proto3,enum=ridpbv1.RIDAircraftType" json:"aircraft_type,omitempty"`
	// The most up-to-date state of the aircraft.  Required when the aircraft is currently in the requested area unless `volumes` is specified.
	//
	// If current data is not being received from the UAS by the Service Provider, the lack of change in this field is sufficient to indicate that current data is not being received.
	CurrentState *RIDAircraftState `protobuf:"bytes,2,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	Id           string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// A short collection of recent aircraft movement, specified only when `include_recent_positions` is true.  If `volumes` is not specified and `include_recent_positions` is true, then this field is required.
	//
	// Recent positions provided in this field must conform to requirements in the standard which generally prohibit including positions outside the requested area except transitionally when the aircraft enters or exits the requested area, and which prohibit including positions that not sufficiently recent.
	//
	// Note that a UI should not draw a connective line between two consecutive position reports that both lie outside the requested area.
	RecentPositions []*RIDRecentAircraftPosition `protobuf:"bytes,4,rep,name=recent_positions,json=recentPositions,proto3" json:"recent_positions,omitempty"`
	// If specified as true, this flight is not a physical aircraft; it is just a simulation to test the system.
	Simulated bool `protobuf:"varint,5,opt,name=simulated,proto3" json:"simulated,omitempty"`
	// The set of spacetime volumes the aircraft is within.  Required if `current_state` is not specified.  The fields `time_start` and `time_end` are required if `current_state` is not specified.
	Volumes []*Volume4D `protobuf:"bytes,6,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *RIDFlight) Reset() {
	*x = RIDFlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDFlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDFlight) ProtoMessage() {}

func (x *RIDFlight) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDFlight.ProtoReflect.Descriptor instead.
func (*RIDFlight) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{24}
}

func (x *RIDFlight) GetAircraftType() RIDAircraftType {
	if x != nil {
		return x.AircraftType
	}
	return RIDAircraftType_NOT_DECLARED
}

func (x *RIDFlight) GetCurrentState() *RIDAircraftState {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *RIDFlight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RIDFlight) GetRecentPositions() []*RIDRecentAircraftPosition {
	if x != nil {
		return x.RecentPositions
	}
	return nil
}

func (x *RIDFlight) GetSimulated() bool {
	if x != nil {
		return x.Simulated
	}
	return false
}

func (x *RIDFlight) GetVolumes() []*Volume4D {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// Details about a flight reported by a remote ID service provider.  At least one of the registration or serial fields must be filled if required by CAA.
type RIDFlightDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData *RIDAuthData `protobuf:"bytes,1,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty"`
	// ID for this flight, matching argument in request.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Free-text field that enables the operator to describe the purpose of a flight, if so desired.
	OperationDescription string `protobuf:"bytes,3,opt,name=operation_description,json=operationDescription,proto3" json:"operation_description,omitempty"`
	// CAA-issued registration/license ID for the remote pilot or operator.
	OperatorId string `protobuf:"bytes,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Location of party controlling the aircraft.
	OperatorLocation *LatLngPoint `protobuf:"bytes,5,opt,name=operator_location,json=operatorLocation,proto3" json:"operator_location,omitempty"`
	// If a CAA provides a method of registering UAS, this number is provided by the CAA or its authorized representative.  Required when required by law in a region.
	RegistrationNumber string `protobuf:"bytes,6,opt,name=registration_number,json=registrationNumber,proto3" json:"registration_number,omitempty"`
	// Can be specified when no registration ID exists and required by law in a region. This is expressed in the ANSI/CTA-2063-A Physical Serial Number format.
	SerialNumber string `protobuf:"bytes,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *RIDFlightDetails) Reset() {
	*x = RIDFlightDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDFlightDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDFlightDetails) ProtoMessage() {}

func (x *RIDFlightDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDFlightDetails.ProtoReflect.Descriptor instead.
func (*RIDFlightDetails) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{25}
}

func (x *RIDFlightDetails) GetAuthData() *RIDAuthData {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *RIDFlightDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RIDFlightDetails) GetOperationDescription() string {
	if x != nil {
		return x.OperationDescription
	}
	return ""
}

func (x *RIDFlightDetails) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *RIDFlightDetails) GetOperatorLocation() *LatLngPoint {
	if x != nil {
		return x.OperatorLocation
	}
	return nil
}

func (x *RIDFlightDetails) GetRegistrationNumber() string {
	if x != nil {
		return x.RegistrationNumber
	}
	return ""
}

func (x *RIDFlightDetails) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

// A relative altitude for the purposes of remote ID.
type RIDHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Distance above reference datum.  This value is provided in meters and must have a minimum resolution of 1 meter.
	Distance float32 `protobuf:"fixed32,1,opt,name=distance,proto3" json:"distance,omitempty"`
	// The reference datum above which the height is reported.
	Reference RIDHeight_RIDHeightReference `protobuf:"varint,2,opt,name=reference,proto3,enum=ridpbv1.RIDHeight_RIDHeightReference" json:"reference,omitempty"`
}

func (x *RIDHeight) Reset() {
	*x = RIDHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDHeight) ProtoMessage() {}

func (x *RIDHeight) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDHeight.ProtoReflect.Descriptor instead.
func (*RIDHeight) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{26}
}

func (x *RIDHeight) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *RIDHeight) GetReference() RIDHeight_RIDHeightReference {
	if x != nil {
		return x.Reference
	}
	return RIDHeight_RID_HEIGHT_REFERENCE_TAKEOFF_LOCATION
}

type RIDRecentAircraftPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *RIDAircraftPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// Time at which this position applied.  RFC 3339 format, per OpenAPI specification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RIDRecentAircraftPosition) Reset() {
	*x = RIDRecentAircraftPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RIDRecentAircraftPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RIDRecentAircraftPosition) ProtoMessage() {}

func (x *RIDRecentAircraftPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RIDRecentAircraftPosition.ProtoReflect.Descriptor instead.
func (*RIDRecentAircraftPosition) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{27}
}

func (x *RIDRecentAircraftPosition) GetPosition() *RIDAircraftPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RIDRecentAircraftPosition) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SearchIdentificationServiceAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The area in which to search for Identification Service Areas.  Some Identification Service Areas near this area but wholly outside it may also be returned.
	Area string `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
	// If specified, indicates non-interest in any Identification Service Areas that end before this time.  RFC 3339 format, per OpenAPI specification.
	EarliestTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=earliest_time,json=earliestTime,proto3" json:"earliest_time,omitempty"`
	// If specified, indicates non-interest in any Identification Service Areas that start after this time.  RFC 3339 format, per OpenAPI specification.
	LatestTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=latest_time,json=latestTime,proto3" json:"latest_time,omitempty"`
}

func (x *SearchIdentificationServiceAreasRequest) Reset() {
	*x = SearchIdentificationServiceAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIdentificationServiceAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIdentificationServiceAreasRequest) ProtoMessage() {}

func (x *SearchIdentificationServiceAreasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIdentificationServiceAreasRequest.ProtoReflect.Descriptor instead.
func (*SearchIdentificationServiceAreasRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{28}
}

func (x *SearchIdentificationServiceAreasRequest) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *SearchIdentificationServiceAreasRequest) GetEarliestTime() *timestamp.Timestamp {
	if x != nil {
		return x.EarliestTime
	}
	return nil
}

func (x *SearchIdentificationServiceAreasRequest) GetLatestTime() *timestamp.Timestamp {
	if x != nil {
		return x.LatestTime
	}
	return nil
}

// Response to DSS query for Identification Service Areas in an area of interest.
type SearchIdentificationServiceAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identification Service Areas in the area of interest.
	ServiceAreas []*IdentificationServiceArea `protobuf:"bytes,1,rep,name=service_areas,json=serviceAreas,proto3" json:"service_areas,omitempty"`
}

func (x *SearchIdentificationServiceAreasResponse) Reset() {
	*x = SearchIdentificationServiceAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIdentificationServiceAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIdentificationServiceAreasResponse) ProtoMessage() {}

func (x *SearchIdentificationServiceAreasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIdentificationServiceAreasResponse.ProtoReflect.Descriptor instead.
func (*SearchIdentificationServiceAreasResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{29}
}

func (x *SearchIdentificationServiceAreasResponse) GetServiceAreas() []*IdentificationServiceArea {
	if x != nil {
		return x.ServiceAreas
	}
	return nil
}

type SearchSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The area in which to search for Subscriptions.  Some Subscriptions near this area but wholly outside it may also be returned.
	Area string `protobuf:"bytes,1,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *SearchSubscriptionsRequest) Reset() {
	*x = SearchSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsRequest) ProtoMessage() {}

func (x *SearchSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{30}
}

func (x *SearchSubscriptionsRequest) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

// Response to DSS query for subscriptions in a particular area.
type SearchSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriptions that overlap the specified area.
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SearchSubscriptionsResponse) Reset() {
	*x = SearchSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsResponse) ProtoMessage() {}

func (x *SearchSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{31}
}

func (x *SearchSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Subscriber to notify of a creation/change/deletion of a change in the airspace.  This is provided by the DSS to a client changing the airspace, and it is the responsibility of the client changing the airspace (they will receive a set of these notification requests) to send a notification to each specified `url`.
type SubscriberToNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// The endpoint that the client mutating the airspace should provide the update to.  API depends on the DSS action taken that triggered this notification request.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SubscriberToNotify) Reset() {
	*x = SubscriberToNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberToNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberToNotify) ProtoMessage() {}

func (x *SubscriberToNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberToNotify.ProtoReflect.Descriptor instead.
func (*SubscriberToNotify) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{32}
}

func (x *SubscriberToNotify) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *SubscriberToNotify) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Specification of a geographic area that a client is interested in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callbacks *SubscriptionCallbacks `protobuf:"bytes,1,opt,name=callbacks,proto3" json:"callbacks,omitempty"`
	// Unique identifier for this subscription.
	Id                string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	NotificationIndex int32  `protobuf:"varint,3,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	// Assigned by the DSS based on creating client’s ID (via access token).  Used for restricting mutation and deletion operations to owner.
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// If set, this subscription will be automatically removed after this time.  RFC 3339 format, per OpenAPI specification.
	TimeEnd *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// If set, this Subscription will not generate any notifications before this time.  RFC 3339 format, per OpenAPI specification.
	TimeStart *timestamp.Timestamp `protobuf:"bytes,6,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	Version   string               `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{33}
}

func (x *Subscription) GetCallbacks() *SubscriptionCallbacks {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *Subscription) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Subscription) GetTimeEnd() *timestamp.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Subscription) GetTimeStart() *timestamp.Timestamp {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Subscription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Endpoints that should be called when an applicable event occurs.  At least one field must be specified.
type SubscriptionCallbacks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If specified, other clients will be instructed by the DSS to call this endpoint when an Identification Service Area relevant to this Subscription is created, modified, or deleted.  Must implement PUT and DELETE according to the `/uss/identification_service_areas/{id}` path API.
	IdentificationServiceAreaUrl string `protobuf:"bytes,1,opt,name=identification_service_area_url,json=identificationServiceAreaUrl,proto3" json:"identification_service_area_url,omitempty"`
}

func (x *SubscriptionCallbacks) Reset() {
	*x = SubscriptionCallbacks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionCallbacks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionCallbacks) ProtoMessage() {}

func (x *SubscriptionCallbacks) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionCallbacks.ProtoReflect.Descriptor instead.
func (*SubscriptionCallbacks) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{34}
}

func (x *SubscriptionCallbacks) GetIdentificationServiceAreaUrl() string {
	if x != nil {
		return x.IdentificationServiceAreaUrl
	}
	return ""
}

// State of AreaSubscription which is causing a notification to be sent.
type SubscriptionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationIndex int32  `protobuf:"varint,1,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	SubscriptionId    string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *SubscriptionState) Reset() {
	*x = SubscriptionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionState) ProtoMessage() {}

func (x *SubscriptionState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionState.ProtoReflect.Descriptor instead.
func (*SubscriptionState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{35}
}

func (x *SubscriptionState) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *SubscriptionState) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Parameters for a request to update an Identification Service Area in the DSS.
type UpdateIdentificationServiceAreaParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bounding spacetime extents of this Identification Service Area.  End time must be specified.  If start time is not specified, it will remain unchanged.  Start times in the past should be rejected by the DSS unless they are unchanged from the Identification Service Area's current start time.
	//
	// These extents should not reveal any sensitive information about the flight or flights within them.  This means, for instance, that extents should not tightly-wrap a flight path, nor should they generally be centered around the takeoff point of a single flight.
	Extents    *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	FlightsUrl string    `protobuf:"bytes,2,opt,name=flights_url,json=flightsUrl,proto3" json:"flights_url,omitempty"`
}

func (x *UpdateIdentificationServiceAreaParameters) Reset() {
	*x = UpdateIdentificationServiceAreaParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentificationServiceAreaParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentificationServiceAreaParameters) ProtoMessage() {}

func (x *UpdateIdentificationServiceAreaParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentificationServiceAreaParameters.ProtoReflect.Descriptor instead.
func (*UpdateIdentificationServiceAreaParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateIdentificationServiceAreaParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *UpdateIdentificationServiceAreaParameters) GetFlightsUrl() string {
	if x != nil {
		return x.FlightsUrl
	}
	return ""
}

type UpdateIdentificationServiceAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Identification Service Area.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *UpdateIdentificationServiceAreaParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Version string used to reference an Identification Service Area at a particular point in time. Any updates to an existing Identification Service Area must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateIdentificationServiceAreaRequest) Reset() {
	*x = UpdateIdentificationServiceAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdentificationServiceAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdentificationServiceAreaRequest) ProtoMessage() {}

func (x *UpdateIdentificationServiceAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdentificationServiceAreaRequest.ProtoReflect.Descriptor instead.
func (*UpdateIdentificationServiceAreaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateIdentificationServiceAreaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIdentificationServiceAreaRequest) GetParams() *UpdateIdentificationServiceAreaParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateIdentificationServiceAreaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Parameters for a request to update a subscription in the DSS.
type UpdateSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callbacks *SubscriptionCallbacks `protobuf:"bytes,1,opt,name=callbacks,proto3" json:"callbacks,omitempty"`
	// The spacetime extents of the volume to subscribe to.
	//
	// This subscription will automatically be deleted after its end time if it has not been refreshed by then.  If end time is not specified, the value will be chosen automatically by the DSS.
	//
	// Note that some Entities triggering notifications may lie entirely outside the requested area.
	Extents *Volume4D `protobuf:"bytes,2,opt,name=extents,proto3" json:"extents,omitempty"`
}

func (x *UpdateSubscriptionParameters) Reset() {
	*x = UpdateSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionParameters) ProtoMessage() {}

func (x *UpdateSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateSubscriptionParameters) GetCallbacks() *SubscriptionCallbacks {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *UpdateSubscriptionParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

type UpdateSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Request body.
	Params *UpdateSubscriptionParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Version string used to reference a Subscription at a particular point in time. Any updates to an existing Subscription must contain the corresponding version to maintain idempotent updates.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdateSubscriptionRequest) Reset() {
	*x = UpdateSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionRequest) ProtoMessage() {}

func (x *UpdateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSubscriptionRequest) GetParams() *UpdateSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateSubscriptionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// A three-dimensional geographic volume consisting of a vertically-extruded polygon.
type Volume3D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum bounding altitude of this volume.
	AltitudeHi float32 `protobuf:"fixed32,1,opt,name=altitude_hi,json=altitudeHi,proto3" json:"altitude_hi,omitempty"`
	// Minimum bounding altitude of this volume.
	AltitudeLo float32 `protobuf:"fixed32,2,opt,name=altitude_lo,json=altitudeLo,proto3" json:"altitude_lo,omitempty"`
	// Projection of this volume onto the earth's surface.
	Footprint *GeoPolygon `protobuf:"bytes,3,opt,name=footprint,proto3" json:"footprint,omitempty"`
}

func (x *Volume3D) Reset() {
	*x = Volume3D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume3D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume3D) ProtoMessage() {}

func (x *Volume3D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume3D.ProtoReflect.Descriptor instead.
func (*Volume3D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{40}
}

func (x *Volume3D) GetAltitudeHi() float32 {
	if x != nil {
		return x.AltitudeHi
	}
	return 0
}

func (x *Volume3D) GetAltitudeLo() float32 {
	if x != nil {
		return x.AltitudeLo
	}
	return 0
}

func (x *Volume3D) GetFootprint() *GeoPolygon {
	if x != nil {
		return x.Footprint
	}
	return nil
}

// Contiguous block of geographic spacetime.
type Volume4D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constant spatial extent of this volume.
	SpatialVolume *Volume3D `protobuf:"bytes,1,opt,name=spatial_volume,json=spatialVolume,proto3" json:"spatial_volume,omitempty"`
	// End time of this volume.  RFC 3339 format, per OpenAPI specification.
	TimeEnd *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of this volume.  RFC 3339 format, per OpenAPI specification.
	TimeStart *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
}

func (x *Volume4D) Reset() {
	*x = Volume4D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume4D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume4D) ProtoMessage() {}

func (x *Volume4D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume4D.ProtoReflect.Descriptor instead.
func (*Volume4D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP(), []int{41}
}

func (x *Volume4D) GetSpatialVolume() *Volume3D {
	if x != nil {
		return x.SpatialVolume
	}
	return nil
}

func (x *Volume4D) GetTimeEnd() *timestamp.Timestamp {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Volume4D) GetTimeStart() *timestamp.Timestamp {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

var File_pkg_api_v1_ridpbv1_rid_proto protoreflect.FileDescriptor

var file_pkg_api_v1_ridpbv1_rid_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x55, 0x72,
	0x6c, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x52, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x4f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x7c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x35, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x4c, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x22, 0xea, 0x01, 0x0a, 0x32, 0x50,
	0x75, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x24, 0x50, 0x75, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x13, 0x52, 0x49, 0x44, 0x41, 0x69,
	0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x09, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x10,
	0x52, 0x49, 0x44, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x65, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x10,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4c,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x41, 0x69, 0x72, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0e,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0x39, 0x0a, 0x0b, 0x52, 0x49, 0x44, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xb4, 0x02, 0x0a,
	0x09, 0x52, 0x49, 0x44, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x69,
	0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x41,
	0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x69, 0x72,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x41, 0x69,
	0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49,
	0x44, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x10, 0x52, 0x49, 0x44, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69,
	0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x52,
	0x49, 0x44, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x31, 0x2e, 0x52, 0x49, 0x44, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x49, 0x44, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x52, 0x49, 0x44,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x25, 0x52, 0x49, 0x44, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x49,
	0x44, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10,
	0x01, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x52, 0x49, 0x44, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41,
	0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x52, 0x49, 0x44, 0x41,
	0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x27, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x61, 0x72,
	0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x28, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x22, 0x30, 0x0a, 0x1a,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0x5a,
	0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x40, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a,
	0x1f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x55, 0x72, 0x6c, 0x22, 0x6b, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x79, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x9e, 0x01, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x07,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44,
	0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x7f, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x44, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x48, 0x69, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x12, 0x31,
	0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x12, 0x38,
	0x0a, 0x0e, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x44, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x74, 0x69,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2a, 0xd3, 0x01, 0x0a, 0x12, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x5f, 0x41, 0x31, 0x30, 0x5f, 0x4e, 0x4d, 0x5f, 0x50, 0x4c,
	0x55, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x31, 0x30, 0x5f, 0x4e, 0x4d,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x5f, 0x41, 0x34, 0x5f, 0x4e, 0x4d, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x5f, 0x41, 0x32, 0x5f, 0x4e, 0x4d, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x48, 0x5f, 0x41, 0x31, 0x5f, 0x4e, 0x4d, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41,
	0x30, 0x35, 0x5f, 0x4e, 0x4d, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x30, 0x33,
	0x5f, 0x4e, 0x4d, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x30, 0x31, 0x5f, 0x4e,
	0x4d, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x5f, 0x41, 0x30, 0x30, 0x35, 0x5f, 0x4e, 0x4d,
	0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x5f, 0x41, 0x33, 0x30, 0x4d, 0x10, 0x0a, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x5f, 0x41, 0x31, 0x30, 0x4d, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5f,
	0x41, 0x33, 0x4d, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5f, 0x41, 0x31, 0x4d, 0x10, 0x0d,
	0x2a, 0x9d, 0x02, 0x0a, 0x0f, 0x52, 0x49, 0x44, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4c,
	0x41, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x45, 0x52, 0x4f, 0x50, 0x4c,
	0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x4c, 0x49, 0x43, 0x4f, 0x50,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x59, 0x52, 0x4f, 0x50, 0x4c, 0x41,
	0x4e, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x54, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x52, 0x4e, 0x49, 0x54, 0x48, 0x4f, 0x50, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x49, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x49, 0x54, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x42, 0x41,
	0x4c, 0x4c, 0x4f, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x50, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x49, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52, 0x45,
	0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x43, 0x48,
	0x55, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x49, 0x52, 0x43, 0x52, 0x41, 0x46, 0x54, 0x10, 0x0d,
	0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x42, 0x53, 0x54, 0x41,
	0x43, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0f,
	0x2a, 0x40, 0x0a, 0x14, 0x52, 0x49, 0x44, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45,
	0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x49, 0x52, 0x42, 0x4f, 0x52, 0x4e, 0x45,
	0x10, 0x02, 0x2a, 0x68, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x5f, 0x41, 0x31, 0x30, 0x4d, 0x50, 0x53, 0x5f,
	0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x5f, 0x41, 0x31, 0x30, 0x4d,
	0x50, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x41, 0x33, 0x4d, 0x50, 0x53, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x5f, 0x41, 0x31, 0x4d, 0x50, 0x53, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x5f, 0x41, 0x30, 0x33, 0x4d, 0x50, 0x53, 0x10, 0x05, 0x2a, 0x7b, 0x0a, 0x10,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x5f, 0x41, 0x31, 0x35, 0x30, 0x4d, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x5f, 0x41, 0x31, 0x35, 0x30, 0x4d, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x56, 0x5f, 0x41, 0x34, 0x35, 0x4d, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x56,
	0x5f, 0x41, 0x32, 0x35, 0x4d, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x5f, 0x41, 0x31, 0x30,
	0x4d, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x5f, 0x41, 0x33, 0x4d, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x5f, 0x41, 0x31, 0x4d, 0x10, 0x07, 0x32, 0xfe, 0x0c, 0x0a, 0x22, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xbc, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x86, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x8b, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2c, 0x2e, 0x72, 0x69,
	0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x73, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x30, 0x2e, 0x72, 0x69, 0x64,
	0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72,
	0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x7f, 0x0a,
	0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x69, 0x64, 0x70,
	0x62, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x73, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc6,
	0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x2f, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x1a, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x73, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x69, 0x64, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x24, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_api_v1_ridpbv1_rid_proto_rawDescOnce sync.Once
	file_pkg_api_v1_ridpbv1_rid_proto_rawDescData = file_pkg_api_v1_ridpbv1_rid_proto_rawDesc
)

func file_pkg_api_v1_ridpbv1_rid_proto_rawDescGZIP() []byte {
	file_pkg_api_v1_ridpbv1_rid_proto_rawDescOnce.Do(func() {
		file_pkg_api_v1_ridpbv1_rid_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v1_ridpbv1_rid_proto_rawDescData)
	})
	return file_pkg_api_v1_ridpbv1_rid_proto_rawDescData
}

var file_pkg_api_v1_ridpbv1_rid_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pkg_api_v1_ridpbv1_rid_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_pkg_api_v1_ridpbv1_rid_proto_goTypes = []interface{}{
	(HorizontalAccuracy)(0),                                    // 0: ridpbv1.HorizontalAccuracy
	(RIDAircraftType)(0),                                       // 1: ridpbv1.RIDAircraftType
	(RIDOperationalStatus)(0),                                  // 2: ridpbv1.RIDOperationalStatus
	(SpeedAccuracy)(0),                                         // 3: ridpbv1.SpeedAccuracy
	(VerticalAccuracy)(0),                                      // 4: ridpbv1.VerticalAccuracy
	(RIDHeight_RIDHeightReference)(0),                          // 5: ridpbv1.RIDHeight.RIDHeightReference
	(*CreateIdentificationServiceAreaParameters)(nil),          // 6: ridpbv1.CreateIdentificationServiceAreaParameters
	(*CreateIdentificationServiceAreaRequest)(nil),             // 7: ridpbv1.CreateIdentificationServiceAreaRequest
	(*CreateSubscriptionParameters)(nil),                       // 8: ridpbv1.CreateSubscriptionParameters
	(*CreateSubscriptionRequest)(nil),                          // 9: ridpbv1.CreateSubscriptionRequest
	(*DeleteIdentificationServiceAreaRequest)(nil),             // 10: ridpbv1.DeleteIdentificationServiceAreaRequest
	(*DeleteIdentificationServiceAreaResponse)(nil),            // 11: ridpbv1.DeleteIdentificationServiceAreaResponse
	(*DeleteSubscriptionRequest)(nil),                          // 12: ridpbv1.DeleteSubscriptionRequest
	(*DeleteSubscriptionResponse)(nil),                         // 13: ridpbv1.DeleteSubscriptionResponse
	(*ErrorResponse)(nil),                                      // 14: ridpbv1.ErrorResponse
	(*GeoPolygon)(nil),                                         // 15: ridpbv1.GeoPolygon
	(*GetFlightDetailsResponse)(nil),                           // 16: ridpbv1.GetFlightDetailsResponse
	(*GetFlightsResponse)(nil),                                 // 17: ridpbv1.GetFlightsResponse
	(*GetIdentificationServiceAreaRequest)(nil),                // 18: ridpbv1.GetIdentificationServiceAreaRequest
	(*GetIdentificationServiceAreaResponse)(nil),               // 19: ridpbv1.GetIdentificationServiceAreaResponse
	(*GetSubscriptionRequest)(nil),                             // 20: ridpbv1.GetSubscriptionRequest
	(*GetSubscriptionResponse)(nil),                            // 21: ridpbv1.GetSubscriptionResponse
	(*IdentificationServiceArea)(nil),                          // 22: ridpbv1.IdentificationServiceArea
	(*LatLngPoint)(nil),                                        // 23: ridpbv1.LatLngPoint
	(*PutIdentificationServiceAreaNotificationParameters)(nil), // 24: ridpbv1.PutIdentificationServiceAreaNotificationParameters
	(*PutIdentificationServiceAreaResponse)(nil),               // 25: ridpbv1.PutIdentificationServiceAreaResponse
	(*PutSubscriptionResponse)(nil),                            // 26: ridpbv1.PutSubscriptionResponse
	(*RIDAircraftPosition)(nil),                                // 27: ridpbv1.RIDAircraftPosition
	(*RIDAircraftState)(nil),                                   // 28: ridpbv1.RIDAircraftState
	(*RIDAuthData)(nil),                                        // 29: ridpbv1.RIDAuthData
	(*RIDFlight)(nil),                                          // 30: ridpbv1.RIDFlight
	(*RIDFlightDetails)(nil),                                   // 31: ridpbv1.RIDFlightDetails
	(*RIDHeight)(nil),                                          // 32: ridpbv1.RIDHeight
	(*RIDRecentAircraftPosition)(nil),                          // 33: ridpbv1.RIDRecentAircraftPosition
	(*SearchIdentificationServiceAreasRequest)(nil),            // 34: ridpbv1.SearchIdentificationServiceAreasRequest
	(*SearchIdentificationServiceAreasResponse)(nil),           // 35: ridpbv1.SearchIdentificationServiceAreasResponse
	(*SearchSubscriptionsRequest)(nil),                         // 36: ridpbv1.SearchSubscriptionsRequest
	(*SearchSubscriptionsResponse)(nil),                        // 37: ridpbv1.SearchSubscriptionsResponse
	(*SubscriberToNotify)(nil),                                 // 38: ridpbv1.SubscriberToNotify
	(*Subscription)(nil),                                       // 39: ridpbv1.Subscription
	(*SubscriptionCallbacks)(nil),                              // 40: ridpbv1.SubscriptionCallbacks
	(*SubscriptionState)(nil),                                  // 41: ridpbv1.SubscriptionState
	(*UpdateIdentificationServiceAreaParameters)(nil),          // 42: ridpbv1.UpdateIdentificationServiceAreaParameters
	(*UpdateIdentificationServiceAreaRequest)(nil),             // 43: ridpbv1.UpdateIdentificationServiceAreaRequest
	(*UpdateSubscriptionParameters)(nil),                       // 44: ridpbv1.UpdateSubscriptionParameters
	(*UpdateSubscriptionRequest)(nil),                          // 45: ridpbv1.UpdateSubscriptionRequest
	(*Volume3D)(nil),                                           // 46: ridpbv1.Volume3D
	(*Volume4D)(nil),                                           // 47: ridpbv1.Volume4D
	(*timestamp.Timestamp)(nil),                                // 48: google.protobuf.Timestamp
}
var file_pkg_api_v1_ridpbv1_rid_proto_depIdxs = []int32{
	47, // 0: ridpbv1.CreateIdentificationServiceAreaParameters.extents:type_name -> ridpbv1.Volume4D
	6,  // 1: ridpbv1.CreateIdentificationServiceAreaRequest.params:type_name -> ridpbv1.CreateIdentificationServiceAreaParameters
	40, // 2: ridpbv1.CreateSubscriptionParameters.callbacks:type_name -> ridpbv1.SubscriptionCallbacks
	47, // 3: ridpbv1.CreateSubscriptionParameters.extents:type_name -> ridpbv1.Volume4D
	8,  // 4: ridpbv1.CreateSubscriptionRequest.params:type_name -> ridpbv1.CreateSubscriptionParameters
	22, // 5: ridpbv1.DeleteIdentificationServiceAreaResponse.service_area:type_name -> ridpbv1.IdentificationServiceArea
	38, // 6: ridpbv1.DeleteIdentificationServiceAreaResponse.subscribers:type_name -> ridpbv1.SubscriberToNotify
	39, // 7: ridpbv1.DeleteSubscriptionResponse.subscription:type_name -> ridpbv1.Subscription
	23, // 8: ridpbv1.GeoPolygon.vertices:type_name -> ridpbv1.LatLngPoint
	31, // 9: ridpbv1.GetFlightDetailsResponse.details:type_name -> ridpbv1.RIDFlightDetails
	30, // 10: ridpbv1.GetFlightsResponse.flights:type_name -> ridpbv1.RIDFlight
	48, // 11: ridpbv1.GetFlightsResponse.timestamp:type_name -> google.protobuf.Timestamp
	22, // 12: ridpbv1.GetIdentificationServiceAreaResponse.service_area:type_name -> ridpbv1.IdentificationServiceArea
	39, // 13: ridpbv1.GetSubscriptionResponse.subscription:type_name -> ridpbv1.Subscription
	48, // 14: ridpbv1.IdentificationServiceArea.time_end:type_name -> google.protobuf.Timestamp
	48, // 15: ridpbv1.IdentificationServiceArea.time_start:type_name -> google.protobuf.Timestamp
	47, // 16: ridpbv1.PutIdentificationServiceAreaNotificationParameters.extents:type_name -> ridpbv1.Volume4D
	22, // 17: ridpbv1.PutIdentificationServiceAreaNotificationParameters.service_area:type_name -> ridpbv1.IdentificationServiceArea
	41, // 18: ridpbv1.PutIdentificationServiceAreaNotificationParameters.subscriptions:type_name -> ridpbv1.SubscriptionState
	22, // 19: ridpbv1.PutIdentificationServiceAreaResponse.service_area:type_name -> ridpbv1.IdentificationServiceArea
	38, // 20: ridpbv1.PutIdentificationServiceAreaResponse.subscribers:type_name -> ridpbv1.SubscriberToNotify
	22, // 21: ridpbv1.PutSubscriptionResponse.service_areas:type_name -> ridpbv1.IdentificationServiceArea
	39, // 22: ridpbv1.PutSubscriptionResponse.subscription:type_name -> ridpbv1.Subscription
	0,  // 23: ridpbv1.RIDAircraftPosition.accuracy_h:type_name -> ridpbv1.HorizontalAccuracy
	4,  // 24: ridpbv1.RIDAircraftPosition.accuracy_v:type_name -> ridpbv1.VerticalAccuracy
	48, // 25: ridpbv1.RIDAircraftState.group_time_end:type_name -> google.protobuf.Timestamp
	48, // 26: ridpbv1.RIDAircraftState.group_time_start:type_name -> google.protobuf.Timestamp
	32, // 27: ridpbv1.RIDAircraftState.height:type_name -> ridpbv1.RIDHeight
	2,  // 28: ridpbv1.RIDAircraftState.operational_status:type_name -> ridpbv1.RIDOperationalStatus
	27, // 29: ridpbv1.RIDAircraftState.position:type_name -> ridpbv1.RIDAircraftPosition
	3,  // 30: ridpbv1.RIDAircraftState.speed_accuracy:type_name -> ridpbv1.SpeedAccuracy
	48, // 31: ridpbv1.RIDAircraftState.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 32: ridpbv1.RIDFlight.aircraft_type:type_name -> ridpbv1.RIDAircraftType
	28, // 33: ridpbv1.RIDFlight.current_state:type_name -> ridpbv1.RIDAircraftState
	33, // 34: ridpbv1.RIDFlight.recent_positions:type_name -> ridpbv1.RIDRecentAircraftPosition
	47, // 35: ridpbv1.RIDFlight.volumes:type_name -> ridpbv1.Volume4D
	29, // 36: ridpbv1.RIDFlightDetails.auth_data:type_name -> ridpbv1.RIDAuthData
	23, // 37: ridpbv1.RIDFlightDetails.operator_location:type_name -> ridpbv1.LatLngPoint
	5,  // 38: ridpbv1.RIDHeight.reference:type_name -> ridpbv1.RIDHeight.RIDHeightReference
	27, // 39: ridpbv1.RIDRecentAircraftPosition.position:type_name -> ridpbv1.RIDAircraftPosition
	48, // 40: ridpbv1.RIDRecentAircraftPosition.time:type_name -> google.protobuf.Timestamp
	48, // 41: ridpbv1.SearchIdentificationServiceAreasRequest.earliest_time:type_name -> google.protobuf.Timestamp
	48, // 42: ridpbv1.SearchIdentificationServiceAreasRequest.latest_time:type_name -> google.protobuf.Timestamp
	22, // 43: ridpbv1.SearchIdentificationServiceAreasResponse.service_areas:type_name -> ridpbv1.IdentificationServiceArea
	39, // 44: ridpbv1.SearchSubscriptionsResponse.subscriptions:type_name -> ridpbv1.Subscription
	41, // 45: ridpbv1.SubscriberToNotify.subscriptions:type_name -> ridpbv1.SubscriptionState
	40, // 46: ridpbv1.Subscription.callbacks:type_name -> ridpbv1.SubscriptionCallbacks
	48, // 47: ridpbv1.Subscription.time_end:type_name -> google.protobuf.Timestamp
	48, // 48: ridpbv1.Subscription.time_start:type_name -> google.protobuf.Timestamp
	47, // 49: ridpbv1.UpdateIdentificationServiceAreaParameters.extents:type_name -> ridpbv1.Volume4D
	42, // 50: ridpbv1.UpdateIdentificationServiceAreaRequest.params:type_name -> ridpbv1.UpdateIdentificationServiceAreaParameters
	40, // 51: ridpbv1.UpdateSubscriptionParameters.callbacks:type_name -> ridpbv1.SubscriptionCallbacks
	47, // 52: ridpbv1.UpdateSubscriptionParameters.extents:type_name -> ridpbv1.Volume4D
	44, // 53: ridpbv1.UpdateSubscriptionRequest.params:type_name -> ridpbv1.UpdateSubscriptionParameters
	15, // 54: ridpbv1.Volume3D.footprint:type_name -> ridpbv1.GeoPolygon
	46, // 55: ridpbv1.Volume4D.spatial_volume:type_name -> ridpbv1.Volume3D
	48, // 56: ridpbv1.Volume4D.time_end:type_name -> google.protobuf.Timestamp
	48, // 57: ridpbv1.Volume4D.time_start:type_name -> google.protobuf.Timestamp
	7,  // 58: ridpbv1.DiscoveryAndSynchronizationService.CreateIdentificationServiceArea:input_type -> ridpbv1.CreateIdentificationServiceAreaRequest
	9,  // 59: ridpbv1.DiscoveryAndSynchronizationService.CreateSubscription:input_type -> ridpbv1.CreateSubscriptionRequest
	10, // 60: ridpbv1.DiscoveryAndSynchronizationService.DeleteIdentificationServiceArea:input_type -> ridpbv1.DeleteIdentificationServiceAreaRequest
	12, // 61: ridpbv1.DiscoveryAndSynchronizationService.DeleteSubscription:input_type -> ridpbv1.DeleteSubscriptionRequest
	18, // 62: ridpbv1.DiscoveryAndSynchronizationService.GetIdentificationServiceArea:input_type -> ridpbv1.GetIdentificationServiceAreaRequest
	20, // 63: ridpbv1.DiscoveryAndSynchronizationService.GetSubscription:input_type -> ridpbv1.GetSubscriptionRequest
	34, // 64: ridpbv1.DiscoveryAndSynchronizationService.SearchIdentificationServiceAreas:input_type -> ridpbv1.SearchIdentificationServiceAreasRequest
	36, // 65: ridpbv1.DiscoveryAndSynchronizationService.SearchSubscriptions:input_type -> ridpbv1.SearchSubscriptionsRequest
	43, // 66: ridpbv1.DiscoveryAndSynchronizationService.UpdateIdentificationServiceArea:input_type -> ridpbv1.UpdateIdentificationServiceAreaRequest
	45, // 67: ridpbv1.DiscoveryAndSynchronizationService.UpdateSubscription:input_type -> ridpbv1.UpdateSubscriptionRequest
	25, // 68: ridpbv1.DiscoveryAndSynchronizationService.CreateIdentificationServiceArea:output_type -> ridpbv1.PutIdentificationServiceAreaResponse
	26, // 69: ridpbv1.DiscoveryAndSynchronizationService.CreateSubscription:output_type -> ridpbv1.PutSubscriptionResponse
	11, // 70: ridpbv1.DiscoveryAndSynchronizationService.DeleteIdentificationServiceArea:output_type -> ridpbv1.DeleteIdentificationServiceAreaResponse
	13, // 71: ridpbv1.DiscoveryAndSynchronizationService.DeleteSubscription:output_type -> ridpbv1.DeleteSubscriptionResponse
	19, // 72: ridpbv1.DiscoveryAndSynchronizationService.GetIdentificationServiceArea:output_type -> ridpbv1.GetIdentificationServiceAreaResponse
	21, // 73: ridpbv1.DiscoveryAndSynchronizationService.GetSubscription:output_type -> ridpbv1.GetSubscriptionResponse
	35, // 74: ridpbv1.DiscoveryAndSynchronizationService.SearchIdentificationServiceAreas:output_type -> ridpbv1.SearchIdentificationServiceAreasResponse
	37, // 75: ridpbv1.DiscoveryAndSynchronizationService.SearchSubscriptions:output_type -> ridpbv1.SearchSubscriptionsResponse
	25, // 76: ridpbv1.DiscoveryAndSynchronizationService.UpdateIdentificationServiceArea:output_type -> ridpbv1.PutIdentificationServiceAreaResponse
	26, // 77: ridpbv1.DiscoveryAndSynchronizationService.UpdateSubscription:output_type -> ridpbv1.PutSubscriptionResponse
	68, // [68:78] is the sub-list for method output_type
	58, // [58:68] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_pkg_api_v1_ridpbv1_rid_proto_init() }
func file_pkg_api_v1_ridpbv1_rid_proto_init() {
	if File_pkg_api_v1_ridpbv1_rid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdentificationServiceAreaParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIdentificationServiceAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPolygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlightDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentificationServiceAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentificationServiceArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLngPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutIdentificationServiceAreaNotificationParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutIdentificationServiceAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDAircraftPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDAircraftState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDAuthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDFlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDFlightDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RIDRecentAircraftPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIdentificationServiceAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIdentificationServiceAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberToNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionCallbacks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentificationServiceAreaParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdentificationServiceAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume3D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_ridpbv1_rid_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume4D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v1_ridpbv1_rid_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_v1_ridpbv1_rid_proto_goTypes,
		DependencyIndexes: file_pkg_api_v1_ridpbv1_rid_proto_depIdxs,
		EnumInfos:         file_pkg_api_v1_ridpbv1_rid_proto_enumTypes,
		MessageInfos:      file_pkg_api_v1_ridpbv1_rid_proto_msgTypes,
	}.Build()
	File_pkg_api_v1_ridpbv1_rid_proto = out.File
	file_pkg_api_v1_ridpbv1_rid_proto_rawDesc = nil
	file_pkg_api_v1_ridpbv1_rid_proto_goTypes = nil
	file_pkg_api_v1_ridpbv1_rid_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiscoveryAndSynchronizationServiceClient is the client API for DiscoveryAndSynchronizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryAndSynchronizationServiceClient interface {
	// /dss/identification_service_areas/{id}
	//
	// Create a new Identification Service Area.  This call will fail if an Identification Service Area with the same ID already exists.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.
	CreateIdentificationServiceArea(ctx context.Context, in *CreateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Create a subscription.  This call will fail if a Subscription with the same ID already exists.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Delete an Identification Service Area.  USSs should not delete Identification Service Areas before the end of the last managed flight plus the retention period.
	DeleteIdentificationServiceArea(ctx context.Context, in *DeleteIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*DeleteIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Delete a subscription.
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}
	//
	// Retrieve full information of an Identification Service Area owned by the client.
	GetIdentificationServiceArea(ctx context.Context, in *GetIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*GetIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Verify the existence/valdity and state of a particular subscription.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// /dss/identification_service_areas
	//
	// Retrieve all Identification Service Areas in the DAR for a given area during the given time.  Note that some Identification Service Areas returned may lie entirely outside the requested area.
	SearchIdentificationServiceAreas(ctx context.Context, in *SearchIdentificationServiceAreasRequest, opts ...grpc.CallOption) (*SearchIdentificationServiceAreasResponse, error)
	// /dss/subscriptions
	//
	// Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	//
	// Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.
	SearchSubscriptions(ctx context.Context, in *SearchSubscriptionsRequest, opts ...grpc.CallOption) (*SearchSubscriptionsResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Update an Identification Service Area.  The full content of the existing Identification Service Area will be replaced with the provided information as only the most recent version is retained.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.  Updating `time_start` is not allowed if it is before the current time.
	UpdateIdentificationServiceArea(ctx context.Context, in *UpdateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Update a Subscription.  The full content of the existing Subscription will be replaced with the provided information as only the most recent version is retained.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
}

type discoveryAndSynchronizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryAndSynchronizationServiceClient(cc grpc.ClientConnInterface) DiscoveryAndSynchronizationServiceClient {
	return &discoveryAndSynchronizationServiceClient{cc}
}

func (c *discoveryAndSynchronizationServiceClient) CreateIdentificationServiceArea(ctx context.Context, in *CreateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error) {
	out := new(PutIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/CreateIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) DeleteIdentificationServiceArea(ctx context.Context, in *DeleteIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*DeleteIdentificationServiceAreaResponse, error) {
	out := new(DeleteIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/DeleteIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) GetIdentificationServiceArea(ctx context.Context, in *GetIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*GetIdentificationServiceAreaResponse, error) {
	out := new(GetIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/GetIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) SearchIdentificationServiceAreas(ctx context.Context, in *SearchIdentificationServiceAreasRequest, opts ...grpc.CallOption) (*SearchIdentificationServiceAreasResponse, error) {
	out := new(SearchIdentificationServiceAreasResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/SearchIdentificationServiceAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) SearchSubscriptions(ctx context.Context, in *SearchSubscriptionsRequest, opts ...grpc.CallOption) (*SearchSubscriptionsResponse, error) {
	out := new(SearchSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/SearchSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) UpdateIdentificationServiceArea(ctx context.Context, in *UpdateIdentificationServiceAreaRequest, opts ...grpc.CallOption) (*PutIdentificationServiceAreaResponse, error) {
	out := new(PutIdentificationServiceAreaResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/UpdateIdentificationServiceArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryAndSynchronizationServiceClient) UpdateSubscription(ctx context.Context, in *UpdateSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ridpbv1.DiscoveryAndSynchronizationService/UpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryAndSynchronizationServiceServer is the server API for DiscoveryAndSynchronizationService service.
type DiscoveryAndSynchronizationServiceServer interface {
	// /dss/identification_service_areas/{id}
	//
	// Create a new Identification Service Area.  This call will fail if an Identification Service Area with the same ID already exists.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.
	CreateIdentificationServiceArea(context.Context, *CreateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Create a subscription.  This call will fail if a Subscription with the same ID already exists.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*PutSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Delete an Identification Service Area.  USSs should not delete Identification Service Areas before the end of the last managed flight plus the retention period.
	DeleteIdentificationServiceArea(context.Context, *DeleteIdentificationServiceAreaRequest) (*DeleteIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Delete a subscription.
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	// /dss/identification_service_areas/{id}
	//
	// Retrieve full information of an Identification Service Area owned by the client.
	GetIdentificationServiceArea(context.Context, *GetIdentificationServiceAreaRequest) (*GetIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}
	//
	// Verify the existence/valdity and state of a particular subscription.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// /dss/identification_service_areas
	//
	// Retrieve all Identification Service Areas in the DAR for a given area during the given time.  Note that some Identification Service Areas returned may lie entirely outside the requested area.
	SearchIdentificationServiceAreas(context.Context, *SearchIdentificationServiceAreasRequest) (*SearchIdentificationServiceAreasResponse, error)
	// /dss/subscriptions
	//
	// Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	//
	// Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.
	SearchSubscriptions(context.Context, *SearchSubscriptionsRequest) (*SearchSubscriptionsResponse, error)
	// /dss/identification_service_areas/{id}/{version}
	//
	// Update an Identification Service Area.  The full content of the existing Identification Service Area will be replaced with the provided information as only the most recent version is retained.
	//
	// The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.  Updating `time_start` is not allowed if it is before the current time.
	UpdateIdentificationServiceArea(context.Context, *UpdateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error)
	// /dss/subscriptions/{id}/{version}
	//
	// Update a Subscription.  The full content of the existing Subscription will be replaced with the provided information as only the most recent version is retained.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*PutSubscriptionResponse, error)
}

// UnimplementedDiscoveryAndSynchronizationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryAndSynchronizationServiceServer struct {
}

func (*UnimplementedDiscoveryAndSynchronizationServiceServer) CreateIdentificationServiceArea(context.Context, *CreateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentificationServiceArea not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) DeleteIdentificationServiceArea(context.Context, *DeleteIdentificationServiceAreaRequest) (*DeleteIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentificationServiceArea not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) GetIdentificationServiceArea(context.Context, *GetIdentificationServiceAreaRequest) (*GetIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentificationServiceArea not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) SearchIdentificationServiceAreas(context.Context, *SearchIdentificationServiceAreasRequest) (*SearchIdentificationServiceAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIdentificationServiceAreas not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) SearchSubscriptions(context.Context, *SearchSubscriptionsRequest) (*SearchSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubscriptions not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) UpdateIdentificationServiceArea(context.Context, *UpdateIdentificationServiceAreaRequest) (*PutIdentificationServiceAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentificationServiceArea not implemented")
}
func (*UnimplementedDiscoveryAndSynchronizationServiceServer) UpdateSubscription(context.Context, *UpdateSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscription not implemented")
}

func RegisterDiscoveryAndSynchronizationServiceServer(s *grpc.Server, srv DiscoveryAndSynchronizationServiceServer) {
	s.RegisterService(&_DiscoveryAndSynchronizationService_serviceDesc, srv)
}

func _DiscoveryAndSynchronizationService_CreateIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).CreateIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/CreateIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).CreateIdentificationServiceArea(ctx, req.(*CreateIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_DeleteIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).DeleteIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/DeleteIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).DeleteIdentificationServiceArea(ctx, req.(*DeleteIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_GetIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).GetIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/GetIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).GetIdentificationServiceArea(ctx, req.(*GetIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_SearchIdentificationServiceAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIdentificationServiceAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).SearchIdentificationServiceAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/SearchIdentificationServiceAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).SearchIdentificationServiceAreas(ctx, req.(*SearchIdentificationServiceAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_SearchSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).SearchSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/SearchSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).SearchSubscriptions(ctx, req.(*SearchSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_UpdateIdentificationServiceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentificationServiceAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).UpdateIdentificationServiceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/UpdateIdentificationServiceArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).UpdateIdentificationServiceArea(ctx, req.(*UpdateIdentificationServiceAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryAndSynchronizationService_UpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryAndSynchronizationServiceServer).UpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ridpbv1.DiscoveryAndSynchronizationService/UpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryAndSynchronizationServiceServer).UpdateSubscription(ctx, req.(*UpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscoveryAndSynchronizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ridpbv1.DiscoveryAndSynchronizationService",
	HandlerType: (*DiscoveryAndSynchronizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentificationServiceArea",
			Handler:    _DiscoveryAndSynchronizationService_CreateIdentificationServiceArea_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _DiscoveryAndSynchronizationService_CreateSubscription_Handler,
		},
		{
			MethodName: "DeleteIdentificationServiceArea",
			Handler:    _DiscoveryAndSynchronizationService_DeleteIdentificationServiceArea_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _DiscoveryAndSynchronizationService_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetIdentificationServiceArea",
			Handler:    _DiscoveryAndSynchronizationService_GetIdentificationServiceArea_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _DiscoveryAndSynchronizationService_GetSubscription_Handler,
		},
		{
			MethodName: "SearchIdentificationServiceAreas",
			Handler:    _DiscoveryAndSynchronizationService_SearchIdentificationServiceAreas_Handler,
		},
		{
			MethodName: "SearchSubscriptions",
			Handler:    _DiscoveryAndSynchronizationService_SearchSubscriptions_Handler,
		},
		{
			MethodName: "UpdateIdentificationServiceArea",
			Handler:    _DiscoveryAndSynchronizationService_UpdateIdentificationServiceArea_Handler,
		},
		{
			MethodName: "UpdateSubscription",
			Handler:    _DiscoveryAndSynchronizationService_UpdateSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/ridpbv1/rid.proto",
}
